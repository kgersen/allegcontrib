// /**************************************************************************\
// | File version history:                                                    |
// |                                                                          |
// | 1.16 / Cortex:                                                           |
// | * switched to using PNGs in a subdirectory instead of using BMP.MDLs     |
// | - removed special targeting view images for software HUDs, because       |
// |   ImportImage3D() is not yet available for PNGs                          |
// |                                                                          |
// | 1.15 / Cortex:                                                           |
// | * fixed upper case in "Current Location" and "Currently Viewing"         |
// | + added "Current location" to the hangar screen                          |
// | - removed old "Turret of" display                                        |
// | + added two new "Turret of" displays for the loadout (over the rotating  |
// |   model) and at the upper right for all other screens (including hangar  |
// |   and map, which previously didn't have that information)                |
// | * improved layout of the dialogs= section a little (there's still a lot  |
// |   to do!)                                                                |
// |                                                                          |
// | 1.14 / Cortex:                                                           |
// | * moved the "Turret of ..." text up a little                             |
// |                                                                          |
// | 1.13 / Cortex:                                                           |
// | + incorporated the changes made by YP for R4 (two more status lines at   |
// |   the bottom)                                                            |
// | * moved command bar on the map up a little to make more room for the     |
// |   three lines                                                            |
// |                                                                          |
// | 1.12 / FlingPu:                                                          |
// | + added the normal HUD styles lessHUD and JelloShot                      |
// |                                                                          |
// | 1.11 / Cortex:                                                           |
// | + added the software HUD 'Parci-style'                                   |
// |                                                                          |
// | 1.10 / Cortex:                                                           |
// | * fixed a bug that triggered an assertion (not noticeable in             |
// |   release-builds of the Allegiance client)                               |
// | * the map-mode displays very long names correctly now (text width        |
// |   155->200, moved 20 to the right)                                       |
// | + introduced the two new software HUD modes                              |
// | * the minimap has been moved a bit to be symmetrical with the loadout    |
// |   window                                                                 |
// | * the targeting view has been moved three pixels up for the new software |
// |   HUD mode                                                               |
// | * the main chat is now correctly positioned if set to less than 10 lines |
// |   without scrollbar                                                      |
// | + current ship and current KB are now displayed on the map when in base  |
// |                                                                          |
// | 1.9 / Cortex:                                                            |
// | * scrollbar for main chat display can now optionally be turned off       |
// | - removed speed display for non-moving targets                           |
// | + added experience display for players                                   |
// | * moved map info to the left to make room for long callsigns with exp    |
// |   display                                                                |
// | + base status is now shown on map in base as well                        |
// | + orders are now shown in the hangar and on map in base                  |
// |                                                                          |
// | 1.8 / Cortex:															  |
// | + added speed gauge for current target									  |
// |                                                                          |
// | 1.7 / Cortex:															  |
// | + uses external settings now											  |
// | + reintroduced station status bar for loadout screen and repositioned    |
// |   it in hangar                                                           |
// | + energy, ammo, and fuel gauges are now replaced with endurance gauge    |
// |   when podded                                                            |
// | * the fadeins of the additional map info is now more smooth              |
// | + reintroduced last orders indicator [optional]					  	  |
// | * improved software HUD support										  |
// |                                                                          |
// | 1.6 / Cortex:															  |
// | * Bugfix: the cloak indicator is now shown at the map again              |
// |                                                                          |
// | 1.5 / Cortex:                                                            |
// | * splitted normal chat and loadout screen chat                           |
// | + added scrollbar to chat display										  |
// | + added version information display                                      |
// | * reordered and repositioned all windows                                 |
// | * changed various console mode flags                                     |
// | * various internal refactorings                                          |
// | * various minor changes                                                  |
// | (read section documentation for more information)                        |
// |                                                                          |
// | 1.4 / Cortex:                                                            |
// | * changed the new filenames from version 1.3 to the common naming style  |
// |                                                                          |
// | 1.3 / Ksero:                                                             |
// | * shrunk the command-pane to improve support for low-resolution modes    |
// | * added parameter: NumChatLines                                          |
// |                                                                          |
// | 1.2 / Cortex:                                                            |
// | + Chat has now ten lines instead of five.                                |
// | * Base-status-display in hangar-mode has been moved from the top to the  |
// |   bottom right, to not overlap with the chat.                            |
// | * Autopilot and vector-lock status in flight-mode have been moved and    |
// |   the graphics have been made smaller to not overlap with the chat.      |
// | + Map-mode shows all necessary ship status info in upper left area of    |
// |   the screen. (Autopilot and vector-lock status, name of current target, |
// |   distance to current target, ship type, shield status, hull status,     |
// |   energy status, ammo status, fuel status, current thrust, current       |
// |   speed, current signature, kill bonus.)                                 |
// | + Ripcord time is now displayed in map-mode as well, not only in         |
// |   flight-mode.                                                           |
// |                                                                          |
// | 1.1 / Ksero:                                                             |
// | + added some chat lines                                                  |
// | + added some documentation                                               |
// | + added autopilot status indicator to map-mode                           |
// |                                                                          |
// | 1.0 / original Allegiance developers:                                    |
// | + basic functionality                                                    |
// |                                                                          |
// \**************************************************************************/

use "console";
use "font";
use "teleportpane";
use "teampane";
use "cortui_settings";


White = Color(1, 1, 1);
fp2DarkGrey = Color(.4, .4, .4);
TextColor = Color(0, 0, 0.0625);

mySideColor = GetSideColor(Me, OnEveryFrame);
yellowText = Color(0.878, 0.573, 0);

fp2FontKillBonus = Win32Font("Verdana", 18, true, 0);
fp2FontTargetName = Win32Font("Verdana", 18, true, 0);
fp2FontTargetDesc = Win32Font("Verdana", 15, false, 0);
fp2FontNormal = Win32Font("Verdana", 16, true, 0);

myStationColor = GetSideColor(MyStation, OnEveryFrame);

hudBlendMode = BlendModeAdd;

// Ksero 2005-04-17
// * New images and corresponding *Columns-values

//Zero for the 1st col so we can have something that corresponds to nothing selected

RecipientsColumns    = [53, 106, 159, 212]; 
RecipientsBB = ButtonBarPane(ImportImageFromFile("mods/CortUI/media/cortui_core_recipients.png", true), ButtonNormal, RecipientsColumns, true);

VerbsColumns    = [32, 62, 92, 122, 152, 182, 212, 242, 268];
VerbsBB      = ButtonBarPane(ImportImageFromFile("mods/CortUI/media/cortui_core_verbs.png", true), ButtonNormal, VerbsColumns, false);


WingCombo    = 
   ImageComboPane(ImportImageFromFile("mods/CortUI/media/cortui_core_btnchangewing3.png", true), smallFont);
 

//
//  Mouseover Text for Verbs
//

hoverSite = HoverSite(0);

hoverString =
    SwitchString(
        HoverSiteGetID(hoverSite),
        "",
        [
            ( 1, "Attack"),
            ( 2, "Capture"),
            ( 3, "Defend"),
            ( 4, "Pickup"),
            ( 5, "Goto"),
            ( 6, "Repair"),
            ( 7, "Join"),
            ( 8, "Mine"),
            ( 9, "Build")
        ]
    );

// Ksero 2005-04-17
// * adjusted some sizes and offsets to accomodate the new commandpane

hoverImage = StringImage(JustifyCenter, 126, promptFont, yellowText, hoverString);
hoverPane  = AnimatedImagePaneRect(hoverImage, Rect(0, -13, 126, 0));

commandRadarDetectPane = 
    SwitchPane(
                Detected,
                [
                    (ImagePane(ImportImage("radonbmp", false), []), 0)
                ]
               );

CommandPane = 
    ImagePane(
        ImportImageFromFile("mods/CortUI/media/cortui_core_commandbkgnd.png", false),
        [
            (RecipientsBB, Point(4, 8)),
            (WingCombo, Point(216, 8)),
            (HoverPaneColumns(hoverSite, 1, VerbsBB, VerbsColumns), Point(2, 38)),
            (hoverPane, Point(72, 73))
        ]
    );



ComposingMouse = ImagePane(ImportImage("chatmousebmp", false),
                          [
                            (
                             StringPane(ChatRecipient, mySideColor, Point(66,17)),
                             Point(3, 3)
                            )
                          ]
                         );

ComposingText = ImagePane(ImportImage("chattextbmp", false),
                          [
                            (
//                             StringPane(ChatRecipient, mySideColor, Point(66,17)),
                             StringPane(ChatRecipient, mySideColor, Point(100,17)),
                             Point(3, 3)
                            ),
                            (
                             StringPane(ChatText, mySideColor, Point(154,17), JustifyLeft, smallFont, true),
//                             Point(78, 3)
                             Point(112, 3)

                            )
                          ]
                         );

ComposingCommand = ImagePane(ImportImage("chatcommandbmp", true),
                          [(
                            StringPane(ChatRecipient, mySideColor, Point(66,17)),
                            Point(3, 3)
                           ),
                           (
                            SwitchPane(CommandVerb,
                                       [
                                           (ImagePane(ImportImage("ackillbmp",    true), []), 1),
                                           (ImagePane(ImportImage("accptbmp",     true), []), 2),
                                           (ImagePane(ImportImage("acdefendbmp",  true), []), 3),
                                           (ImagePane(ImportImage("acpickupbmp",  true), []), 4),
                                           (ImagePane(ImportImage("acgotobmp",    true), []), 5),
                                           (ImagePane(ImportImage("acrepairbmp",  true), []), 6),
                                           (ImagePane(ImportImage("acjoinbmp",    true), []), 7),
                                           (ImagePane(ImportImage("acminebmp",    true), []), 8),
                                           (ImagePane(ImportImage("acbuildbmp",   true), []), 9)
                                       ]),
                             Point(78, 2)
                           ),
                           (
                            StringPane(ChatText, mySideColor, Point(128,17), JustifyLeft, smallFont, true),
                            Point(104, 3)
                           )
                          ]);

ComposingShell = ImagePane(ImportImage("chatshellbmp", false),
                          [
                            (
                             StringPane(ChatText, mySideColor, Point(229,17)),
                             Point(3, 3)
                            )
                          ]
                         );

ComposingQuick = ImagePane(ImportImage("chatmousebmp", false),
                          [
                            (
                             StringPane(ChatRecipient, mySideColor, Point(66,17)),
                             Point(3, 3)
                            )
                          ]
                         );

ComposingPane =
    SwitchPane(ComposeState,
               [
                   (ComposingMouse, 1),
                   (ComposingText, 2),
                   (ComposingCommand, 3),
                   (ComposingShell, 4),
                   (ComposingQuick, 5)
               ]);


ChatCompositionImage = PaneImage(ComposingPane, false, true);

///////////////////////////////////////////////////////
//
//            Station Display                        
//
//////////////////////////////////////////////////////

StationPane =
    GroupImage(
        [
            TranslateImage(
                GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), GetPercentShields(MyStation, OnEveryFrame)),
                Point(20, 4)
            ),
            TranslateImage(
                GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), GetPercentHitPoints(MyStation, OnEveryFrame)),
                Point(79, 4)
            ),
            TranslateImage(
                StringImage(
                    JustifyLeft,
                    400,
                    medBoldVerdana,
                    myStationColor,
                    ConcatinatedString(GetName(MyStation, OnEveryFrame), (ConcatinatedString(" in ", GetSectorName(MyStation, OnEveryFrame))))
                ),
                Point(10, 28)			//150, 18
            ),
            ImportImageFromFile("mods/CortUI/media/cortui_core_constationdisplay1.png", false)
            
        ]
    );
        
///////////////////////////////////////////////////////
//
//          Chat History Pane
//
// Ksero 15:28 2005-03-04
// was ChatListPane(Point(370, 68));
// the second parameter to Point is the height of the chat area.
// Should be 8 + 12 * ( number of chat lines)
//
// Cortex 2005-03-20
// * increased ChatListPane-size
// * changed background graphic to my modified one
// * changed point(0,0) to point(0,20) (whatever that means)
//
// Ksero 2005-04-17
// * restructured to use NumChatLines
//
// Cortex 2005#05#05:
// + added changable ChatList for the loadout screen
// * resized ChatListPanes so that scrollbar can be seen
//
//////////////////////////////////////////////////////

chatListPane = ChatListPane(Point(355, Add(8,Multiply(12,NumChatLinesGlobal)) ) );

cortChatListPaneLoadout = ChatListPane(Point(340, Add(8,Multiply(12,NumChatLinesLoadout)) ) );			//370

CommPane =
    ImagePane(
        ImportImageFromFile("mods/CortUI/media/cortui_core_concommdisplay.png", false),
        [
            (chatListPane, Point(0,0))
        ]
    );

cortCommPaneLoadout =
    ImagePane(
        ImportImageFromFile("mods/CortUI/media/cortui_core_concommdisplay.png", false),
        [
            (cortChatListPaneLoadout, Point(0,0))
        ]
    );

//////////////////////////


SectorNameImage = 
    BlendImage(
        StringImage(
            JustifyCenter,
            160,
            medVerdana,
            Color(1, 0, 0),
            SectorName
        ),
        hudBlendMode);

SectorNameInHangarImage = 
    BlendImage(
        StringImage(
            JustifyCenter,
            160,
            medVerdana,
            Color(1, 0, 0),
            GetSectorName(MyStation, OnEveryFrame)
        ),
        hudBlendMode);

LocationImage =
    GroupImage([
        BlendImage(
            StringImage(
                JustifyCenter,
                160,
                promptFont,
                yellowText,
                "Current location:"
            ),
            hudBlendMode),
        TranslateImage(SectorNameImage, Point(0, -14))
    ]);

LocationInHangarImage =
    GroupImage([
        BlendImage(
            StringImage(
                JustifyCenter,
                160,
                promptFont,
                yellowText,
                "Current location:"
            ),
            hudBlendMode),
        TranslateImage(SectorNameInHangarImage, Point(0, -14))
    ]);

PilotNameImage = 
    BlendImage(
        StringImage(
            JustifyCenter,
            160,
            medVerdana,
            Color(1, 0, 0),
            GetName(Me, OnEveryFrame)
        ),
        hudBlendMode);

BigTurretTextImage =
    GroupImage([
        BlendImage(
            StringImage(
                JustifyCenter,
                160,
                promptFont,
                yellowText,
                "Turret of:"
            ),
            hudBlendMode),
        TranslateImage(PilotNameImage, Point(0, -14))
    ]);

TurretOfImage =
    SwitchImage(
        BoardState,
        emptyImage,
        [
            (2, BigTurretTextImage)
        ]
    );

InTurretPaneImage =
    PaneImage(
        SwitchPane(
            BoardState,
            [
                (ImagePane(ImportImage ("hangarinturretbmp", false), []), 2)
            ]
        ),
        false,
        true
    );
        

AcceptedOrderImage = 
    GroupImage([
        TranslateImage(
            BlendImage(
                ImportImage3D("comacceptbmp", yellowText, true),
                hudBlendMode),
            Point(-16, -13)),
        BlendImage(        
            StringImage(
                JustifyLeft,
                160,
                promptFont,
                yellowText,
                AcceptedOrder
            ),
        hudBlendMode)
    ]);

QueuedOrderImage = 
    GroupImage([
        TranslateImage(
            BlendImage(
                ImportImage3D("comqueuedbmp", Color(1, 0, 0), true),
                hudBlendMode),
            Point(-16, -13)),
        BlendImage(
            StringImage(
                JustifyLeft,
                160,
                medVerdana,
                Color(1, 0, 0),
                QueuedOrder
            ),
        hudBlendMode)
    ]);


SectorInfoPaneX = SectorInfoPane([]);
SectorOverviewFlag = 33536;
SectorPane = SectorMapPane(SectorInfoPaneX, OverlayFlags, SectorOverviewFlag, []);

SectorImage =
    PaneImage(
        BlackPane(
            AnimatedImagePane(
                GroupImage([
                    TranslateImage(
                        SectorPane, 
                        Point(9, 20)
                    ),
                    SectorInfoPaneX
                ])
            )
        ),
        false, 
        true
    );

////////////////////////////////////////////////
//
//          Investments Pane
//
///////////////////////////////////////////////

InvestmentsInfoPane = PartInfoPane();
InvestmentsPane = PurchasesPane(InvestmentsInfoPane);

moneyPane = ImagePane(ImportImage("creditboxbmp", false),
                          [ 
                            (
                                StringPane( ConcatinatedString(NumberString(Money)," cr"), 
                                            White, 
                                            Point(90, 13), 
                                            JustifyCenter, 
                                            smallFont, 
                                            true),
                                Point(58, 0)
                            ),
                            (
                                StringPane("CURRENT CREDITS", 
                                            White, 
                                            Point(160, 13), 
                                            JustifyCenter, 
                                            smallBoldFont, 
                                            true),
                                Point(31, 13)
                            ),
                            (
                                StringPane( "", 
                                            White, 
                                            Point(100, 13), 
                                            JustifyCenter, 
                                            smallFont, 
                                            true),
                                Point(43, 26)
                            )
                          ]
                         );


////////////////////////////////////////////////




EjectPodDisplayOn = ImagePane(ImportImage("conejectpoddisplaybmp", false), 
		[
            (
                GaugePane( 
                    ImportImage("softgaugebmp", true),
                    GetEndurance(Me, OnEveryFrame), 
                    Color(0, 0, 0.04),
                    Color(0, 0, 0.04)
                ),
                Point(66,30)
            )
		]
	);

EjectPodPane =
    SwitchPane(
        IsEjectPod(Me, OnEveryFrame),
        [
            (EjectPodDisplayOn,1)
        ]
    );

DeathBannerPane =
    SwitchPane(
        IsGhost,
        [
            (ImagePane(ImportImage("deathbannerbmp", false), []), 1)
        ]
    );

TipTextImage =
    StringImage(
        JustifyCenter,
        600, 
        medBoldVerdana, 
        mySideColor, 
        TipText
    );

//
// yp - Your_Persona Bug10 (3 lines for status text) patch Aug-2-2006
// start
TipTextImage1 =
    StringImage(
        JustifyCenter,
        600, 
        medVerdana, 
        Color(.7, .5, .5), 
        TipText1
    );
    
TipTextImage2 =
    StringImage(
        JustifyCenter,
        600, 
        smVerdana, 
        Color(.7, .4, .4), 
        TipText2
    );
//
// yp - Your_Persona Bug10 (3 lines for status text) patch
// end

CriticalTip0Image =
    StringImage(
        JustifyCenter,
        620, 
        medBoldVerdana, 
        Color(1, 0, 0), 
        CriticalTipText0
    );
CriticalTip1Image =
    StringImage(
        JustifyCenter,
        620, 
        medBoldVerdana, 
        Color(1, 0, 0), 
        CriticalTipText1
    );
CriticalTip2Image =
    StringImage(
        JustifyCenter,
        620, 
        medBoldVerdana, 
        Color(1, 0, 0), 
        CriticalTipText2
    );
CriticalTip3Image =
    StringImage(
        JustifyCenter,
        620, 
        medBoldVerdana, 
        Color(1, 0, 0), 
        CriticalTipText3
    );

CriticalTipImage =
    GroupImage([
        CriticalTip0Image,
        TranslateImage(CriticalTip1Image, Point(0, 14)),
        TranslateImage(CriticalTip2Image, Point(0, 28)),
        TranslateImage(CriticalTip3Image, Point(0, 42))
    ]);

LoadoutCriticalTipImage =
    GroupImage([
        CriticalTip0Image,
        TranslateImage(CriticalTip1Image, Point(0, 14))
    ]);

ObserverTextImage =
    StringImage(
        JustifyCenter,
        600, 
        medVerdana, 
        mySideColor,
        ConcatinatedString("Observer of ", GetName(Me, OnEveryFrame))
    );

TurretTextImage =
    StringImage(
        JustifyCenter,
        600, 
        medVerdana, 
        mySideColor, 
        ConcatinatedString("Turret of ", GetName(Me, OnEveryFrame))
    );

BoardTextImage =
    SwitchImage(
        BoardState,
        emptyImage,
        [
            (1, ObserverTextImage),
            (2, TurretTextImage)
        ]
    );

VoteTextImage =
    StringImage(
        JustifyCenter,
        620, 
        medBoldVerdana, 
        Color(1, 1, 1), 
        CurrentVote
    );

backButtonPane = 
    SoundButtonPane(
        ImportImage("btnbackbmp", true), 
        ButtonNormal, 
        false, 
        negativeButtonClickSoundId
    );




//////////////////////////////////////////////////////////////////////////////
//
// NEW AUTOPILOT- AND VECTORLOCK-INDICATORS
//
// Cortex 2005-04-17:
// + added imports for the new icons
// (created a new block because they are used in the normal
//  HUD and the map-mode)
//
//////////////////////////////////////////////////////////////////////////////

cortVectorLockNormal = ImportImageFromFile("mods/CortUI/media/cortui_core_convectorlock.png", true);

cortVectorLockOn = 
    SwitchImage(
        GetVectorLock(Me, OnEveryFrame),
        emptyImage,
        [
            (1, cortVectorLockNormal)
        ]
    );

cortAutopilotNormal = ImportImageFromFile("mods/CortUI/media/cortui_core_conautopilot.png", true);

cortAutopilotOnImage =
    SwitchImage(
        AutopilotOn,
        emptyImage, 
        [
            (1, cortAutopilotNormal)
        ]
    );




//////////////////////////////////////////////////////////////////////////////
//
// Normal Center Hud
//
//////////////////////////////////////////////////////////////////////////////



thrustGaugeBack = 
    BlendImage(
        GaugeImageRect(
            JustifyTop,
            ImportImage("thrustgaugebmp", true),
            Rect(15, 10, 110, 118),
            true,
            1
        ),
        hudBlendMode
    );


thrustGauge =
        BlendImage(
            GaugeImageRect(
                JustifyTop,
                ImportImage("thrustgauge2bmp", true),
                Rect(15, 10, 110, 118),
                true,
                playerThrottle
            ),
            hudBlendMode
        );

thrustSpine = 
    BlendImage(
        ImportImage3D("thrustspinebmp", white, true),
        hudBlendMode
    );
    
thrustString = 
    BlendImage(
        StringImage(
                JustifyRight,
                100,
                smVerdana,
                hudColor,
                "THRUST"
        ),
        hudBlendMode
    );

ThrustImage = 
GroupImage(
    [
        TranslateImage(thrustGaugeBack, Point(15, 10)),
        TranslateImage(thrustGauge, Point(15, 10)),
        TranslateImage(thrustSpine, Point(4, 2)),
        TranslateImage(thrustString, Point(16, 135))
    ]
);

fuelGaugeBack = 
   BlendImage(
        GaugeImageRect(
            JustifyTop,
            ImportImage("fuelgaugebmp", true),
            Rect(17, 10, 113, 118),
            true,
            1
        ),
        hudBlendMode
    );              

fuelGauge = 
       BlendImage(
            GaugeImageRect(
                JustifyTop,
                ImportImage("fuelgauge2bmp", true),
                Rect(17, 10, 113, 118),
                true,
                GetFuel(Me, OnEveryFrame)
            ),
            hudBlendMode
        );

fuelSpine = 
    BlendImage(
        ImportImage3D("fuelspinebmp", white, true),
        hudBlendMode
    );

fuelString = 
    BlendImage(
        StringImage(
                JustifyLeft,
                100,
               smVerdana,
                hudColor,
                "FUEL"
        ),
        hudBlendMode
    );

FuelImage = 
GroupImage(
    [
        TranslateImage(fuelGaugeBack, Point(17, 10)),
        TranslateImage(fuelGauge, Point(17, 10)),
        TranslateImage(fuelSpine, Point(-4, 2)),
        TranslateImage(fuelString, Point(23, 135))
    ]
);

ammoGaugeBack =
    BlendImage(
        GaugeImageRect(
            JustifyTop,
            ImportImage("ammogaugebmp", true),
            Rect(29, 18, 98, 110),
            true,
            1
        ),
        hudBlendMode
    );

ammoGauge =
        BlendImage(
            GaugeImageRect(
                JustifyBottom,
                ImportImage("ammogauge2bmp", true),
                Rect(29, 18, 98, 110),
                true,
                GetAmmo(Me, OnEveryFrame)
                
            ),
            hudBlendMode
        );

ammoSpine = 
    BlendImage(
        ImportImage3D("ammospinebmp", white, true),
        hudBlendMode
    );

ammoString = 
    BlendImage(
        StringImage(
                JustifyRight,
                100,
                smVerdana,
                hudColor,
                "AMMO"
        ),
        hudBlendMode
    );

AmmoImage = 
GroupImage(
    [
        TranslateImage(ammoGaugeBack, Point(29, 18)),
        TranslateImage(ammoGauge, Point(29, 18)),
        TranslateImage(ammoSpine, Point(5, -4)),
        TranslateImage(ammoString, Point(0, 3))
    ]
);

energyGaugeBack = 
     BlendImage(
        GaugeImageRect(
            JustifyTop,
            ImportImage("energygaugebmp", true),
            Rect(30, 18, 99, 110),
            true,
            1
        ),
        hudBlendMode
    );

energyGauge = 
        BlendImage(
            GaugeImageRect(
                JustifyBottom,
                ImportImage("energygauge2bmp", true),
                Rect(30, 18, 99, 110),
                true,
                GetPercentEnergy(Me, OnEveryFrame)
            ),
            hudBlendMode
        );
        

energySpine = 
    BlendImage(
        ImportImage3D("energyspinebmp", white, true),
        hudBlendMode
    ); 

energyString = 
    BlendImage(
        StringImage(
                JustifyLeft,
                100,
                smVerdana,
                hudColor,
                "ENERGY"
        ),
        hudBlendMode
    );
    
EnergyImage = 
GroupImage(
    [
        TranslateImage(energyGaugeBack, Point(30, 18)),
        TranslateImage(energyGauge, Point(30, 18)),
        TranslateImage(energySpine, Point(-5, -4)),
        TranslateImage(energyString, Point(24, 3))
    ]
);      

CenterHudLeft =
    BlendImage(
        ImportImage3D("centerhudleftbmp", white, true),
        hudBlendMode
    );

armorString = 
    BlendImage(
        StringImage(
                JustifyLeft,
                100,
                smVerdana,
                hudColor,
                "ARMOR"
        ),
        hudBlendMode
    );      



HullGreen =
        BlendImage(     
            GaugeImageRect(         
                JustifyBottom,
                ImportImage("hullgaugebmp", true),
                Rect(40, 23, 88, 105),
                true,
                GetPercentHitPoints(Me, OnEveryFrame)
            ),
            hudBlendMode
        );
     

HullRed =
    BlendImage( 
        GaugeImageRect(         
            JustifyBottom,
            ImportImage("hullgaugeredbmp", true),
            Rect(40, 23, 88, 105),
            true,
            GetPercentHitPoints(Me, OnEveryFrame)
        ),
        hudBlendMode
    );

hullGauge = 
    SwitchImage(
        Flash,
        HullGreen,
        [
            (0, HullGreen),
            (1, HullRed)
        ]
    );

hullGaugeBack = 
    BlendImage(
        ImportImage3D("hullgauge2bmp", hudColorshadows, true),
        hudBlendMode
    );

ArmorImage = 
GroupImage(
    [
        CenterHudLeft,
        TranslateImage(armorString, Point(-10, 63)),
        TranslateImage(hullGaugeBack, Point(-13, 4)),
        TranslateImage(hullGauge, Point(27, 27))
    ]
);

    
CenterHudRight =
    BlendImage(
        ImportImage3D("centerhudrightbmp", white, true),
        hudBlendMode
    );
    
shieldString = 
    BlendImage(
        StringImage(
                JustifyRight,
                100,
                smVerdana,
                hudColor,
                "SHIELD"
        ),
        hudBlendMode
    );      

ShieldGreen =   
        BlendImage(
            GaugeImageRect(
                JustifyBottom,
                ImportImage("shieldgaugebmp", true),
                Rect(40, 23, 88, 105),
                true,
                GetPercentShields(Me, OnEveryFrame)
            ),
            hudBlendMode
    );

ShieldRed =
    BlendImage( 
        GaugeImageRect(
            JustifyBottom,
            ImportImage("shieldgaugeredbmp", true),
            Rect(40, 23, 88, 105),
            true,
            GetPercentShields(Me, OnEveryFrame)
        ),
        hudBlendMode
    );


shieldGauge =
    SwitchImage(
        Flash,
        ShieldGreen,
        [
            (0, ShieldGreen),
            (1, ShieldRed)
        ]
    );

shieldGaugeBack = 
    BlendImage(
        ImportImage3D("shieldgauge2bmp", hudColorshadows, true),
        hudBlendMode
    );

    
ShieldImage = 
GroupImage(
    [
        CenterHudRight,
        TranslateImage(shieldString, Point(40, 63)),
        TranslateImage(shieldGaugeBack, Point(12, 5)),
        TranslateImage(shieldGauge, Point(52, 28))
    ]
);

RadOff = 
    ImagePane(ImportImage("radoffbmp", false), []);

RadOn = 
    ImagePane(ImportImage("radonbmp", false), []);


RadarDetectPane = 
    SwitchPane(
                Detected,
                [

                    (RadOn, 0)
                ]
               );

SpeedImage = 
    
        StringImage(
                    JustifyCenter,
                    80,
                    lgBoldVerdana,
                    hudColor,
                    ConcatinatedString(NumberString(GetSpeed(Me, OnEveryFrame)), " mps")
);

ExperienceImage = 
    GroupImage([
        TranslateImage(StringImage(
                    JustifyCenter,
                    80,
                    medBoldVerdana,
                    Color(0, 0, 0),
                    NumberString(Experience)), Point(0, 5)),
        TranslateImage(
            BlendImage(ImportImage3D("killcounterbmp", white, true),  hudBlendMode), Point(-23, -65))
        ]);

ArtifactImage   = 
        BlendImage(ImportImage3D("captureflaglbmp", white, true), hudBlendMode);
 

Artifact =
    SwitchImage(
        GotArtifact,
        emptyImage,
        [
            (1, ArtifactImage)
        ]
    );

CaptureFlagImage =
        BlendImage(
                ImportImage3D("captureflagrbmp", white, true), hudBlendMode);


CaptureFlag = 
    SwitchImage(
        GotFlag,
        emptyImage,
        [
            (1, CaptureFlagImage)
        ]
    );

VectorLockNormal = ImportImage("convectorlockbmp", true);

VectorLockOn = 
    SwitchImage(
        GetVectorLock(Me, OnEveryFrame),
        emptyImage,
        [
            (1, VectorLockNormal)
        ]
    );

AutopilotNormal = ImportImage("conautopilotbmp", true);

AutopilotOnImage =
    SwitchImage(
        AutopilotOn,
        emptyImage, 
        [
            (1, AutopilotNormal)
        ]
    );

CloakNormal = ImportImage("concloakbmp", true);

CloakOn = 
    SwitchImage(
        IsCloaked(Me, OnEveryFrame),
        emptyImage,
        [
            (1, CloakNormal)
        ]
    );

SignatureImage = 
    StringImage(
        JustifyCenter,
        80,
        medVerdana,
        hudColor,
        ConcatinatedString(ConcatinatedString("SIG: ", NumberString(Signature)), "%")
        );
    

// Cortex 2005-04-17
// * changed autopilot- and vector-lock-icons to the smaller ones
// * changed their position

DefaultCenterHudOn = 
        GroupImage(
        [   
            TranslateImage(cortVectorLockOn, Point(442, 337)),							// (230, 287)
            TranslateImage(cortAutopilotOnImage, Point(177, 342)),						// (277, 377)
            TranslateImage(CloakOn, Point(120, 80)),
            TranslateImage(ArmorImage, Point(215, 180)),
            TranslateImage(ShieldImage, Point(300, 180)),
            TranslateImage(ThrustImage, Point(161, 246)),
            TranslateImage(FuelImage, Point(361, 246)),
            TranslateImage(AmmoImage, Point(147, 105)),
            TranslateImage(EnergyImage, Point(372, 105)),
            TranslateImage(SpeedImage, Point(281, 152)),
            TranslateImage(ExperienceImage, Point(281, 102)),
            TranslateImage(PaneImage(RadarDetectPane, false, true), Point(390, 55)),
            TranslateImage(CaptureFlag, Point(427, 350)),
            TranslateImage(Artifact, Point(159, 350)),
            TranslateImage(SignatureImage, Point(281, 133))
        ]
    );

//////////////////////////////////////////////////////////////////////////////
//
// lessHUD Center
//
//////////////////////////////////////////////////////////////////////////////

fpVectorLockNormal = ImportImageFromFile("mods/CortUI/media/cortui_fp1_con_vector_lock.png", true);

fpVectorLockOn = 
    SwitchImage(
        GetVectorLock(Me, OnEveryFrame),
		emptyImage,
        [
            (1, fpVectorLockNormal)
        ]
    );

fpAutopilotNormal = ImportImageFromFile("mods/CortUI/media/cortui_fp1_con_auto_pilot.png", true);

fpAutopilotOnImage =
    SwitchImage(
        AutopilotOn,
		emptyImage, 
        [
            (1, fpAutopilotNormal)
        ]
    );

fpThrustGaugeBack = 
    BlendImage(
        GaugeImageRect(
            JustifyRight,
            ImportImageFromFile("mods/CortUI/media/cortui_fp1_thrust_gauge.png", true),
            Rect(0, 0, 83, 36),
            true,
            1
        ),
        hudBlendMode
    );

fpThrustGauge =
	BlendImage(
		GaugeImageRect(
			JustifyRight,
			ImportImageFromFile("mods/CortUI/media/cortui_fp1_thrust_gauge2.png", true),
			Rect(0, 0, 83, 36),
			true,
			playerThrottle
		),
		hudBlendMode
	);

fpThrustImage = 
	GroupImage(
	    [
	        TranslateImage(fpThrustGaugeBack, Point(0, 0)),
	        TranslateImage(fpThrustGauge, Point(0, 0))
	    ]
	);

fpFuelGaugeBack = 
   BlendImage(
        GaugeImageRect(
            JustifyLeft,
            ImportImageFromFile("mods/CortUI/media/cortui_fp1_fuel_gauge.png", true),
            Rect(0, 0, 83, 36),
            true,
            1
        ),
        hudBlendMode
    );              

fpFuelGauge = 
   BlendImage(
		GaugeImageRect(
			JustifyLeft,
			ImportImageFromFile("mods/CortUI/media/cortui_fp1_fuel_gauge2.png", true),
			Rect(0, 0, 83, 36),
			true,
			GetFuel(Me, OnEveryFrame)
		),
		hudBlendMode
	);

fpFuelImage = 
	GroupImage(
	    [
	        TranslateImage(fpFuelGaugeBack, Point(0, 0)),
	        TranslateImage(fpFuelGauge, Point(0, 0))
	    ]
	);

fpAmmoGaugeBack =
    BlendImage(
        GaugeImageRect(
            JustifyRight,
            ImportImageFromFile("mods/CortUI/media/cortui_fp1_ammo_gauge.png", true),
            Rect(0, 0, 83, 36),
            true,
            1
        ),
        hudBlendMode
    );

fpAmmoGauge =
	BlendImage(
		GaugeImageRect(
			JustifyRight,
			ImportImageFromFile("mods/CortUI/media/cortui_fp1_ammo_gauge2.png", true),
			Rect(0, 0, 83, 36),
			true,
			GetAmmo(Me, OnEveryFrame)
			
		),
		hudBlendMode
	);

fpAmmoImage = 
	GroupImage(
	    [
	        TranslateImage(fpAmmoGaugeBack, Point(0, 0)),
	        TranslateImage(fpAmmoGauge, Point(0, 0))
	    ]
	);

fpEnergyGaugeBack = 
     BlendImage(
        GaugeImageRect(
            JustifyLeft,
            ImportImageFromFile("mods/CortUI/media/cortui_fp1_energy_gauge.png", true),
            Rect(0, 0, 83, 36),
            true,
            1
        ),
        hudBlendMode
    );

fpEnergyGauge = 
	BlendImage(
		GaugeImageRect(
			JustifyLeft,
			ImportImageFromFile("mods/CortUI/media/cortui_fp1_energy_gauge2.png", true),
			Rect(0, 0, 83, 36),
			true,
			GetPercentEnergy(Me, OnEveryFrame)
		),
		hudBlendMode
	);

fpEnergyImage = 
	GroupImage(
	    [
	        TranslateImage(fpEnergyGaugeBack, Point(0, 0)),
	        TranslateImage(fpEnergyGauge, Point(0, 0))
	    ]
	);      

fpHullGreen =
        BlendImage(     
            GaugeImageRect(         
                JustifyBottom,
                ImportImageFromFile("mods/CortUI/media/cortui_fp1_hull_gauge.png", true),
				Rect(0, 0, 36, 174),
                true,
                GetPercentHitPoints(Me, OnEveryFrame)
            ),
            hudBlendMode
        );
     

fpHullRed =
    BlendImage( 
        GaugeImageRect(         
            JustifyBottom,
            ImportImageFromFile("mods/CortUI/media/cortui_fp1_hull_gauge_red.png", true),
            Rect(0, 0, 36, 174),
            true,
            GetPercentHitPoints(Me, OnEveryFrame)
        ),
        hudBlendMode
    );

fpHullGauge = 
    SwitchImage(
        Flash,
        fpHullGreen,
        [
            (0, fpHullGreen),
            (1, fpHullRed)
        ]
    );

fpHullGaugeBack = 
    BlendImage(
        ImportImageFromFile("mods/CortUI/media/cortui_fp1_hull_gauge2.png", true),
        hudBlendMode
    );

fpArmorImage = 
	GroupImage(
	    [
	        TranslateImage(fpHullGaugeBack, Point(0, 0)),
	        TranslateImage(fpHullGauge, Point(0, 0))
	    ]
	);

fpShieldGreen =   
        BlendImage(
            GaugeImageRect(
                JustifyBottom,
                ImportImageFromFile("mods/CortUI/media/cortui_fp1_shield_gauge.png", true),
                Rect(0, 0, 36, 174),
                true,
                GetPercentShields(Me, OnEveryFrame)
            ),
            hudBlendMode
    );

fpShieldRed =
    BlendImage( 
        GaugeImageRect(
            JustifyBottom,
            ImportImageFromFile("mods/CortUI/media/cortui_fp1_shield_gauge_red.png", true),
			Rect(0, 0, 36, 174),
            true,
            GetPercentShields(Me, OnEveryFrame)
        ),
        hudBlendMode
    );

fpShieldGauge =
    SwitchImage(
        Flash,
        fpShieldGreen,
        [
            (0, fpShieldGreen),
            (1, fpShieldRed)
        ]
    );

fpShieldGaugeBack = 
    BlendImage(
        ImportImageFromFile("mods/CortUI/media/cortui_fp1_shield_gauge2.png", true),
        hudBlendMode
    );

fpShieldImage = 
	GroupImage(
	    [
	        TranslateImage(fpShieldGaugeBack, Point(0, 0)),
	        TranslateImage(fpShieldGauge, Point(0, 0))
	    ]
	);

fpRadOn = 
    ImagePane(ImportImageFromFile("mods/CortUI/media/cortui_fp1_rad_on.png", false), []);
// fpRadOff = 
    // ImagePane(ImportImageFromFile("mods/CortUI/media/cortui_fp1_rad_on.png", false), []);

fpRadarDetectPane = 
    SwitchPane(
                Detected,
                [
                    (fpRadOn, 0)
                    // (fpRadOff, 1)
                ]
               );

fpExperienceImage = 
    GroupImage([
        TranslateImage(StringImage(
                    JustifyCenter,
                    80,
                    medBoldVerdana,
                    hudColor,
                    NumberString(Experience)), Point(0, 5)),
                    emptyImage
        ]);

fpArtifactImage   = 
        BlendImage(ImportImage3D("captureflaglbmp", white, true), hudBlendMode);

fpArtifact =
    SwitchImage(
        GotArtifact,
        emptyImage,
        [
            (1, fpArtifactImage)
        ]
    );

fpCaptureFlagImage =
        BlendImage(
                ImportImage3D("captureflagrbmp", white, true), hudBlendMode);

fpCaptureFlag = 
    SwitchImage(
        GotFlag,
        emptyImage,
        [
            (1, fpCaptureFlagImage)
        ]
    );

fpCloakNormal = ImportImageFromFile("mods/CortUI/media/cortui_fp1_con_cloak.png", true);

fpCloakOn = 
    SwitchImage(
        IsCloaked(Me, OnEveryFrame),
        emptyImage,
        [
            (1, fpCloakNormal)
        ]
    );

fpCenterHudOn = GroupImage([
	TranslateImage(fpVectorLockOn, Point(415, 335)),
	TranslateImage(fpAutopilotOnImage, Point(202, 335)),
	TranslateImage(fpCloakOn, Point(202, 122)),
	TranslateImage(fpArmorImage, Point(169, 153)),
	TranslateImage(fpShieldImage, Point(435, 153)),
	TranslateImage(fpThrustImage, Point(233, 355)),
	TranslateImage(fpFuelImage, Point(324, 355)),
	TranslateImage(fpAmmoImage, Point(233, 89)),
	TranslateImage(fpEnergyImage, Point(324, 89)),
	TranslateImage(SpeedImage, Point(281, 152)),
	TranslateImage(fpExperienceImage, Point(281, 105)),
	TranslateImage(PaneImage(fpRadarDetectPane, false, true), Point(415, 122)),
	TranslateImage(fpCaptureFlag, Point(429, 349)),
	TranslateImage(fpArtifact, Point(147, 349)),
	TranslateImage(SignatureImage, Point(281, 133))
]);


//////////////////////////////////////////////////////////////////////////////
//
// JelloShot Center
//
//////////////////////////////////////////////////////////////////////////////

fp2ShieldGauge = BlendImage(
	GaugeImageRect(
		JustifyBottom,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_shield_gauge.png", true),
		Rect(5, 2, 252, 225),
		true,
		GetPercentShields(Me, OnEveryFrame)
	),
	hudBlendMode
);

fp2ShieldGaugeBack = BlendImage(
	GaugeImageRect(
		JustifyTop,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_shield_gauge_back.png", true),
		Rect(5, 2, 252, 225),
		true,
		Subtract(1, GetPercentShields(Me, OnEveryFrame))
	),
	hudBlendMode
);

fp2ShieldImage = GroupImage([
        TranslateImage(fp2ShieldGaugeBack, Point(5, 2)),
        TranslateImage(fp2ShieldGauge, Point(5, 2))
]);

fp2HullGauge = BlendImage(     
	GaugeImageRect(         
		JustifyBottom,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_hull_gauge.png", true),
		Rect(5, 29, 252, 252),
		true,
		GetPercentHitPoints(Me, OnEveryFrame)
	),
	hudBlendMode
);
     

fp2HullGaugeBack = BlendImage( 
	GaugeImageRect(         
		JustifyTop,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_hull_gauge_back.png", true),
		Rect(5, 29, 252, 252),
		true,
		Subtract(1, GetPercentHitPoints(Me, OnEveryFrame))
	),
	hudBlendMode
);

fp2HullImage = GroupImage([
        TranslateImage(fp2HullGaugeBack, Point(5, 29)),
        TranslateImage(fp2HullGauge, Point(5, 29))
]);

fp2ThrustGaugeBack = BlendImage(
	GaugeImageRect(
		JustifyLeft,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_thrust_gauge_back.png", true),
		Rect(10, 48, 254, 246),
		true,
		Subtract(1, playerThrottle)
	),
	hudBlendMode
);

fp2ThrustGauge = BlendImage(
	GaugeImageRect(
		JustifyRight,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_thrust_gauge.png", true),
		Rect(10, 48, 254, 246),
		true,
		playerThrottle
	),
	hudBlendMode
);

fp2ThrustImage = 
GroupImage(
    [
        TranslateImage(fp2ThrustGaugeBack, Point(10, 48)),
        TranslateImage(fp2ThrustGauge, Point(10, 48))
    ]
);

fp2FuelGaugeBack = BlendImage(
	GaugeImageRect(
		JustifyRight,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_fuel_gauge_back.png", true),
		Rect(2, 48, 246, 246),
		true,
		Subtract(1, GetFuel(Me, OnEveryFrame))
	),
	hudBlendMode
);              

fp2FuelGauge = BlendImage(
	GaugeImageRect(
		JustifyLeft,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_fuel_gauge.png", true),
		Rect(2, 48, 246, 246),
		true,
		GetFuel(Me, OnEveryFrame)
	),
	hudBlendMode
);

fp2FuelImage = GroupImage([
	TranslateImage(fp2FuelGaugeBack, Point(2, 48)),
	TranslateImage(fp2FuelGauge, Point(2, 48))
]);

fp2AmmoGaugeBack = BlendImage(
	GaugeImageRect(
		JustifyLeft,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_ammo_gauge_back.png", true),
		Rect(10, 10, 254, 208),
		true,
		Subtract(1, GetAmmo(Me, OnEveryFrame))
	),
	hudBlendMode
);

fp2AmmoGauge = BlendImage(
	GaugeImageRect(
		JustifyRight,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_ammo_gauge.png", true),
		Rect(10, 10, 254, 208),
		true,
		GetAmmo(Me, OnEveryFrame)
		
	),
	hudBlendMode
);

fp2AmmoImage = GroupImage([
        TranslateImage(fp2AmmoGaugeBack, Point(10, 10)),
        TranslateImage(fp2AmmoGauge, Point(10, 10))
]);

fp2EnergyGaugeBack = BlendImage(
	GaugeImageRect(
		JustifyRight,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_energy_gauge_back.png", true),
		Rect(2, 10, 246, 208),
		true,
		Subtract(1, GetPercentEnergy(Me, OnEveryFrame))
	),
	hudBlendMode
);

fp2EnergyGauge = BlendImage(
	GaugeImageRect(
		JustifyLeft,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_energy_gauge.png", true),
		Rect(2, 10, 246, 208),
		true,
		GetPercentEnergy(Me, OnEveryFrame)
	),
	hudBlendMode
);

fp2EnergyImage = GroupImage([
	TranslateImage(fp2EnergyGaugeBack, Point(2, 10)),
	TranslateImage(fp2EnergyGauge, Point(2, 10))
]);      

fp2AutopilotOn = BlendImage(
	ImportImageFromFile("mods/CortUI/media/cortui_fp2_autopilot_on.png", true),
	hudBlendMode
);

fp2Autopilot = SwitchImage(
	AutopilotOn,
	emptyImage, 
	[
		(1, fp2AutopilotOn)
	]
);

fp2CloakOn = BlendImage(
	ImportImageFromFile("mods/CortUI/media/cortui_fp2_cloak_on.png", true),
	hudBlendMode
);

fp2Cloak = SwitchImage(
	IsCloaked(Me, OnEveryFrame),
	emptyImage,
	[
		(1, fp2CloakOn)
	]
);

fp2VectorLockOn = BlendImage(
	ImportImageFromFile("mods/CortUI/media/cortui_fp2_vector_lock_on.png", true),
	hudBlendMode
);

fp2VectorLock = SwitchImage(
	GetVectorLock(Me, OnEveryFrame),
	emptyImage,
	[
		(1, fp2VectorLockOn)
	]
);

fp2EyeOn = BlendImage(
	ImportImageFromFile("mods/CortUI/media/cortui_fp2_eye_on.png", true),
	hudBlendMode
);

fp2Eye = SwitchImage(
	Detected,
	fp2EyeOn,
	[
		(1, emptyImage)
	]
);

fp2DamageOn1 = BlendImage(
	ImportImageFromFile("mods/CortUI/media/cortui_fp2_damage1.png", true),
	hudBlendMode
);
fp2DamageOn2 = BlendImage(
	ImportImageFromFile("mods/CortUI/media/cortui_fp2_damage2.png", true),
	hudBlendMode
);
fp2DamageOn3 = BlendImage(
	ImportImageFromFile("mods/CortUI/media/cortui_fp2_damage3.png", true),
	hudBlendMode
);
fp2DamageOn4 = BlendImage(
	ImportImageFromFile("mods/CortUI/media/cortui_fp2_damage4.png", true),
	hudBlendMode
);

fp2DamageOn = GroupImage([
        TranslateImage(fp2DamageOn1, Point(10, 292)),
        TranslateImage(fp2DamageOn2, Point(566, 292)),
        TranslateImage(fp2DamageOn3, Point(10, 124)),
        TranslateImage(fp2DamageOn4, Point(566, 124))
]);

fp2Damage = SwitchImage(
	Flash,
	emptyImage,
	[
		(1, fp2DamageOn)
	]
);

fp2Speed = StringImage(
	JustifyRight,
	80,
	fp2FontNormal,
	hudColor,
	NumberString(GetSpeed(Me, OnEveryFrame))
);

fp2Experience = StringImage(
	JustifyRight,
	80,
	fp2FontKillBonus,
	hudColor,
	NumberString(Experience)
);

fp2NeutralExperience = StringImage(
	JustifyCenter,
	80,
	fp2FontKillBonus,
	fp2DarkGrey,
	":KB:"
);

fp2MiscText = ImportImageFromFile("mods/CortUI/media/cortui_fp2_misc_text.png", true);

fp2NeutralSignature = StringImage(
	JustifyCenter,
	20,
	fp2FontNormal,
	fp2DarkGrey,
	"%"
);

fp2NeutralSpeed = StringImage(
	JustifyCenter,
	80,
	fp2FontNormal,
	fp2DarkGrey,
	":mps:"
);

fp2Signature = StringImage(
	JustifyRight,
	80,
	fp2FontNormal,
	hudColor,
	NumberString(Signature)
);

//////////////////////////////////////////////////////////////////////////////
//
// JelloShot Target
//
//////////////////////////////////////////////////////////////////////////////

fp2TargetShieldGauge = BlendImage(
	GaugeImageRect(
		JustifyBottom,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_target_shield_gauge.png", true),
		Rect(4, 2, 251, 225),
		true,
		GetPercentShields(Target, OnEveryFrame)
	),
	hudBlendMode
);

fp2TargetShieldGaugeBack = BlendImage(
	GaugeImageRect(
		JustifyTop,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_target_shield_gauge_back.png", true),
		Rect(4, 2, 251, 225),
		true,
		Subtract(1, GetPercentShields(Target, OnEveryFrame))
	),
	hudBlendMode
);

fp2TargetShieldImage = GroupImage([
        TranslateImage(fp2TargetShieldGaugeBack, Point(4, 2)),
        TranslateImage(fp2TargetShieldGauge, Point(4, 2))
]);

fp2TargetHullGauge = BlendImage(
	GaugeImageRect(
		JustifyBottom,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_target_hull_gauge.png", true),
		Rect(4, 29, 251, 252),
		true,
		GetPercentHitPoints(Target, OnEveryFrame)
	),
	hudBlendMode
);

fp2TargetHullGaugeBack = BlendImage(
	GaugeImageRect(
		JustifyTop,
		ImportImageFromFile("mods/CortUI/media/cortui_fp2_target_hull_gauge_back.png", true),
		Rect(4, 29, 251, 252),
		true,
		Subtract(1, GetPercentHitPoints(Target, OnEveryFrame))
	),
	hudBlendMode
);

fp2TargetHullImage = GroupImage([
        TranslateImage(fp2TargetHullGaugeBack, Point(4, 29)),
        TranslateImage(fp2TargetHullGauge, Point(4, 29))
]);

fp2TargetOvalColor = BlendImage(
	ImportImageFromFile("mods/CortUI/media/cortui_fp2_target_oval_color.png", true),
	hudBlendMode
);

fp2TargetExperience = StringImage(
	JustifyLeft,
	80,
	fp2FontKillBonus,
	targetHudColor,
	NumberString(TargetExperience)
);

fp2TargetName = StringImage(
	JustifyLeft, 
	320,
	fp2FontTargetName,
	targetHudColor,
	GetName(Target, OnEveryFrame)
);

fp2TargetDesc = StringImage(
	JustifyLeft, 
	320,
	fp2FontTargetDesc,
	targetHudColor,
	GetModelTypeDesc(Target, OnEveryFrame)
);

fp2TargetRange3 = StringImage(
	JustifyRight,
	150,
	fp2FontNormal,
	targetHudColor,
	NumberString(GetRange(Target, OnEveryFrame))
);

fp2TargetRange4 = StringImage(
	JustifyRight,
	20,
	fp2FontNormal,
	fp2DarkGrey,
	"m"
);
fp2TargetRange5 = StringImage(
	JustifyLeft,
	150,
	fp2FontNormal,
	targetHudColor,
	GetSectorName(Target, OnEveryFrame)
); 
fp2TargetRange6 = StringImage(
	JustifyRight,
	20,
	fp2FontNormal,
	fp2DarkGrey,
	"..."
); 
fp2TargetRange1 = GroupImage([
	TranslateImage(fp2TargetRange3, Point(214, 42)),
	TranslateImage(fp2TargetRange4, Point(359, 42))
]);
fp2TargetRange2 = GroupImage([
	TranslateImage(fp2TargetRange5, Point(422, -44)),
	TranslateImage(fp2TargetRange6, Point(359, 42))
]);

fp2TargetRange = SwitchImage(
	GetRange(Target, OnEveryFrame),
	fp2TargetRange1,
	[
	(-1, fp2TargetRange2)
	]
);

fp2TargetSpeed = StringImage(
	JustifyLeft,
	150,
	fp2FontNormal,
	targetHudColor,
	NumberString(GetSpeed(Target, OnEveryFrame))
);  

fp2TargetInRange1 = BlendImage(
	ImportImageFromFile("mods/CortUI/media/cortui_fp2_target_in_range1.png", true),
	hudBlendMode
);
fp2TargetInRange2 = BlendImage(
	ImportImageFromFile("mods/CortUI/media/cortui_fp2_target_in_range2.png", true),
	hudBlendMode
);
fp2TargetInRange3 = BlendImage(
	ImportImageFromFile("mods/CortUI/media/cortui_fp2_target_in_range3.png", true),
	hudBlendMode
);
fp2TargetInRange4 = BlendImage(
	ImportImageFromFile("mods/CortUI/media/cortui_fp2_target_in_range4.png", true),
	hudBlendMode
);

fp2TargetInRangeImage = GroupImage([
	TranslateImage(fp2TargetInRange1, Point(10, 336)),
	TranslateImage(fp2TargetInRange2, Point(566, 336)),
	TranslateImage(fp2TargetInRange3, Point(10, 80)),
	TranslateImage(fp2TargetInRange4, Point(566, 80))
]);

fp2TargetInRange = SwitchImage(
	TargetInRangeFlag,
	emptyImage,
	[
		(1, fp2TargetInRangeImage)
	]
);

fp2DefaultTargetDisplay = VisibleImage(
	GroupImage([
		TranslateImage(fp2TargetShieldImage, Point(320, 240)),
		TranslateImage(fp2TargetHullImage, Point(320, -16)),
		TranslateImage(
			GeoImage(
				targetGeo,
				Rect(0, 0, 96, 96),
				// Rect(0, 0, 144, 144),
				targetCamera,
				true
			), 
			Point(272, -122)
			// Point(248, -146)
		),
		TranslateImage(fp2TargetOvalColor, Point(192, -144)),
		TranslateImage(fp2TargetExperience, Point(337, 484)),
		TranslateImage(fp2TargetName, Point(422, -12)),
		TranslateImage(fp2TargetDesc, Point(422, -30)),
		TranslateImage(fp2TargetSpeed, Point(342, 15)),
		fp2TargetRange,
		fp2TargetInRange
	])
	,	IsNotNull(Target, OnEveryFrame)
);

fp2CenterHudOn = GroupImage([
	TranslateImage(fp2ShieldImage, Point(64, 240)),
	TranslateImage(fp2HullImage, Point(64, -16)),
	TranslateImage(fp2ThrustImage, Point(64, 252)),
	TranslateImage(fp2FuelImage, Point(320, 252)),
	TranslateImage(fp2AmmoImage, Point(64, -28)),
	TranslateImage(fp2EnergyImage, Point(320, -28)),
	TranslateImage(fp2Autopilot, Point(11, 236)),
	TranslateImage(fp2Cloak, Point(11, 180)),
	TranslateImage(fp2VectorLock, Point(565, 236)),
	TranslateImage(fp2Eye, Point(565, 180)),
	fp2Damage,
	TranslateImage(fp2Speed, Point(218, 15)),
	TranslateImage(fp2Experience, Point(222, 484)),
	TranslateImage(fp2NeutralExperience, Point(280, 484)),
	TranslateImage(fp2MiscText, Point(256, -42)),
	TranslateImage(fp2NeutralSpeed, Point(280, 15)),
	TranslateImage(fpArtifact, Point(44, 431)),
	TranslateImage(fpCaptureFlag, Point(532, 431)),
	TranslateImage(fp2NeutralSignature, Point(288, 42)),
	TranslateImage(fp2Signature, Point(208, 42)),
	fp2DefaultTargetDisplay
]);


/////////////////////////////////////////////////////////////
//
//  NORMAL CENTER HUD STYLE SWITCH IMAGE
//
////////////////////////////////////////////////////////////

CenterHudOn = SwitchImage(
	NormalHUDMode,
	emptyImage,
	[
		(0, DefaultCenterHudOn), // Default Normal HUD
		(1, fpCenterHudOn), // lessHUD
		(2, fp2CenterHudOn) // JelloShot
	]
);


//////////////////////////////////////////////////////////////////
///
///  SOFTWARE HUD
///
//////////////////////////////////////////////////////////////////

softText = Color(0.586, 0.578, 0.680);
softTeamColor = ImportImage3D("softteamcolorbmp", hudColor, true);
softExperience = 
        StringImage(
            JustifyCenter,
            80,
            medBoldVerdana,
            Color(1, 1, 1),
            NumberString(Experience));

softThrustGauge =
    GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), playerThrottle);

softThrustGaugeHit =
    GaugeImage(JustifyLeft, ImportImage("softgaugehitbmp", true), playerThrottle);


softThrust = 
    SwitchImage(
        0, //Flash,
        softThrustGauge,
        [
            (0, softThrustGauge),
            (1, softThrustGaugeHit)
        ]
    );

softFuelGauge = 
    GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), GetFuel(Me, OnEveryFrame));
    
softFuelGaugeHit = 
    GaugeImage(JustifyLeft, ImportImage("softgaugehitbmp", true), GetFuel(Me, OnEveryFrame));
    
softFuel = 
    SwitchImage(
        0, //Flash,
        softFuelGauge,
        [
            (0, softFuelGauge),
            (1, softFuelGaugeHit)
        ]
    );

softAmmoGauge =
    GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), GetAmmo(Me, OnEveryFrame));

softAmmoGaugeHit =
    GaugeImage(JustifyLeft, ImportImage("softgaugehitbmp", true), GetAmmo(Me, OnEveryFrame));

softAmmo = 
    SwitchImage(
        0, //Flash,
        softAmmoGauge,
        [
            (0, softAmmoGauge),
            (1, softAmmoGaugeHit)
        ]
    );

softEnergyGauge = 
    GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), GetPercentEnergy(Me, OnEveryFrame));    

softEnergyGaugeHit = 
    GaugeImage(JustifyLeft, ImportImage("softgaugehitbmp", true), GetPercentEnergy(Me, OnEveryFrame));    

softEnergy = 
    SwitchImage(
        0, //Flash,
        softEnergyGauge,
        [
            (0, softEnergyGauge),
            (1, softEnergyGaugeHit)
        ]
    );

softHullGauge =
    GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), GetPercentHitPoints(Me, OnEveryFrame));    

softHullGaugeHit =
    GaugeImage(JustifyLeft, ImportImage("softgaugehitbmp", true), GetPercentHitPoints(Me, OnEveryFrame));

softHull = 
    SwitchImage(
        Flash,
        softHullGauge,
        [
            (0, softHullGauge),
            (1, softHullGaugeHit)
        ]
    );

softShieldGauge =
    GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), GetPercentShields(Me, OnEveryFrame));

softShieldGaugeHit =
    GaugeImage(JustifyLeft, ImportImage("softgaugehitbmp", true), GetPercentShields(Me, OnEveryFrame));

softShield = 
    SwitchImage(
        Flash,
        softShieldGauge,
        [
            (0, softShieldGauge),
            (1, softShieldGaugeHit)
        ]
    );

softSpeed = 
    StringImage(
        JustifyCenter,
        55,
        medVerdana,
        softText,
        ConcatinatedString(NumberString(GetSpeed(Me, OnEveryFrame)), " mps")
);



softRadOn = 
    ImagePane(ImportImage("softrangedbmp", false), []);


softRadarDetectPane = 
    SwitchPane(
                Detected,
                [
                    (softRadOn, 0)
                ]
               );

VectorLockSoft   = ImportImage("softvectorbmp", false);

softVectorLockOn = 
    SwitchImage(
        GetVectorLock(Me, OnEveryFrame),
        emptyImage,
        [
            (1, VectorLockSoft)
        ]
    );

AutopilotSoft   = ImportImage("softautopilotbmp", false);

softAutopilotOnImage =
    SwitchImage(
        AutopilotOn,
        emptyImage, 
        [
            (1, AutopilotSoft)
        ]
    );

CloakSoft   = ImportImage("softcloakbmp", false);

softCloakOn = 
    SwitchImage(
        IsCloaked(Me, OnEveryFrame),
        emptyImage,
        [
            (1, CloakSoft)
        ]
    );

softArtifactImage   = 
        ImportImage("captureflaglbmp", true);

softArtifact =
    SwitchImage(
        GotArtifact,
        emptyImage,
        [
            (1, softArtifactImage)
        ]
    );

softCaptureFlagImage =
        ImportImage("captureflagrbmp", true);


softCaptureFlag = 
    SwitchImage(
        GotFlag,
        emptyImage,
        [
            (1, softCaptureFlagImage)
        ]
    );

softSignatureImage = 
    StringImage(
        JustifyLeft,
        75,
        medVerdana,
        softText,
        ConcatinatedString("Sig ", NumberString(Signature))
    );

CenterHudSoftware = 
    GroupImage([    
        TranslateImage(softVectorLockOn, Point(150, 0)),
        TranslateImage(softAutopilotOnImage, Point(49, 0)),
        TranslateImage(softCloakOn, Point(235, 0)),
        TranslateImage(softExperience, Point(-20, 22)),
        TranslateImage(softTeamColor, Point(6, -1)),
        TranslateImage(softShield, Point(53, 12)),
        TranslateImage(softHull, Point(112, 12)),
        TranslateImage(softAmmo, Point(171, 12)),
        TranslateImage(softThrust, Point(230, 12)),
        TranslateImage(softEnergy, Point(289, 12)),
        TranslateImage(softFuel, Point(348, 12)),
        TranslateImage(softSpeed, Point(405, 26)),
        TranslateImage(PaneImage(softRadarDetectPane, false, true), Point(292, 0)),
        TranslateImage(softArtifact, Point(432, 5)),
        TranslateImage(softCaptureFlag, Point(467, 5)),
        TranslateImage(softSignatureImage, Point(406, 14)),
        ImportImage("softhudbgbmp", true)
    ]);

//////////////////////////////////////////////////////////////////
///
///  Parcival's Software HUD
///
//////////////////////////////////////////////////////////////////

parciAutopilotOnImage =
    SwitchImage(
        AutopilotOn,
        emptyImage, 
        [
            (1, ImportImageFromFile("mods/CortUI/media/cortui_parci_autopilot.png", true))
        ]
    );

parciRadarDetectImage = 
    SwitchImage(
        Detected,
        emptyImage,
        [
            (0, ImportImageFromFile("mods/CortUI/media/cortui_parci_eye.png", true))
        ]
    );

parciCloakOn = 
    SwitchImage(
        IsCloaked(Me, OnEveryFrame),
        emptyImage,
        [
            (1, ImportImageFromFile("mods/CortUI/media/cortui_parci_cloak.png", true))
        ]
    );

parciVectorLockOn = 
    SwitchImage(
        GetVectorLock(Me, OnEveryFrame),
        emptyImage,
        [
            (1, ImportImageFromFile("mods/CortUI/media/cortui_parci_vectorlock.png", true))
        ]
    );

parciThrustGauge =
    GaugeImage(JustifyBottom, ImportImageFromFile("mods/CortUI/media/cortui_parci_thrust.png", true), playerThrottle);

parciThrustGaugeHit =
    GaugeImage(JustifyBottom, ImportImageFromFile("mods/CortUI/media/cortui_parci_thrusthit.png", true), playerThrottle);

parciThrust = 
    SwitchImage(
        0, //Flash,
        parciThrustGauge,
        [
            (0, parciThrustGauge),
            (1, parciThrustGaugeHit)
        ]
    );

parciFuelGauge = 
    GaugeImage(JustifyBottom, ImportImageFromFile("mods/CortUI/media/cortui_parci_fuel.png", true), GetFuel(Me, OnEveryFrame));
    
parciFuelGaugeHit = 
    GaugeImage(JustifyBottom, ImportImageFromFile("mods/CortUI/media/cortui_parci_fuelhit.png", true), GetFuel(Me, OnEveryFrame));
    
parciFuel = 
    SwitchImage(
        0, //Flash,
        parciFuelGauge,
        [
            (0, parciFuelGauge),
            (1, parciFuelGaugeHit)
        ]
    );

parciAmmoGauge =
    GaugeImage(JustifyBottom, ImportImageFromFile("mods/CortUI/media/cortui_parci_ammo.png", true), GetAmmo(Me, OnEveryFrame));

parciAmmoGaugeHit =
    GaugeImage(JustifyBottom, ImportImageFromFile("mods/CortUI/media/cortui_parci_ammohit.png", true), GetAmmo(Me, OnEveryFrame));

parciAmmo = 
    SwitchImage(
        0, //Flash,
        parciAmmoGauge,
        [
            (0, parciAmmoGauge),
            (1, parciAmmoGaugeHit)
        ]
    );

parciEnergyGauge = 
    GaugeImage(JustifyBottom, ImportImageFromFile("mods/CortUI/media/cortui_parci_energy.png", true), GetPercentEnergy(Me, OnEveryFrame));    

parciEnergyGaugeHit = 
    GaugeImage(JustifyBottom, ImportImageFromFile("mods/CortUI/media/cortui_parci_energyhit.png", true), GetPercentEnergy(Me, OnEveryFrame));    

parciEnergy = 
    SwitchImage(
        0, //Flash,
        parciEnergyGauge,
        [
            (0, parciEnergyGauge),
            (1, parciEnergyGaugeHit)
        ]
    );

parciHullGauge =
    GaugeImage(JustifyBottom, ImportImageFromFile("mods/CortUI/media/cortui_parci_hull.png", true), GetPercentHitPoints(Me, OnEveryFrame));    

parciHullGaugeHit =
    GaugeImage(JustifyBottom, ImportImageFromFile("mods/CortUI/media/cortui_parci_hullhit.png", true), GetPercentHitPoints(Me, OnEveryFrame));

parciHull = 
    SwitchImage(
        Flash,
        parciHullGauge,
        [
            (0, parciHullGauge),
            (1, parciHullGaugeHit)
        ]
    );

parciShieldGauge =
    GaugeImage(JustifyBottom, ImportImageFromFile("mods/CortUI/media/cortui_parci_shield.png", true), GetPercentShields(Me, OnEveryFrame));

parciShieldGaugeHit =
    GaugeImage(JustifyBottom, ImportImageFromFile("mods/CortUI/media/cortui_parci_shieldhit.png", true), GetPercentShields(Me, OnEveryFrame));

parciShield = 
    SwitchImage(
        Flash,
        parciShieldGauge,
        [
            (0, parciShieldGauge),
            (1, parciShieldGaugeHit)
        ]
    );

ParciSoftSpeed = 
    StringImage(
        JustifyRight,
        75,
        medVerdana,
        softText,
        ConcatinatedString(NumberString(GetSpeed(Me, OnEveryFrame)), " mps")
);
	
ParciSoftSignatureImage = 
    StringImage(
        JustifyRight,
        75,
        medVerdana,
        softText,
        ConcatinatedString("Sig ", NumberString(Signature))
    );
	
ModifiedCenterHudParciStyle = 
		GroupImage([    
		    TranslateImage(parciAutopilotOnImage, Point(91, 77)),
		    TranslateImage(parciRadarDetectImage, Point(156, 105)),
		    TranslateImage(parciCloakOn, Point(149, 39)),
		    TranslateImage(parciVectorLockOn, Point(158, 0)),

		    TranslateImage(softExperience, Point(32, 105)),
		    TranslateImage(softTeamColor, Point(56, 82)),

		    TranslateImage(parciThrust, Point(1, 1)),
		    TranslateImage(parciFuel, Point(31, 1)),
		    TranslateImage(parciAmmo, Point(54, 1)),
		    TranslateImage(parciEnergy, Point(74, 1)),

			TranslateImage(parciShield, Point(95, 1)),
		    TranslateImage(parciHull, Point(113, 1)),

			TranslateImage(ParciSoftSpeed, Point(-32, 97)),
		    TranslateImage(ParciSoftSignatureImage, Point(-32, 109)),

		    TranslateImage(softArtifact, Point(194, 0)),
		    TranslateImage(softCaptureFlag, Point(194, 0)),

			ImportImageFromFile("mods/CortUI/media/cortui_parci_softhudbg.png", true)
		]);



//////////////////////////////////////////////////////////////////
///
///  HUD STYLE SWITCH IMAGE
///
//////////////////////////////////////////////////////////////////

CenterHudDisplay = 
    SwitchImage(
        StyleHUD,
        emptyImage,
        [   
            (0, CenterHudOn)
        ]
    );

cortCenterHudSoftwareSwitch = 
    SwitchImage(
        SoftwareHUDMode,
        CenterHudSoftware,
        [
            (3, emptyImage)         // Parci's mod is directly linked from the dialogs-variable
        ]
    );

softCenterHudDisplay =
    SwitchImage(
        StyleHUD,
        emptyImage,
        [   
            (1, cortCenterHudSoftwareSwitch)
        ]
    );

softCenterHudDisplayParciStyle2 =
    SwitchImage(
        SoftwareHUDMode,
        emptyImage,
        [
            (3, ModifiedCenterHudParciStyle)
        ]
    );

softCenterHudDisplayParciStyle =
    SwitchImage(
        StyleHUD,
        emptyImage,
        [   
            (1, softCenterHudDisplayParciStyle2)
        ]
    );



//////////////////////////////////////////////////////////////////////////////
//
// Normal Target Hud
//
//////////////////////////////////////////////////////////////////////////////


TargetName =
        StringImage(
            JustifyCenter, 
            160,
            medVerdana,
            targetHudColor,
            ConcatinatedString( GetName(Target, OnEveryFrame), ConcatinatedString(": ", GetModelTypeDesc(Target, OnEveryFrame)))
        );


TargetRangeString = 
    SwitchString(
        GetRange(Target, OnEveryFrame),
        ConcatinatedString("RANGE: ", NumberString(GetRange(Target, OnEveryFrame))),
        [
            (-1, ConcatinatedString("LOCATION:", GetSectorName(Target, OnEveryFrame)))
        ]
    );

        

TargetRange =
    StringImage(
        JustifyLeft,
        150,
        smVerdana,
        targetHudColor,
        TargetRangeString
    ); 

TargetInRangeImage = 
        ImportImage("turretrangebmp", true);

TargetInRange =     
    SwitchImage(
        TargetInRangeFlag,
        emptyImage,
        [
            (1, TargetInRangeImage)
        ]
    );

//TargetDesc = 
//    StringImage(
//      JustifyRight,
//      80,
//      smVerdana,
//      targetHudColor,
//      GetModelTypeDesc(Target, OnEveryFrame)
//    );


TargetSpeed =
    StringImage(
        JustifyRight,
        150,
        smVerdana,
        targetHudColor,
        ConcatinatedString("SPEED: ", NumberString(GetSpeed(Target, OnEveryFrame)))
    );  

TargetArmor = 
    StringImage(
        JustifyRight,
        60,
        medVerdana,
        targetHudColor,
        "ARMOR"
    );

TargetShield = 
    StringImage(
        JustifyLeft,
        60,
        medVerdana,
        targetHudColor,
        "SHIELD"
    );


TargetShieldGauge =
    BlendImage(
            GaugeImageRect(
                JustifyBottom,
                ImportImage("targetshieldgaugebmp", true),
                Rect(45, 26, 84, 101),
                true,
                GetPercentShields(Target, OnEveryFrame)
        ),
        hudBlendMode
);

TargetHullGauge =
    BlendImage(
            GaugeImageRect(
                JustifyBottom,
                ImportImage("targethullgaugebmp", true),
                Rect(44, 26, 83, 101),
                true,
                GetPercentHitPoints(Target, OnEveryFrame)
        ),
        hudBlendMode
);


//TargetHud = 
//        BlendImage(   
//          ImportImage3D("targethudbmp", targetHudColor, true),
//          hudBlendMode
//        );
    
TargetOval =
        BlendImage(
            ImportImage3D("targetovalbmp", white, true),
            hudBlendMode
    );


TargetOvalColor = ImportImage3D("targetovalcolorbmp", targetHudColor, true);
        
TargetOvalWord1 = 
  BlendImage(
            ImportImage3D("targetovalword1bmp", white, true),
            hudBlendMode
        );

TargetOvalWord2 = 
        BlendImage(
            ImportImage3D("targetovalword2bmp", white, true),
            hudBlendMode
        );

//cortTargetOvalColor = ImportImageFromFile3D("mods/CortUI/media/cortui_core_targetovalcolor.png", true);
cortTargetOvalColor = ImportImage3D("targetovalcolorbmp", targetHudColor, true);

cortTargetOvalWord1 = 
  BlendImage(
//            ImportImageFromFile3D("mods/CortUI/media/cortui_core_targetovalword1.png", true),
            ImportImage3D("targetovalword1bmp", white, true),
            hudBlendMode
        );

cortTargetOvalWord2 = 
        BlendImage(
//            ImportImageFromFile3D("mods/CortUI/media/cortui_core_targetovalword2.png", true),
            ImportImage3D("targetovalword2bmp", white, true),
            hudBlendMode
        );

TargetExperienceOnImage = 
    GroupImage([
            StringImage(
                JustifyCenter,
                80,
                medBoldVerdana,
                Color(0, 0, 0),
                NumberString(TargetExperience)),
            TranslateImage(
                BlendImage(
                    ImportImage3D("targetexperiencebmp", white, true),
                    hudBlendMode),
                Point(25, -21)
            )
            ]);

TargetExperienceImage =
    SwitchImage(
        GetModelType(Target, OnEveryFrame),
        emptyImage,
        [
            (0, TargetExperienceOnImage)
        ]
    );

DefaultNormalTargetDisplay = 
    VisibleImage(GroupImage(
        [
            
            TranslateImage(TargetShieldGauge, Point(367, 33)),
            TranslateImage(TargetHullGauge, Point(235, 33)),
            TranslateImage(
                GeoImage(
                    targetGeo,
                    Rect(0, 0, 96, 96),
                    targetCamera,
                    true
                ), 
                Point(270, 9)
            ),
            TranslateImage(TargetExperienceImage, Point(280, 110)),
            TranslateImage(TargetOvalWord1, Point(193, 8)),
            TranslateImage(TargetOvalWord2, Point(320, 8)),
            TranslateImage(TargetOval, Point(192, -75)),
            TranslateImage(TargetOvalColor, Point(256, -2)),
            TranslateImage(TargetName, Point(240, 125)),
            TranslateImage(TargetRange, Point(400, 33)),
            TranslateImage(TargetSpeed, Point(92, 33)),
            TranslateImage(TargetArmor, Point(168, 73)),
            TranslateImage(TargetShield, Point(410, 73)),
            TranslateImage(TargetInRange, Point(200, 90))
            ]
    
    ), IsNotNull(Target, OnEveryFrame));


//////////////////////////////////////////////////////////////////////////////
//
// lessHUD Target
//
//////////////////////////////////////////////////////////////////////////////

fpTargetOvalColor =
        BlendImage(
            ImportImageFromFile("mods/CortUI/media/cortui_fp1_target_oval_color.png", true),
            hudBlendMode
    );

fpTargetRangeString = 
    SwitchString(
        GetRange(Target, OnEveryFrame),
        ConcatinatedString(NumberString(GetRange(Target, OnEveryFrame)), " m"),
        [
            (-1, ConcatinatedString("LOCATION:", GetSectorName(Target, OnEveryFrame)))
        ]
    );

fpTargetRange =
    StringImage(
        JustifyLeft,
        150,
        medVerdana,
        targetHudColor,
        fpTargetRangeString
    ); 

fpTargetInRangeImage = 
        ImportImageFromFile("mods/CortUI/media/cortui_fp1_turret_range.png", true);

fpTargetInRange =     
    SwitchImage(
        TargetInRangeFlag,
        emptyImage,
        [
            (1, fpTargetInRangeImage)
        ]
    );

fpTargetSpeed =
    StringImage(
        JustifyRight,
        150,
        medVerdana,
        targetHudColor,
        ConcatinatedString(NumberString(GetSpeed(Target, OnEveryFrame)), " mps")
    );  

fpTargetExperienceOnImage = 
    GroupImage([
		StringImage(
			JustifyCenter,
			80,
			medBoldVerdana,
			targetHudColor,
			NumberString(TargetExperience)),
			emptyImage
		]);

fpTargetExperienceImage =
    SwitchImage(
        GetModelType(Target, OnEveryFrame),
        emptyImage,
        [
            (0, fpTargetExperienceOnImage)
        ]
    );

fpTargetHullGaugeBack = 
    BlendImage(
        ImportImageFromFile("mods/CortUI/media/cortui_fp1_target_hull_gauge2.png", true),
        hudBlendMode
    );

fpTargetHullGauge =
    BlendImage(
            GaugeImageRect(
                JustifyBottom,
                ImportImageFromFile("mods/CortUI/media/cortui_fp1_target_hull_gauge.png", true),
                Rect(0, 0, 53, 94),
                true,
                GetPercentHitPoints(Target, OnEveryFrame)
        ),
        hudBlendMode
);

fpTargetHullImage = 
GroupImage(
    [
        TranslateImage(fpTargetHullGaugeBack, Point(0, 0)),
        TranslateImage(fpTargetHullGauge, Point(0, 0))
    ]
);

fpTargetShieldGaugeBack = 
    BlendImage(
        ImportImageFromFile("mods/CortUI/media/cortui_fp1_target_shield_gauge2.png", true),
        hudBlendMode
    );

fpTargetShieldGauge =
    BlendImage(
            GaugeImageRect(
                JustifyBottom,
                ImportImageFromFile("mods/CortUI/media/cortui_fp1_target_shield_gauge.png", true),
                Rect(0, 0, 53, 94),
                true,
                GetPercentShields(Target, OnEveryFrame)
        ),
        hudBlendMode
);

fpTargetShieldImage = 
GroupImage(
    [
        TranslateImage(fpTargetShieldGaugeBack, Point(0, 0)),
        TranslateImage(fpTargetShieldGauge, Point(0, 0))
    ]
);

fpTargetDisplay = VisibleImage(
	GroupImage([
		TranslateImage(fpTargetShieldImage, Point(353, 27)),
		TranslateImage(fpTargetHullImage, Point(234, 27)),
		TranslateImage(
			GeoImage(
				targetGeo,
				Rect(0, 0, 96, 96),
				targetCamera,
				true
			), 
			Point(270, 19)
		),
		TranslateImage(fpTargetExperienceImage, Point(280, 120)),
		TranslateImage(fpTargetOvalColor, Point(240, 41)),
		TranslateImage(TargetName, Point(240, 135)),
		TranslateImage(fpTargetRange, Point(400, 43)),
		TranslateImage(fpTargetSpeed, Point(92, 43)),
		TranslateImage(fpTargetInRange, Point(240, 41))
		]
    ),
	IsNotNull(Target, OnEveryFrame)
);


/////////////////////////////////////////////////////////////
//
//  SOFTWARE TARGET HUD
//
////////////////////////////////////////////////////////////

softTargetTeamColor = ImportImage3D("softtargetteamcolorbmp", targetHudColor, true);

softTargetExperienceOn = 
        StringImage(
                JustifyCenter,
                80,
                medBoldVerdana,
                Color(1, 1, 1),
                NumberString(TargetExperience));

softTargetExperience =
    SwitchImage(
        GetModelType(Target, OnEveryFrame),
        emptyImage,
        [
            (0, softTargetExperienceOn)
        ]
    );

softTargetName =
        StringImage(
            JustifyLeft, 
            130,
            medVerdana,
            softText,
            GetName(Target, OnEveryFrame)
        );

SectorPatchImage = ImportImage("sectorpatchbmp", false);

softTargetLocationImage = 
    SwitchImage(
        GetRange(Target, OnEveryFrame),
        emptyImage,
        [
            (-1, SectorPatchImage)
        ]
    );

softTargetRangeString = 
    SwitchString(
        GetRange(Target, OnEveryFrame),
        NumberString(GetRange(Target, OnEveryFrame)),
        [
            (-1, GetSectorName(Target, OnEveryFrame))
        ]
    );

softTargetRange =
    StringImage(
        JustifyLeft,
        150,
        medVerdana,
        softText,
        softTargetRangeString
    );      
    
softTargetDesc = 
    StringImage(
        JustifyLeft,
        130,
        medVerdana,
        softText,
        GetModelTypeDesc(Target, OnEveryFrame)
    );

softTargetSpeed =
    StringImage(
        JustifyLeft,
        150,
        medVerdana,
        softText,
        ConcatinatedString(NumberString(GetSpeed(Target, OnEveryFrame)), " mps" )
    );  

softTargetShield =
    GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), GetPercentShields(Target, OnEveryFrame));

softTargetHull =
    GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), GetPercentHitPoints(Target, OnEveryFrame));

softTargetInRangeImage = 
        ImportImage("softturretrangebmp", true);

softTargetInRange =     
    SwitchImage(
        TargetInRangeFlag,
        emptyImage,
        [
            (1, softTargetInRangeImage)
        ]
    );

DefaultSoftwareTargetDisplay = 
    VisibleImage(
        TranslateImage(
            GroupImage(
                [
                TranslateImage(softTargetExperience, Point(-19, 29)),
                TranslateImage(softTargetTeamColor, Point(6, 6)),
                TranslateImage(softTargetShield, Point(54, 26)),
                TranslateImage(softTargetHull, Point(54, 8)),
                TranslateImage(softTargetName, Point(115, 38)),
                TranslateImage(softTargetDesc, Point(115, 22)),
                TranslateImage(softTargetLocationImage, Point(246, 24)),
                TranslateImage(softTargetRange, Point(279, 38)),
                TranslateImage(softTargetSpeed, Point(279, 22)),
                TranslateImage(softTargetInRange, Point(-24, 25)),
                ImportImage("softtargetbgbmp", true)
                ]
            ),
            Point(125, 30)
        ),
        IsNotNull(Target, OnEveryFrame)
    );



/////////////////////////////////////////////////////////////
//
//  ADDITIONAL CORTUI SOFTWARE HUD MODES
//
////////////////////////////////////////////////////////////

SoftwareTargetDisplayWithTargetingView = 
    VisibleImage(
        TranslateImage(
            GroupImage(
                [
                TranslateImage(softTargetExperience, Point(-19, 29)),
                TranslateImage(softTargetTeamColor, Point(6, 6)),
                TranslateImage(softTargetShield, Point(54, 26)),
                TranslateImage(softTargetHull, Point(54, 8)),
                TranslateImage(softTargetName, Point(115, 38)),
                TranslateImage(softTargetDesc, Point(115, 22)),
                TranslateImage(softTargetLocationImage, Point(246, 24)),
                TranslateImage(softTargetRange, Point(279, 38)),
                TranslateImage(softTargetSpeed, Point(279, 22)),
                TranslateImage(softTargetInRange, Point(-24, 25)),
                TranslateImage(
                    GeoImage(
                        targetGeo,
                        Rect(0, 0, 96, 96),
                        targetCamera,
                        true
                    ), 
                    Point(146, 44)
                ),
                TranslateImage(cortTargetOvalWord1, Point(67, 34)),
                TranslateImage(cortTargetOvalWord2, Point(194, 34)),
                TranslateImage(TargetOval, Point(66, -46)),
                TranslateImage(cortTargetOvalColor, Point(130, 27)),
                ImportImage("softtargetbgbmp", true)
                ]
            ),
            Point(125, 30)
        ),
        IsNotNull(Target, OnEveryFrame)
    );

ModifiedSoftwareTargetDisplayRaveenStyle = 
    VisibleImage(
        TranslateImage(
            GroupImage(
                [
                TranslateImage(softTargetExperience, Point(-10, 82)),
                TranslateImage(softTargetTeamColor, Point(15, 59)),
                TranslateImage(softTargetShield, Point(6, 34)),
                TranslateImage(softTargetHull, Point(6, 14)),
                TranslateImage(softTargetName, Point(255, 88)),
                TranslateImage(softTargetDesc, Point(255, 68)),
                TranslateImage(softTargetRange, Point(287, 48)),
                TranslateImage(softTargetSpeed, Point(287, 28)),
                TranslateImage(
                    GeoImage(
                        targetGeo,
                        Rect(0, 0, 96, 96),
                        targetCamera,
                        true
                    ), 
                    Point(107, 4)
                ),
                TranslateImage(cortTargetOvalWord1, Point(28, -6)),
                TranslateImage(cortTargetOvalWord2, Point(155, -6)),
                TranslateImage(TargetOval, Point(27, -86)),
                TranslateImage(cortTargetOvalColor, Point(91, -13)),
                ImportImageFromFile("mods/CortUI/media/cortui_core_softtargetbg.png", true)
                ]
            ),
            Point(125, 30)
        ),
        IsNotNull(Target, OnEveryFrame)
    );



/////////////////////////////////////////////////////////////
//
//  SOFTWARE HUD STYLE SWITCH IMAGE
//
////////////////////////////////////////////////////////////

SoftwareTargetDisplay = 
    SwitchImage(
        SoftwareHUDMode,
        DefaultSoftwareTargetDisplay,
        [
            (0, DefaultSoftwareTargetDisplay),
            (1, SoftwareTargetDisplayWithTargetingView),
            (2, ModifiedSoftwareTargetDisplayRaveenStyle),
            (3, ModifiedSoftwareTargetDisplayRaveenStyle)           // Parci is using Raveen-style targetting
        ]
    );


/////////////////////////////////////////////////////////////
//
//  NORMAL TARGET HUD STYLE SWITCH IMAGE
//
////////////////////////////////////////////////////////////

DefaultTargetDisplay = SwitchImage(
	NormalHUDMode,
	emptyImage,
	[
		(0, DefaultNormalTargetDisplay), // Default Normal HUD
		(1, fpTargetDisplay), // lessHUD
		(2, emptyImage) // JelloShot, doesn't use lower pane
	]
);


/////////////////////////////////////////////////////////////
//
//  TARGET HUD STYLE SWITCH IMAGE
//
////////////////////////////////////////////////////////////

TargetDisplay = 
    SwitchImage(
        StyleHUD,
        DefaultTargetDisplay,
        [
            (0, DefaultTargetDisplay),
            (1, SoftwareTargetDisplay)
        ]
    );

commandTargetDisplay = SoftwareTargetDisplay;



//////////////////////////////////////////////////////////////////////////////
//
// ADDITIONAL WEAPON RANGE INDICATOR
//
// Cortex 14:44 CEST 2005-04-20:
// + added weapon range indicator
//
//////////////////////////////////////////////////////////////////////////////

/*
cortMaxDisplayedTargetDistanceGreen  = 500;
cortMaxDisplayedTargetDistanceYellow = 1000;
cortMaxDisplayedTargetDistanceRed    = 5000;

// (x - Green) / (Yellow - Green)
cortTargetDistanceProcentualYellow = Divide(Subtract(GetRange(Target, OnEveryFrame), cortMaxDisplayedTargetDistanceGreen), Subtract(cortMaxDisplayedTargetDistanceYellow, cortMaxDisplayedTargetDistanceGreen));

// (x - Yellow) / (Red - Yellow)
cortTargetDistanceProcentualRed = Divide(Subtract(GetRange(Target, OnEveryFrame), cortMaxDisplayedTargetDistanceYellow), Subtract(cortMaxDisplayedTargetDistanceRed, cortMaxDisplayedTargetDistanceYellow));

cortWeaponRangeIndicator =
	VisibleImage(
		VisibleImage(
			GroupImage(
	    		[
				ImportImageFromFile("mods/CortUI/media/cortui_core_weaponrangeindicatorgauge_green.png", true),
				TranslateImage(GaugeImage(JustifyLeft, ImportImageFromFile("mods/CortUI/media/cortui_core_weaponrangeindicatorgauge_yellow.png", true), cortTargetDistanceProcentualYellow), Point(18, 0)),
				TranslateImage(GaugeImage(JustifyLeft, ImportImageFromFile("mods/CortUI/media/cortui_core_weaponrangeindicatorgauge_red.png", true), cortTargetDistanceProcentualRed), Point(36, 0))
				]
			),
			IsNotNull(Target, OnEveryFrame)
		),
		IsNotNull(Max(GetRange(Target, OnEveryFrame), 0), OnEveryFrame)
	);
*/



//////////////////////////////////////////////////////////////////////////////
//
// CORTUI VERSION INFORMATION
//
// Cortex 2005#05#05:
// + added CortUI version information at the lower right corner of the maps
//
//////////////////////////////////////////////////////////////////////////////

cortVersionInformation =
    StringImage(
        JustifyRight,
        200,
        medVerdana,
        Color(0.586, 0.578, 0.680),
        cortUIVersionString
	);



//////////////////////////////////////////////////////////////////////////////
//
// ADDITIONAL DISPLAYS FOR MAP-MODE
//
// Ksero 14:22 2005-03-04:
// + added Autopilot-indicator in in-flight command mode
//
// Cortex 2005#04#17:
// + added various additional displays
//
// Cortex 2005#05#05:
// + appended "(turret)" to the ship type when you're turreting
//
// Cortex 2005#07#08:
// + added speed gauge for current target
//
// Cortex 2005#08#16:
// - removed speed for non-moving targets
// + added experience display for players 
//
//////////////////////////////////////////////////////////////////////////////

cortText = Color(0.586, 0.578, 0.680);

cortTargetExperienceOff =
    StringImage(
        JustifyLeft, 
        200,
        medVerdana,
        cortText,
        GetName(Target, OnEveryFrame)
    );

cortTargetExperienceOn =
    StringImage(
        JustifyLeft, 
        200,
        medVerdana,
        cortText,
        ConcatinatedString(ConcatinatedString(ConcatinatedString(GetName(Target, OnEveryFrame), " ("), NumberString(TargetExperience)), "%)")
    );

cortTargetName =
    SwitchImage(
        GetModelType(Target, OnEveryFrame),
        cortTargetExperienceOff,
        [
            (0, cortTargetExperienceOn)
        ]
    );

cortTargetRangeString = 
    SwitchString(
        GetRange(Target, OnEveryFrame),
        ConcatinatedString(NumberString(GetRange(Target, OnEveryFrame)), "m"),
        [
            (-1, GetSectorName(Target, OnEveryFrame))
        ]
    );

cortTargetRange =
    StringImage(
        JustifyLeft,
        150,
        medVerdana,
        cortText,
        cortTargetRangeString
    );      

cortTargetSpeed =
    SwitchImage(
        GetModelType(Target, OnEveryFrame),
        emptyImage,
        [
            (0, StringImage(
			        JustifyLeft,
			        150,
			        medVerdana,
			        cortText,
			        ConcatinatedString(NumberString(GetSpeed(Target, OnEveryFrame)), " mps")
   				 )
			)
        ]
    );

cortShipLabel =
    StringImage(
        JustifyLeft, 
        130,
        medVerdana,
        cortText,
        "Ship:"
    );

cortShipValuePilot = 
    StringImage(
        JustifyLeft,
        300,
        medVerdana,
        cortText,
        GetModelTypeDesc(Me, OnEveryFrame)
	);

cortShipValueTurret =
    StringImage(
        JustifyLeft,
        300,
        medVerdana,
        cortText,
        ConcatinatedString(GetModelTypeDesc(Me, OnEveryFrame), " (turret)")
	);

cortShipValue = 
    SwitchImage(
        BoardState,
        emptyImage,
        [
        	(0, cortShipValuePilot),
            (2, cortShipValueTurret)
        ]
    );

cortShieldsLabel =
    StringImage(
        JustifyLeft, 
        130,
        medVerdana,
        cortText,
        "Shields:"
    );

cortShieldsGauge = 
    GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), GetPercentShields(Me, OnEveryFrame));

cortHullLabel =
    StringImage(
        JustifyLeft, 
        130,
        medVerdana,
        cortText,
        "Hull:"
    );

cortHullGauge = 
    GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), GetPercentHitPoints(Me, OnEveryFrame));

cortEnduranceLabel =
	GroupImage([
	    TranslateImage(
			StringImage(
		        JustifyLeft, 
		        130,
		        medVerdana,
		        cortText,
		        "O  :"
			),
			Point(0, 0)
		),
	    TranslateImage(
		    StringImage(
		        JustifyLeft, 
		        130,
		        medVerdana,
		        cortText,
		        "2"
			),
			Point(8, -4)
		)
	]);

cortEnduranceGauge = 
    GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), GetEndurance(Me, OnEveryFrame));

cortEnergyLabel =
    StringImage(
        JustifyLeft, 
        130,
        medVerdana,
        cortText,
        "Energy:"
    );

cortEnergyGauge = 
    GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), GetPercentEnergy(Me, OnEveryFrame));

cortAmmoLabel =
    StringImage(
        JustifyLeft, 
        130,
        medVerdana,
        cortText,
        "Ammo:"
    );

cortAmmoGauge = 
    GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), GetAmmo(Me, OnEveryFrame));

cortFuelLabel =
    StringImage(
        JustifyLeft, 
        130,
        medVerdana,
        cortText,
        "Fuel:"
    );

cortFuelGauge = 
    GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), GetFuel(Me, OnEveryFrame));

cortThrustLabel =
    StringImage(
        JustifyLeft, 
        130,
        medVerdana,
        cortText,
        "Thrust:"
    );

cortThrustGauge =
    GaugeImage(JustifyLeft, ImportImage("softgaugebmp", true), playerThrottle);

cortSpeedLabel =
    StringImage(
        JustifyLeft, 
        130,
        medVerdana,
        cortText,
        "Speed:"
    );

cortSpeedValue = 
    StringImage(
        JustifyRight,
        75,
        medVerdana,
        cortText,
        NumberString(GetSpeed(Me, OnEveryFrame))
	);

cortSpeedPostfix = 
    StringImage(
        JustifyLeft,
        30,
        medVerdana,
        cortText,
        "mps"
    );

cortSigLabel =
    StringImage(
        JustifyLeft, 
        130,
        medVerdana,
        cortText,
        "Sig:"
    );

cortSigValue = 
    StringImage(
        JustifyRight,
        75,
        medVerdana,
        cortText,
        NumberString(Signature)
    );

cortSigPostfix = 
    StringImage(
        JustifyLeft,
        30,
        medVerdana,
        cortText,
        "%"
    );

cortKillbonusLabel =
    StringImage(
        JustifyLeft, 
        130,
        medVerdana,
        cortText,
        "KB:"
    );

cortKillbonusValue = 
    StringImage(
        JustifyRight,
        75,
        medVerdana,
        cortText,
        NumberString(Experience)
    );

cortKillbonusPostfix = 
    StringImage(
        JustifyLeft,
        30,
        medVerdana,
        cortText,
        "%"
    );

cortKillbonusValueAndPostfixLeftAligned = 
    StringImage(
        JustifyLeft,
        75,
        medVerdana,
        cortText,
        ConcatinatedString(NumberString(Experience), " %")
    );

cortShipDisplays = 
	GroupImage([
		TranslateImage(cortEnergyLabel,      Point(0,  0)),
		TranslateImage(cortEnergyGauge,      Point(50, -8)),
		TranslateImage(cortAmmoLabel,        Point(0,  -12)),
		TranslateImage(cortAmmoGauge,        Point(50, -20)),
		TranslateImage(cortFuelLabel,        Point(0,  -24)),
		TranslateImage(cortFuelGauge,        Point(50, -32))
	]);

cortPodDisplays =
	GroupImage([
		TranslateImage(cortEnduranceLabel,      Point(0,  0)),
		TranslateImage(cortEnduranceGauge,      Point(50, -8))
	]);

cortCommandModeInfo = 
	GroupImage([
		SwitchImage(
			AutopilotOn,
			emptyImage,
			[
				(1, TranslateImage(cortAutopilotOnImage, Point(0, -5)))
			]
		),
		SwitchImage(
			GetVectorLock(Me, OnEveryFrame),
			emptyImage,
			[
				(1, TranslateImage(cortVectorLockOn, Point(0, -5)))
			]
		),
    	VisibleImage(
			GroupImage(
        		[
				TranslateImage(cortTargetName,  Point(49, 27)),
				TranslateImage(cortTargetRange, Point(49, 16)),
				TranslateImage(cortTargetSpeed, Point(49, 5))
				]
			),
			IsNotNull(Target, OnEveryFrame)
		),
		TranslateImage(cortShipLabel,        Point(0,  -10)),
		TranslateImage(cortShipValue,        Point(49, -10)),
		TranslateImage(cortShieldsLabel,     Point(0,  -22)),
		TranslateImage(cortShieldsGauge,     Point(50, -30)),
		TranslateImage(cortHullLabel,        Point(0,  -34)),
		TranslateImage(cortHullGauge,        Point(50, -42)),
		TranslateImage(
			SwitchImage(
		        IsEjectPod(Me, OnEveryFrame),
				emptyImage,
				[
					(0, TranslateImage(cortShipDisplays, Point(0, 0))),
					(1, TranslateImage(cortPodDisplays, Point(0, -12)))
				]
			),
			Point(0, -46)
		),
		TranslateImage(cortThrustLabel,      Point(0,  -82)),
		TranslateImage(cortThrustGauge,      Point(50, -90)),
		TranslateImage(cortSpeedLabel,       Point(0,  -94)),
		TranslateImage(cortSpeedValue,       Point(5,  -94)),
		TranslateImage(cortSpeedPostfix,     Point(82, -94)),
		TranslateImage(cortSigLabel,         Point(0,  -106)),
		TranslateImage(cortSigValue,         Point(5,  -106)),
		TranslateImage(cortSigPostfix,       Point(82, -106)),
		TranslateImage(cortKillbonusLabel,   Point(0,  -118)),
		TranslateImage(cortKillbonusValue,   Point(5,  -118)),
		TranslateImage(cortKillbonusPostfix, Point(82, -118))
	]);

cortCommandModeInfoBase = 
	GroupImage([
		TranslateImage(cortShipLabel,                             Point(0,  -50)),
		TranslateImage(cortShipValue,                             Point(49, -50)),
		TranslateImage(cortKillbonusLabel,                        Point(0,  -62)),
		TranslateImage(cortKillbonusValueAndPostfixLeftAligned,   Point(49, -62))
	]);


/////////////////////////////////////////////////////////////
//
//  GAME STATE
//
////////////////////////////////////////////////////////////

gameStateCloseButton = SoundButtonPane(ImportImage("btnclosepanebmp", true), ButtonNormal, false, negativeButtonClickSoundId);
gameStateContainer = GameStateContainer(smallFont, smallFont, gameStateCloseButton);
gameStateImage     =
    JustifyImage(
        GroupImage([
            TranslateImage(
                PaneImage(BlackPane(gameStateCloseButton), false, true),
                Point(-23, -20)
            ),
            JustifyImage(GameStateImage(gameStateContainer), JustifyRight | JustifyTop)
        ]),
        JustifyLeft | JustifyYCenter
    );

RecipientsVisibleOM = 6;

InventoryTabImage = ImportImage("inventorytabbmp", true);

ShipNameImage = StringImage(
                    JustifyCenter,
                    214,
                    smallBoldFont, 
                    Color(1, 1, 1),
                    GetModelTypeDesc(Me, OnEveryFrame)
                );


//////////////////////////////////////////////////////////////
//
//  LIVES COUNTER & COUNTDOWN & KILL COUNTER
//
//////////////////////////////////////////////////////////////

LivesOnImage = 
    GroupImage(
        [
            TranslateImage(StringImage(
                            JustifyCenter,
                            80,
                            medBoldVerdana,
                            Color(1, 1, 1),
                            ConcatinatedString(NumberString(Lives), " lives")), Point(18, 20)),
            ImportImage("livesbmp", true)
        ]);

LivesImage = 
    SwitchImage(
        LivesOn,
        emptyImage,
        [
            (1, LivesOnImage)
        ]
    );

CountdownOn = ModifiableNumber(0);

CountdownOnImage = 
                ImportImage("timebmp", true);



CountdownImage = 
    SwitchImage(
        CountdownOn,
        emptyImage,
        [
            (1, CountdownOnImage)
        ]
    );

KillsOnImage = 
    GroupImage(
        [
            TranslateImage(
                StringImage(
                        JustifyCenter,
                        80,
                        medBoldVerdana,
                        Color(1, 1, 1),
                        ConcatinatedString(NumberString(Kills), " kills")),
                Point(15, 20)),
            ImportImage("hudkillsbmp", true)
        ]);



KillsImage = 
    SwitchImage(
        KillsOn,
        emptyImage,
        [
            (1, KillsOnImage)
        ]
    );


//////////////////////////////////////////////////////////////
//
//  Ripcord countdown
//
//////////////////////////////////////////////////////////////

RipcordCountdownImage = 
    SwitchImage(
        IsRipcording(Me, OnEveryFrame),
        emptyImage,
        [
            (1, 
                StringImage(
                    JustifyCenter,
                    150,
                    lgBoldVerdana,
                    softText,
                    ConcatinatedString("Ripcord in: ", NumberString(GetRipcordTimeLeft(Me, OnEveryFrame)))
                )
            )
        ]
    );

//////////////////////////////////////////////////////////////
//
//  Current sector
//
//////////////////////////////////////////////////////////////
    
LookingAtImage =
    GroupImage([
        BlendImage(
            StringImage(
                JustifyCenter,
                160,
                promptFont,
                yellowText,
                "Currently viewing:"
            ),
            hudBlendMode),
        TranslateImage(SectorNameImage, Point(0, -14)),
        TranslateImage(CloakOn, Point(30, -110))
    ]);

//////////////////////////////////////////////////////////////
//
// Actual dialogs
//
// Ksero 2005-03:
// + added documentation
//
// Cortex 2005-04-17:
// * new map-mode UI is used
// * moved base status display
// * moved CommPane (chat display)
// + ripcord time is now shown in map-mode as well
// * moved the software HUD information display to not overlap
//   the chat
// - removed the base status display from the loadout screen
//
// Ksero 2005-04-17
// * restructured to use common parameter NumChatLines
// * adjusted positions for new, shorter command pane
//
// Cortex 2005#05#05:
// * all panes are now created ahead of the dialogs definition
//   to improve readability and maintainability
// * merged the composite images of inventory and investments, they
//   are now passed to the dialog definition as one pane
// + improved documentation of console mode flags
// + added (inactive) code to display console mode flags in the game
// * reordered and repositioned all windows
// * changed console mode flags for various windows (for instance
//   to show various displays during launch animation)
// * splitted inventory and minimap to display them differently
//   depending on console mode flags (e.g. to move minimap to the
//   border at the map, but not in the cockpit)
// * splitted normal chat display and loadout chat display to show
//   less lines at the loadout screen than in the cockpit/hangar/map
// - removed accepted and queued order (I think they're useless)
// - removed 'back' button at the map (can be done with F3 and is
//   now obscured by the minimap anyway)
// + added CortUI version information
// * improved indentation to improve readability and maintainability
//
// Cortex 2005#08#16:
// * scrollbar for main chat display can now optionally be turned off
// * moved map info to the left to make room for long callsigns with exp display
// + base status is now shown on map in base as well
// + orders are now shown in the hangar and on map in base
//
// Cortex 2005#12#27:
// * the map-mode displays very long names correctly now (text width
//   155->200, moved 20 to the right)
// * the minimap has been moved a bit to be symmetrical with the loadout
//   window
// * the targeting view has been moved three pixels up for the new software
//   HUD mode
//
//////////////////////////////////////////////////////////////

// General remarks:
// 	  * StyleHUD==1 ==> software / StyleHUD==0 ==> normal
//    * height(softcenterhud) = 29
//    * height(criticaltipimage) = 56

// Position calculations:
// 	  * SoftCenterHudDisplayOffset = -35 * 12*NumChatLinesGlobal			// if software HUD (normal HUD: unused)
//    * CriticalTipImageYOffset    = -50 * 12*NumChatLinesGlobal			// if normal HUD
//			 						 -80 * 12*NumChatLinesGlobal			// if software HUD
//    * VoteTextImageYOffset       = -85 * 12*NumChatLinesGlobal			// if normal HUD
//							  	   = -95 * 12*NumChatLinesGlobal			// if software HUD

SoftCenterHudDisplayYOffset				= Subtract(-35, Multiply(12, NumChatLinesGlobal));
CriticalTipImageYOffset_NormalHud		= Subtract(-50, Multiply(12, NumChatLinesGlobal));
CriticalTipImageYOffset_SoftwareHud		= Subtract(-80, Multiply(12, NumChatLinesGlobal));
VoteTextImageYOffset_NormalHud			= Subtract(-85, Multiply(12, NumChatLinesGlobal));
VoteTextImageYOffset_SoftwareHud		= Subtract(-95, Multiply(12, NumChatLinesGlobal));

CriticalTipImage_Adjusted = SwitchImage(
								StyleHUD,
								emptyImage,
								[(0, TranslateImage(CriticalTipImage, Point(   0, CriticalTipImageYOffset_NormalHud))),
								 (1, TranslateImage(CriticalTipImage, Point(   0, CriticalTipImageYOffset_SoftwareHud)))]
							);
VoteTextImage_Adjusted = SwitchImage(
								StyleHUD,
								emptyImage,
								[(0, TranslateImage(VoteTextImage, Point(   0, VoteTextImageYOffset_NormalHud))),
								 (1, TranslateImage(VoteTextImage, Point(   0, VoteTextImageYOffset_SoftwareHud)))]
						 );

CommandPaneImage			      = PaneImage(CommandPane, false, true);
CommandRadarDetectPaneImage       = PaneImage(commandRadarDetectPane, false, true);
TeamPaneImage				      = PaneImage(TeamPanePane, false, true);
TeleportPaneImage			      = PaneImage(TeleportPane, false, true);
MoneyPaneImage				      = PaneImage(moneyPane, false, true);
InvestmentsInfoPaneImage	      = PaneImage(InvestmentsInfoPane, false, true);
InvestmentsPaneImage		      = PaneImage(InvestmentsPane, false, true);
cortCommPaneImageBasic		      = PaneImage(CommPane, false, true);
CuttingRect                       = Rect(0, 0, 355, 125);
cortCommPaneImageWithoutScrollbar = PaneImage(BlackPane(ImagePane(ClipImage(cortCommPaneImageBasic, CuttingRect), [])), false, true);
cortCommPaneImageWithScrollbar    = cortCommPaneImageBasic;
cortCommPaneImage			      = SwitchImage(
								       ShowScrollbarOnCockpitChat,
								       cortCommPaneImageWithoutScrollbar,
								       [(1, cortCommPaneImageWithScrollbar)]
							        );
cortCommPaneLoadoutImage	      = PaneImage(cortCommPaneLoadout, false, true);
EjectPodPaneImage			      = PaneImage(EjectPodPane, false, true);
DeathBannerPaneImage		      = PaneImage(DeathBannerPane, false, true);
CenterHudDisplayImage		      = VisibleImage(CenterHudDisplay, ShowCenterHUD);
SoftCenterHudDisplayImage	      = VisibleImage(softCenterHudDisplay, ShowCenterHUD);
SoftCenterHudDisplayImageParciStyle = VisibleImage(softCenterHudDisplayParciStyle, ShowCenterHUD);
TargetDisplayImage			      = VisibleImage(TargetDisplay, ShowTargetHUD);
MergedInventoryPaneImage    = GroupImage([
									TranslateImage(ShipNameImage,		Point( -5,  14)),
							        TranslateImage(InventoryImage(),	Point(  0,  0)),
							        TranslateImage(InventoryTabImage,	Point( -10, 4))
							  ]);
MergedInvestmentsPaneImage  = GroupImage([
									TranslateImage(MoneyPaneImage,				Point(  33, 0)),
									TranslateImage(InvestmentsInfoPaneImage,	Point(  17, 122)), 
									TranslateImage(InvestmentsPaneImage,		Point(   0, 0))
							  ]);
LastOrderImage				= SwitchImage(
        							ShowLastOrders,
									emptyImage,
							        [(1, 
										GroupImage([
											TranslateImage(AcceptedOrderImage,			Point(   0, 0)),
											TranslateImage(QueuedOrderImage,			Point(   0, -20))
										])
									)]
							  );



dialogs =
    [
        // entry format:
        // (image, side, off point, on point, transition time, consoles modes, undetectable)
        // coordinate origin is at lower left of screen. Positive axii going right and upward.
        // In the end, when the image is visible, the lower left of the image is located at (sidePoint + OnPoint)
        // image: the image to display ;)
        // side: one of the Side* constants. This is an offset to the off and on-points, 
        // they are defined relative to this point. Possible values:
        // NOTE: as mentioned, origin is at lower left of screen
        //      SideLeftOffset = (xmin,  yhalf)
        //      SideTopLeftOffset = (xmin,  ymax )
        //      SideTopOffset = (xhalf, ymax )
        //      SideTopRightOffset = (xmax,  ymax )
        //      SideRightOffset = (xmax,  yhalf)
        //      SideBottomRightOffset = (xmax,  ymin )
        //      SideBottomOffset = (xhalf, ymin )
        //      SideBottomLeftOffset = (xmin,  ymin )
        //      SideCenterOffset = (xhalf, yhalf)
        // off point: where the pane should move when it's becoming not visible (e.g. when moving to a console mode)
        //            where this image should not be shown
        // on point:  where the pane should be placed when visible
        // transition time: how long it should take for the pane to move between on and off points
        // console mode: a bit field that decides in what contexts to show the specified image:
        //      ofInHangar          = 0x000001,1
        //          the hangar image can be seen in the background
        //      ofInFlightCommand   = 0x000002,2
        //          map-mode (default F3) during flight
        //      ofInStationCommand  = 0x000004,4
        //          map-mode (default F3) in base
        //      ofInFlight          = 0x000008,8
        //          in flight (launch animation, cockpit, chase view, map, ...)
        //      ofInCockpit         = 0x000010,16
        //          flight-mode, cockpit
        //      ofInChase           = 0x000020,32
        //          flight-mode, chase view
        //      ofInLoadout         = 0x000040,64
        //          loadout-screen
        //      ofTeleportPane      = 0x000100,256
        //          teleport window is opened (default F8)
        //      ofInvestment        = 0x000200,512
        //          investment window is opened (default F5)
        //      ofGameState         = 0x000400,1024
        //          game state window is opened (default G)
        //      ofTeam              = 0x000800,2048
        //          narrow team window is opened (default F6, then click on small arrow)
        //      ofExpandedTeam      = 0x001000,4096
        //          expanded team window is opened (default F6)
        //      ofInventory         = 0x002000,8192
        //          inventory window is opened (default F4)
        //      ofCommandPane       = 0x004000,16384
        //          the command bar is displayed (map)
        //      ofSectorPane        = 0x008000,32768
        //          the minimap is displayed (default F7)
        //      ofGloatCam          = 0x010000,65536
        //          the camera is overridden (launch sequence, training missions)
        // undetectable - If a pane is undetectable, then no click events are generated for the pane.
        //
        // (image, side, off point, on point, transition time, consoles modes, undetectable

        // to see in every situation which 'console mode' flags are set, uncomment the following lines:
        /*
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofInHangar (1)"),           SideCenter, Point(0,0), Point(0,-12),  .5, 0x000001, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofInFlightCommand (2)"),    SideCenter, Point(0,0), Point(0,-24),  .5, 0x000002, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofInStationCommand (4)"),   SideCenter, Point(0,0), Point(0,-36),  .5, 0x000004, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofInFlight (8)"),           SideCenter, Point(0,0), Point(0,-48),  .5, 0x000008, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofInCockpit (16)"),         SideCenter, Point(0,0), Point(0,-60),  .5, 0x000010, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofInChase (32)"),           SideCenter, Point(0,0), Point(0,-72),  .5, 0x000020, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofInLoadout (64)"),         SideCenter, Point(0,0), Point(0,-84),  .5, 0x000040, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "UNKNOWN (128)"),            SideCenter, Point(0,0), Point(0,-96),  .5, 0x000080, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofTeleportPane (256)"),     SideCenter, Point(0,0), Point(0,-108), .5, 0x000100, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofInvestment (512)"),       SideCenter, Point(0,0), Point(0,-120), .5, 0x000200, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofGameState (1024)"),       SideCenter, Point(0,0), Point(0,-132), .5, 0x000400, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofTeam (2048)"),            SideCenter, Point(0,0), Point(0,-144), .5, 0x000800, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofExpandedTeam (4096)"),    SideCenter, Point(0,0), Point(0,-156), .5, 0x001000, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofInventory (8192)"),       SideCenter, Point(0,0), Point(0,-168), .5, 0x002000, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofCommandPane (16384)"),    SideCenter, Point(0,0), Point(0,-180), .5, 0x004000, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofSectorPane (32768)"),     SideCenter, Point(0,0), Point(0,-192), .5, 0x008000, true),
        (StringImage(JustifyLeft, 150, medVerdana, Color(0.586, 0.578, 0.680), "ofGloatCam (65536)"),       SideCenter, Point(0,0), Point(0,-204), .5, 0x010000, true),
        */

        // **********************************
        // * Level 1 (topmost)
        // **********************************

        // CriticalTipImage: the four red lines in the middle of the screen
        (CriticalTipImage_Adjusted,     SideTop,            Point( -310, 0), Point(-310, 0), .5,   15, true),

        // LoadoutCriticalTipImage: the four red lines in the middle of the screen, when you're in the loadout-screen
        (LoadoutCriticalTipImage,       SideCenter,         Point( -310, 0   ), Point(-310,    0), .5,   64, true),

        // TipTextImage: the line with joiners/leavers/money, etc at the bottom of the screen (two additional lines added by YP's patch from 2006-08-02)
        (TipTextImage2,                 SideBottom,         Point( -300, -180), Point(-300,   34), .5, 65535, true),
        (TipTextImage1,                 SideBottom,         Point( -300, -190), Point(-300,   25), .5, 65535, true),
        (TipTextImage,                  SideBottom,         Point( -300, -200), Point(-300,   14), .5, 65535, true),

        // VoteTextImage: the line that is displayed when a vote is called
        (VoteTextImage_Adjusted,        SideTop,            Point( -310, 0),    Point(-310, 0),    .5, 65535, true),

        // ChatCompositionImage: the chat window (where you enter your messages)
        (ChatCompositionImage,          SideBottom,         Point( -170,  -78), Point(-150,  148), .5, 65663, false),

        // **********************************
        // * Level 2
        // **********************************

        // gameStateImage: the gamestate, your kills, etc.
        (gameStateImage,                SideLeft,           Point( -500,   33), Point(  10,   33), .5, 1024, false),

        // TeamPaneImage: the information window about the teams (F6)
        (TeamPaneImage,                 SideRight,          Point(  10, -150),  Point(-750, -150), .5, 6144, false),        //0, -500

        // MergedInvestmentsPaneImage: the investments pane (F5)
        (MergedInvestmentsPaneImage,    SideCenter,         Point( -192, 2000), Point(-192, -265), .5, 512, false),

        // TeleportPane: the teleport selection window (F8)
        (TeleportPaneImage,             SideLeft,           Point( -620, -100), Point(  16, -100), .5, 256, false),     //16, -280

        // **********************************
        // * Level 3
        // **********************************

        //SectorImage: the minimap (flight mode)
        (SectorImage,                   SideBottomLeft,     Point(   0, -187), Point(  36,   28), .5, 65584, false),        //== 65536 + 32 + 16
        //SectorImage: the minimap (in base)
        (SectorImage,                   SideBottomLeft,     Point(   0, -187),  Point(  0,   8), .5, Add(263, Multiply(ShowMinimapAtLoadoutScreen, 64)) , false),       //== 256 + 4 + 2 + 1

        // **********************************
        // * Level 4
        // **********************************

        //MergedInventoryImage: the inventory pane (normal mode)
        (MergedInventoryPaneImage,      SideBottomRight,    Point( -245, -150), Point( -245,  40), .5, Add(Subtract(8192, Multiply(AlwaysShowLoadoutWindow, 8144)), 0x010000), true),
        //MergedInventoryImage: the inventory pane (map during flight)
        (MergedInventoryPaneImage,      SideBottomRight,    Point( -245, 0), Point( -214,  20), .5, 2, true),

        // **********************************
        // * Level 5 (below everything else)
        // **********************************

        // cortWeaponRangeIndicator: new feature
//        (cortWeaponRangeIndicator,        SideCenter,         Point(    0,    0), Point( -53,  100), 0,    48,              true),
//        (StringImage(JustifyRight, 75, medVerdana, cortText, NumberString(SoftwareHudCriticalTipYOffset)), SideCenter, Point(    0,    0), Point(   0,  -20), .5,    48, true),
//        (StringImage(JustifyRight, 75, medVerdana, cortText, NumberString(SoftwareHudVoteTextImageYOffset)), SideCenter, Point(    0,    0), Point(   0,  -40), .5,    48, true),
//        (StringImage(JustifyRight, 75, medVerdana, cortText, NumberString(SoftCenterHudDisplayYOffset)), SideCenter, Point(    0,    0), Point(   0,  -60), .5,    48, true),
//        (testImage, SideCenter, Point(    0,    0), Point( 0,  -80), .5,    48, true),
//        (testImage2, SideCenter, Point(    0,    0), Point( 0,  -100), .5,    48, true),
//        (StringImage(JustifyRight, 75, medVerdana, cortText, NumberString(VoteTextImageYOffset)), SideCenter, Point(    0,    0), Point(   0,  -100), .5,    48, true),

        // CommPane: the chat display
        (cortCommPaneImage,             SideTop,            Point(-160, -126), Point(-160, -126), 0, 63, true),
        (cortCommPaneLoadoutImage,      SideTop,            Point(-160, -126), Point(-160, -126), 0, 64, true),

        // (soft)CenterHudDisplay: the HUD (either normal or software)
        (CenterHudDisplayImage,               SideCenter,     Point( -320, 1000), Point( -320, -240), .5, 48, true),
        (SoftCenterHudDisplayImage,           SideTop,        Point( -320, 1000), Point( -232, SoftCenterHudDisplayYOffset), .5, 48, true ),
        (SoftCenterHudDisplayImageParciStyle, SideBottomLeft, Point(    0, -187),  Point(  36,   180), .5, 48, true),

        // TargetDisplay: the targeting system
        (TargetDisplayImage,            SideBottom,         Point(-320, -183), Point(-320,   12), .5,    48, true),

        // CommandRadarDetectPaneImage: probably the info whether you are 'eyed'
        (CommandRadarDetectPaneImage,   SideTopRight,       Point( -90,  190), Point(-90,  -100), .5, 65542, true),

        // cortCommandModeInfo: the additional ship status information at the upper left corner of the map
        (cortCommandModeInfo,           SideTopLeft,        Point(  20,  185), Point(  20,  -37), .5,     2, true),
        (cortCommandModeInfoBase,       SideTopLeft,        Point(  20,  185), Point(  20,  -37), .5,     4, true),

        // CommandPane: the command bar at the F3-map
        (CommandPaneImage,              SideBottom,         Point(-135, -190), Point(-135,   40), .5,     6, false),

        // LocationImage: "current location" in cockpit mode
        (LocationImage,                 SideTopRight,       Point(-180, 185), Point(-180,  -15), .5, 0x10032, true),
        // LocationInHangarImage: "current location" in hangar (SectorName is not set correctly, so it has to be retrieved via GetSectorName(MyStation, OnEveryFrame))
        (LocationInHangarImage,         SideTopRight,       Point(-180, 185), Point(-180,  -15), .5, 0x00001, true),
        // LookingAtImage: "currently viewing" in map mode
        (LookingAtImage,                SideTopRight,       Point(-180, 185), Point(-180,  -15), .5,      4, true),

        // TurretOfImage: who's turret I'm in, for launch anim, map (both), hangar, cockpit, chase
        (TurretOfImage,                 SideTopRight,       Point(-180,  185), Point(-180,  -50),  .5, 0x10037, true),

        // RipcordCountdownImage: the ripcord countdown
        (RipcordCountdownImage,         SideCenter,         Point( -75,   15), Point( -75,   15), .5,     58, true),

        // BoardTextImage: who's turret I'm in, on the loadout screen
        (InTurretPaneImage,             SideCenter,         Point(-150,   25), Point(-150,   25),   0,    64, true),
        (BoardTextImage,                SideCenter,         Point(-362,   20), Point(-362,   20),   0,    64, true),

        // StationPane: station status indicator
        (StationPane,                   SideTopLeft,        Point(-148,   85), Point(   3,  -33),   0,    69, true),

        // EjectPodPane: the eject pod display
        (EjectPodPaneImage,             SideCenter,         Point( -86,  -87), Point( -86,  -87),  .5,    48, true),

        // DeathBannerPane: when you're dead???
        (DeathBannerPaneImage,          SideCenter,         Point(-105,   15), Point(-105,   15),  .5, 65535, true),

        // LivesImage: your lives
        (LivesImage,                    SideTopLeft,        Point(  45,  -97), Point(   40,  -97), .5, 48, true),

        // KillsImage: your kills
        (KillsImage,                    SideTopLeft,        Point(  45, -177), Point(   40, -177), .5, 48, true),

        // CountdownImage: ?????????????
        (CountdownImage,                SideTopLeft,        Point(  45, -137), Point(   40, -137), .5, 48, true),

        // LastOrderImage: the last two commands you received
        (LastOrderImage,                SideTopLeft,        Point(  50,  -7), Point(   50,  -37), .5, 53, true),

        // cortVersionInformation: the current version display of CortUI in the map-mode
        (cortVersionInformation,        SideBottomRight,    Point( -200, 12),    Point( -200,   12), 0, 6, true)

//      //backButtonPane: the back button, that allows to switch from map to hangar when in base        
//        (PaneImage(BlackPane(backButtonPane), false, true), SideBottomLeft, Point( -200,   17), Point(  20,   0), .5,     6, false)
    ];
