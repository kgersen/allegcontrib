//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace ICE {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class feddts : DataSet {
        
        private AfterburnersDataTable tableAfterburners;
        
        private AmmoDataTable tableAmmo;
        
        private AttachPointsDataTable tableAttachPoints;
        
        private ChaffDataTable tableChaff;
        
        private CivsDataTable tableCivs;
        
        private CloaksDataTable tableCloaks;
        
        private ConstantsDataTable tableConstants;
        
        private DevelopmentsDataTable tableDevelopments;
        
        private DronesDataTable tableDrones;
        
        private EffectsDataTable tableEffects;
        
        private ExpendablesDataTable tableExpendables;
        
        private GlobalAttributesDataTable tableGlobalAttributes;
        
        private MagazinesDataTable tableMagazines;
        
        private MinesDataTable tableMines;
        
        private MissilesDataTable tableMissiles;
        
        private PartsDataTable tableParts;
        
        private PartTypesDataTable tablePartTypes;
        
        private ProbesDataTable tableProbes;
        
        private ProjectilesDataTable tableProjectiles;
        
        private ShieldsDataTable tableShields;
        
        private ShipClassesDataTable tableShipClasses;
        
        private ShipTypesDataTable tableShipTypes;
        
        private StationClassesDataTable tableStationClasses;
        
        private StationTypesDataTable tableStationTypes;
        
        private TechBitsDataTable tableTechBits;
        
        private TreasureChancesDataTable tableTreasureChances;
        
        private TreasureSetsDataTable tableTreasureSets;
        
        private WeaponsDataTable tableWeapons;
        
        public feddts() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected feddts(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Afterburners"] != null)) {
                    this.Tables.Add(new AfterburnersDataTable(ds.Tables["Afterburners"]));
                }
                if ((ds.Tables["Ammo"] != null)) {
                    this.Tables.Add(new AmmoDataTable(ds.Tables["Ammo"]));
                }
                if ((ds.Tables["AttachPoints"] != null)) {
                    this.Tables.Add(new AttachPointsDataTable(ds.Tables["AttachPoints"]));
                }
                if ((ds.Tables["Chaff"] != null)) {
                    this.Tables.Add(new ChaffDataTable(ds.Tables["Chaff"]));
                }
                if ((ds.Tables["Civs"] != null)) {
                    this.Tables.Add(new CivsDataTable(ds.Tables["Civs"]));
                }
                if ((ds.Tables["Cloaks"] != null)) {
                    this.Tables.Add(new CloaksDataTable(ds.Tables["Cloaks"]));
                }
                if ((ds.Tables["Constants"] != null)) {
                    this.Tables.Add(new ConstantsDataTable(ds.Tables["Constants"]));
                }
                if ((ds.Tables["Developments"] != null)) {
                    this.Tables.Add(new DevelopmentsDataTable(ds.Tables["Developments"]));
                }
                if ((ds.Tables["Drones"] != null)) {
                    this.Tables.Add(new DronesDataTable(ds.Tables["Drones"]));
                }
                if ((ds.Tables["Effects"] != null)) {
                    this.Tables.Add(new EffectsDataTable(ds.Tables["Effects"]));
                }
                if ((ds.Tables["Expendables"] != null)) {
                    this.Tables.Add(new ExpendablesDataTable(ds.Tables["Expendables"]));
                }
                if ((ds.Tables["GlobalAttributes"] != null)) {
                    this.Tables.Add(new GlobalAttributesDataTable(ds.Tables["GlobalAttributes"]));
                }
                if ((ds.Tables["Magazines"] != null)) {
                    this.Tables.Add(new MagazinesDataTable(ds.Tables["Magazines"]));
                }
                if ((ds.Tables["Mines"] != null)) {
                    this.Tables.Add(new MinesDataTable(ds.Tables["Mines"]));
                }
                if ((ds.Tables["Missiles"] != null)) {
                    this.Tables.Add(new MissilesDataTable(ds.Tables["Missiles"]));
                }
                if ((ds.Tables["Parts"] != null)) {
                    this.Tables.Add(new PartsDataTable(ds.Tables["Parts"]));
                }
                if ((ds.Tables["PartTypes"] != null)) {
                    this.Tables.Add(new PartTypesDataTable(ds.Tables["PartTypes"]));
                }
                if ((ds.Tables["Probes"] != null)) {
                    this.Tables.Add(new ProbesDataTable(ds.Tables["Probes"]));
                }
                if ((ds.Tables["Projectiles"] != null)) {
                    this.Tables.Add(new ProjectilesDataTable(ds.Tables["Projectiles"]));
                }
                if ((ds.Tables["Shields"] != null)) {
                    this.Tables.Add(new ShieldsDataTable(ds.Tables["Shields"]));
                }
                if ((ds.Tables["ShipClasses"] != null)) {
                    this.Tables.Add(new ShipClassesDataTable(ds.Tables["ShipClasses"]));
                }
                if ((ds.Tables["ShipTypes"] != null)) {
                    this.Tables.Add(new ShipTypesDataTable(ds.Tables["ShipTypes"]));
                }
                if ((ds.Tables["StationClasses"] != null)) {
                    this.Tables.Add(new StationClassesDataTable(ds.Tables["StationClasses"]));
                }
                if ((ds.Tables["StationTypes"] != null)) {
                    this.Tables.Add(new StationTypesDataTable(ds.Tables["StationTypes"]));
                }
                if ((ds.Tables["TechBits"] != null)) {
                    this.Tables.Add(new TechBitsDataTable(ds.Tables["TechBits"]));
                }
                if ((ds.Tables["TreasureChances"] != null)) {
                    this.Tables.Add(new TreasureChancesDataTable(ds.Tables["TreasureChances"]));
                }
                if ((ds.Tables["TreasureSets"] != null)) {
                    this.Tables.Add(new TreasureSetsDataTable(ds.Tables["TreasureSets"]));
                }
                if ((ds.Tables["Weapons"] != null)) {
                    this.Tables.Add(new WeaponsDataTable(ds.Tables["Weapons"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AfterburnersDataTable Afterburners {
            get {
                return this.tableAfterburners;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AmmoDataTable Ammo {
            get {
                return this.tableAmmo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AttachPointsDataTable AttachPoints {
            get {
                return this.tableAttachPoints;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ChaffDataTable Chaff {
            get {
                return this.tableChaff;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CivsDataTable Civs {
            get {
                return this.tableCivs;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CloaksDataTable Cloaks {
            get {
                return this.tableCloaks;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConstantsDataTable Constants {
            get {
                return this.tableConstants;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DevelopmentsDataTable Developments {
            get {
                return this.tableDevelopments;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DronesDataTable Drones {
            get {
                return this.tableDrones;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EffectsDataTable Effects {
            get {
                return this.tableEffects;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExpendablesDataTable Expendables {
            get {
                return this.tableExpendables;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GlobalAttributesDataTable GlobalAttributes {
            get {
                return this.tableGlobalAttributes;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MagazinesDataTable Magazines {
            get {
                return this.tableMagazines;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MinesDataTable Mines {
            get {
                return this.tableMines;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MissilesDataTable Missiles {
            get {
                return this.tableMissiles;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PartsDataTable Parts {
            get {
                return this.tableParts;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PartTypesDataTable PartTypes {
            get {
                return this.tablePartTypes;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProbesDataTable Probes {
            get {
                return this.tableProbes;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectilesDataTable Projectiles {
            get {
                return this.tableProjectiles;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ShieldsDataTable Shields {
            get {
                return this.tableShields;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ShipClassesDataTable ShipClasses {
            get {
                return this.tableShipClasses;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ShipTypesDataTable ShipTypes {
            get {
                return this.tableShipTypes;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StationClassesDataTable StationClasses {
            get {
                return this.tableStationClasses;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StationTypesDataTable StationTypes {
            get {
                return this.tableStationTypes;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TechBitsDataTable TechBits {
            get {
                return this.tableTechBits;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TreasureChancesDataTable TreasureChances {
            get {
                return this.tableTreasureChances;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TreasureSetsDataTable TreasureSets {
            get {
                return this.tableTreasureSets;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WeaponsDataTable Weapons {
            get {
                return this.tableWeapons;
            }
        }
        
        public override DataSet Clone() {
            feddts cln = ((feddts)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Afterburners"] != null)) {
                this.Tables.Add(new AfterburnersDataTable(ds.Tables["Afterburners"]));
            }
            if ((ds.Tables["Ammo"] != null)) {
                this.Tables.Add(new AmmoDataTable(ds.Tables["Ammo"]));
            }
            if ((ds.Tables["AttachPoints"] != null)) {
                this.Tables.Add(new AttachPointsDataTable(ds.Tables["AttachPoints"]));
            }
            if ((ds.Tables["Chaff"] != null)) {
                this.Tables.Add(new ChaffDataTable(ds.Tables["Chaff"]));
            }
            if ((ds.Tables["Civs"] != null)) {
                this.Tables.Add(new CivsDataTable(ds.Tables["Civs"]));
            }
            if ((ds.Tables["Cloaks"] != null)) {
                this.Tables.Add(new CloaksDataTable(ds.Tables["Cloaks"]));
            }
            if ((ds.Tables["Constants"] != null)) {
                this.Tables.Add(new ConstantsDataTable(ds.Tables["Constants"]));
            }
            if ((ds.Tables["Developments"] != null)) {
                this.Tables.Add(new DevelopmentsDataTable(ds.Tables["Developments"]));
            }
            if ((ds.Tables["Drones"] != null)) {
                this.Tables.Add(new DronesDataTable(ds.Tables["Drones"]));
            }
            if ((ds.Tables["Effects"] != null)) {
                this.Tables.Add(new EffectsDataTable(ds.Tables["Effects"]));
            }
            if ((ds.Tables["Expendables"] != null)) {
                this.Tables.Add(new ExpendablesDataTable(ds.Tables["Expendables"]));
            }
            if ((ds.Tables["GlobalAttributes"] != null)) {
                this.Tables.Add(new GlobalAttributesDataTable(ds.Tables["GlobalAttributes"]));
            }
            if ((ds.Tables["Magazines"] != null)) {
                this.Tables.Add(new MagazinesDataTable(ds.Tables["Magazines"]));
            }
            if ((ds.Tables["Mines"] != null)) {
                this.Tables.Add(new MinesDataTable(ds.Tables["Mines"]));
            }
            if ((ds.Tables["Missiles"] != null)) {
                this.Tables.Add(new MissilesDataTable(ds.Tables["Missiles"]));
            }
            if ((ds.Tables["Parts"] != null)) {
                this.Tables.Add(new PartsDataTable(ds.Tables["Parts"]));
            }
            if ((ds.Tables["PartTypes"] != null)) {
                this.Tables.Add(new PartTypesDataTable(ds.Tables["PartTypes"]));
            }
            if ((ds.Tables["Probes"] != null)) {
                this.Tables.Add(new ProbesDataTable(ds.Tables["Probes"]));
            }
            if ((ds.Tables["Projectiles"] != null)) {
                this.Tables.Add(new ProjectilesDataTable(ds.Tables["Projectiles"]));
            }
            if ((ds.Tables["Shields"] != null)) {
                this.Tables.Add(new ShieldsDataTable(ds.Tables["Shields"]));
            }
            if ((ds.Tables["ShipClasses"] != null)) {
                this.Tables.Add(new ShipClassesDataTable(ds.Tables["ShipClasses"]));
            }
            if ((ds.Tables["ShipTypes"] != null)) {
                this.Tables.Add(new ShipTypesDataTable(ds.Tables["ShipTypes"]));
            }
            if ((ds.Tables["StationClasses"] != null)) {
                this.Tables.Add(new StationClassesDataTable(ds.Tables["StationClasses"]));
            }
            if ((ds.Tables["StationTypes"] != null)) {
                this.Tables.Add(new StationTypesDataTable(ds.Tables["StationTypes"]));
            }
            if ((ds.Tables["TechBits"] != null)) {
                this.Tables.Add(new TechBitsDataTable(ds.Tables["TechBits"]));
            }
            if ((ds.Tables["TreasureChances"] != null)) {
                this.Tables.Add(new TreasureChancesDataTable(ds.Tables["TreasureChances"]));
            }
            if ((ds.Tables["TreasureSets"] != null)) {
                this.Tables.Add(new TreasureSetsDataTable(ds.Tables["TreasureSets"]));
            }
            if ((ds.Tables["Weapons"] != null)) {
                this.Tables.Add(new WeaponsDataTable(ds.Tables["Weapons"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAfterburners = ((AfterburnersDataTable)(this.Tables["Afterburners"]));
            if ((this.tableAfterburners != null)) {
                this.tableAfterburners.InitVars();
            }
            this.tableAmmo = ((AmmoDataTable)(this.Tables["Ammo"]));
            if ((this.tableAmmo != null)) {
                this.tableAmmo.InitVars();
            }
            this.tableAttachPoints = ((AttachPointsDataTable)(this.Tables["AttachPoints"]));
            if ((this.tableAttachPoints != null)) {
                this.tableAttachPoints.InitVars();
            }
            this.tableChaff = ((ChaffDataTable)(this.Tables["Chaff"]));
            if ((this.tableChaff != null)) {
                this.tableChaff.InitVars();
            }
            this.tableCivs = ((CivsDataTable)(this.Tables["Civs"]));
            if ((this.tableCivs != null)) {
                this.tableCivs.InitVars();
            }
            this.tableCloaks = ((CloaksDataTable)(this.Tables["Cloaks"]));
            if ((this.tableCloaks != null)) {
                this.tableCloaks.InitVars();
            }
            this.tableConstants = ((ConstantsDataTable)(this.Tables["Constants"]));
            if ((this.tableConstants != null)) {
                this.tableConstants.InitVars();
            }
            this.tableDevelopments = ((DevelopmentsDataTable)(this.Tables["Developments"]));
            if ((this.tableDevelopments != null)) {
                this.tableDevelopments.InitVars();
            }
            this.tableDrones = ((DronesDataTable)(this.Tables["Drones"]));
            if ((this.tableDrones != null)) {
                this.tableDrones.InitVars();
            }
            this.tableEffects = ((EffectsDataTable)(this.Tables["Effects"]));
            if ((this.tableEffects != null)) {
                this.tableEffects.InitVars();
            }
            this.tableExpendables = ((ExpendablesDataTable)(this.Tables["Expendables"]));
            if ((this.tableExpendables != null)) {
                this.tableExpendables.InitVars();
            }
            this.tableGlobalAttributes = ((GlobalAttributesDataTable)(this.Tables["GlobalAttributes"]));
            if ((this.tableGlobalAttributes != null)) {
                this.tableGlobalAttributes.InitVars();
            }
            this.tableMagazines = ((MagazinesDataTable)(this.Tables["Magazines"]));
            if ((this.tableMagazines != null)) {
                this.tableMagazines.InitVars();
            }
            this.tableMines = ((MinesDataTable)(this.Tables["Mines"]));
            if ((this.tableMines != null)) {
                this.tableMines.InitVars();
            }
            this.tableMissiles = ((MissilesDataTable)(this.Tables["Missiles"]));
            if ((this.tableMissiles != null)) {
                this.tableMissiles.InitVars();
            }
            this.tableParts = ((PartsDataTable)(this.Tables["Parts"]));
            if ((this.tableParts != null)) {
                this.tableParts.InitVars();
            }
            this.tablePartTypes = ((PartTypesDataTable)(this.Tables["PartTypes"]));
            if ((this.tablePartTypes != null)) {
                this.tablePartTypes.InitVars();
            }
            this.tableProbes = ((ProbesDataTable)(this.Tables["Probes"]));
            if ((this.tableProbes != null)) {
                this.tableProbes.InitVars();
            }
            this.tableProjectiles = ((ProjectilesDataTable)(this.Tables["Projectiles"]));
            if ((this.tableProjectiles != null)) {
                this.tableProjectiles.InitVars();
            }
            this.tableShields = ((ShieldsDataTable)(this.Tables["Shields"]));
            if ((this.tableShields != null)) {
                this.tableShields.InitVars();
            }
            this.tableShipClasses = ((ShipClassesDataTable)(this.Tables["ShipClasses"]));
            if ((this.tableShipClasses != null)) {
                this.tableShipClasses.InitVars();
            }
            this.tableShipTypes = ((ShipTypesDataTable)(this.Tables["ShipTypes"]));
            if ((this.tableShipTypes != null)) {
                this.tableShipTypes.InitVars();
            }
            this.tableStationClasses = ((StationClassesDataTable)(this.Tables["StationClasses"]));
            if ((this.tableStationClasses != null)) {
                this.tableStationClasses.InitVars();
            }
            this.tableStationTypes = ((StationTypesDataTable)(this.Tables["StationTypes"]));
            if ((this.tableStationTypes != null)) {
                this.tableStationTypes.InitVars();
            }
            this.tableTechBits = ((TechBitsDataTable)(this.Tables["TechBits"]));
            if ((this.tableTechBits != null)) {
                this.tableTechBits.InitVars();
            }
            this.tableTreasureChances = ((TreasureChancesDataTable)(this.Tables["TreasureChances"]));
            if ((this.tableTreasureChances != null)) {
                this.tableTreasureChances.InitVars();
            }
            this.tableTreasureSets = ((TreasureSetsDataTable)(this.Tables["TreasureSets"]));
            if ((this.tableTreasureSets != null)) {
                this.tableTreasureSets.InitVars();
            }
            this.tableWeapons = ((WeaponsDataTable)(this.Tables["Weapons"]));
            if ((this.tableWeapons != null)) {
                this.tableWeapons.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "feddts";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/feddts.xsd";
            this.Locale = new System.Globalization.CultureInfo("fr-FR");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAfterburners = new AfterburnersDataTable();
            this.Tables.Add(this.tableAfterburners);
            this.tableAmmo = new AmmoDataTable();
            this.Tables.Add(this.tableAmmo);
            this.tableAttachPoints = new AttachPointsDataTable();
            this.Tables.Add(this.tableAttachPoints);
            this.tableChaff = new ChaffDataTable();
            this.Tables.Add(this.tableChaff);
            this.tableCivs = new CivsDataTable();
            this.Tables.Add(this.tableCivs);
            this.tableCloaks = new CloaksDataTable();
            this.Tables.Add(this.tableCloaks);
            this.tableConstants = new ConstantsDataTable();
            this.Tables.Add(this.tableConstants);
            this.tableDevelopments = new DevelopmentsDataTable();
            this.Tables.Add(this.tableDevelopments);
            this.tableDrones = new DronesDataTable();
            this.Tables.Add(this.tableDrones);
            this.tableEffects = new EffectsDataTable();
            this.Tables.Add(this.tableEffects);
            this.tableExpendables = new ExpendablesDataTable();
            this.Tables.Add(this.tableExpendables);
            this.tableGlobalAttributes = new GlobalAttributesDataTable();
            this.Tables.Add(this.tableGlobalAttributes);
            this.tableMagazines = new MagazinesDataTable();
            this.Tables.Add(this.tableMagazines);
            this.tableMines = new MinesDataTable();
            this.Tables.Add(this.tableMines);
            this.tableMissiles = new MissilesDataTable();
            this.Tables.Add(this.tableMissiles);
            this.tableParts = new PartsDataTable();
            this.Tables.Add(this.tableParts);
            this.tablePartTypes = new PartTypesDataTable();
            this.Tables.Add(this.tablePartTypes);
            this.tableProbes = new ProbesDataTable();
            this.Tables.Add(this.tableProbes);
            this.tableProjectiles = new ProjectilesDataTable();
            this.Tables.Add(this.tableProjectiles);
            this.tableShields = new ShieldsDataTable();
            this.Tables.Add(this.tableShields);
            this.tableShipClasses = new ShipClassesDataTable();
            this.Tables.Add(this.tableShipClasses);
            this.tableShipTypes = new ShipTypesDataTable();
            this.Tables.Add(this.tableShipTypes);
            this.tableStationClasses = new StationClassesDataTable();
            this.Tables.Add(this.tableStationClasses);
            this.tableStationTypes = new StationTypesDataTable();
            this.Tables.Add(this.tableStationTypes);
            this.tableTechBits = new TechBitsDataTable();
            this.Tables.Add(this.tableTechBits);
            this.tableTreasureChances = new TreasureChancesDataTable();
            this.Tables.Add(this.tableTreasureChances);
            this.tableTreasureSets = new TreasureSetsDataTable();
            this.Tables.Add(this.tableTreasureSets);
            this.tableWeapons = new WeaponsDataTable();
            this.Tables.Add(this.tableWeapons);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("PartsAfterburners", new DataColumn[] {
                        this.tableParts.PartIDColumn}, new DataColumn[] {
                        this.tableAfterburners.PartIDColumn});
            this.tableAfterburners.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("PartsAmmo", new DataColumn[] {
                        this.tableParts.PartIDColumn}, new DataColumn[] {
                        this.tableAmmo.PartIDColumn});
            this.tableAmmo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("GlobalInDevel", new DataColumn[] {
                        this.tableGlobalAttributes.GlobalAttributeIDColumn}, new DataColumn[] {
                        this.tableDevelopments.GlobalAttributeIDColumn});
            this.tableDevelopments.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProjInWeapon", new DataColumn[] {
                        this.tableProjectiles.ProjectileIDColumn}, new DataColumn[] {
                        this.tableWeapons.ProjectileID1Column});
            this.tableWeapons.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
        }
        
        private bool ShouldSerializeAfterburners() {
            return false;
        }
        
        private bool ShouldSerializeAmmo() {
            return false;
        }
        
        private bool ShouldSerializeAttachPoints() {
            return false;
        }
        
        private bool ShouldSerializeChaff() {
            return false;
        }
        
        private bool ShouldSerializeCivs() {
            return false;
        }
        
        private bool ShouldSerializeCloaks() {
            return false;
        }
        
        private bool ShouldSerializeConstants() {
            return false;
        }
        
        private bool ShouldSerializeDevelopments() {
            return false;
        }
        
        private bool ShouldSerializeDrones() {
            return false;
        }
        
        private bool ShouldSerializeEffects() {
            return false;
        }
        
        private bool ShouldSerializeExpendables() {
            return false;
        }
        
        private bool ShouldSerializeGlobalAttributes() {
            return false;
        }
        
        private bool ShouldSerializeMagazines() {
            return false;
        }
        
        private bool ShouldSerializeMines() {
            return false;
        }
        
        private bool ShouldSerializeMissiles() {
            return false;
        }
        
        private bool ShouldSerializeParts() {
            return false;
        }
        
        private bool ShouldSerializePartTypes() {
            return false;
        }
        
        private bool ShouldSerializeProbes() {
            return false;
        }
        
        private bool ShouldSerializeProjectiles() {
            return false;
        }
        
        private bool ShouldSerializeShields() {
            return false;
        }
        
        private bool ShouldSerializeShipClasses() {
            return false;
        }
        
        private bool ShouldSerializeShipTypes() {
            return false;
        }
        
        private bool ShouldSerializeStationClasses() {
            return false;
        }
        
        private bool ShouldSerializeStationTypes() {
            return false;
        }
        
        private bool ShouldSerializeTechBits() {
            return false;
        }
        
        private bool ShouldSerializeTreasureChances() {
            return false;
        }
        
        private bool ShouldSerializeTreasureSets() {
            return false;
        }
        
        private bool ShouldSerializeWeapons() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AfterburnersRowChangeEventHandler(object sender, AfterburnersRowChangeEvent e);
        
        public delegate void AmmoRowChangeEventHandler(object sender, AmmoRowChangeEvent e);
        
        public delegate void AttachPointsRowChangeEventHandler(object sender, AttachPointsRowChangeEvent e);
        
        public delegate void ChaffRowChangeEventHandler(object sender, ChaffRowChangeEvent e);
        
        public delegate void CivsRowChangeEventHandler(object sender, CivsRowChangeEvent e);
        
        public delegate void CloaksRowChangeEventHandler(object sender, CloaksRowChangeEvent e);
        
        public delegate void ConstantsRowChangeEventHandler(object sender, ConstantsRowChangeEvent e);
        
        public delegate void DevelopmentsRowChangeEventHandler(object sender, DevelopmentsRowChangeEvent e);
        
        public delegate void DronesRowChangeEventHandler(object sender, DronesRowChangeEvent e);
        
        public delegate void EffectsRowChangeEventHandler(object sender, EffectsRowChangeEvent e);
        
        public delegate void ExpendablesRowChangeEventHandler(object sender, ExpendablesRowChangeEvent e);
        
        public delegate void GlobalAttributesRowChangeEventHandler(object sender, GlobalAttributesRowChangeEvent e);
        
        public delegate void MagazinesRowChangeEventHandler(object sender, MagazinesRowChangeEvent e);
        
        public delegate void MinesRowChangeEventHandler(object sender, MinesRowChangeEvent e);
        
        public delegate void MissilesRowChangeEventHandler(object sender, MissilesRowChangeEvent e);
        
        public delegate void PartsRowChangeEventHandler(object sender, PartsRowChangeEvent e);
        
        public delegate void PartTypesRowChangeEventHandler(object sender, PartTypesRowChangeEvent e);
        
        public delegate void ProbesRowChangeEventHandler(object sender, ProbesRowChangeEvent e);
        
        public delegate void ProjectilesRowChangeEventHandler(object sender, ProjectilesRowChangeEvent e);
        
        public delegate void ShieldsRowChangeEventHandler(object sender, ShieldsRowChangeEvent e);
        
        public delegate void ShipClassesRowChangeEventHandler(object sender, ShipClassesRowChangeEvent e);
        
        public delegate void ShipTypesRowChangeEventHandler(object sender, ShipTypesRowChangeEvent e);
        
        public delegate void StationClassesRowChangeEventHandler(object sender, StationClassesRowChangeEvent e);
        
        public delegate void StationTypesRowChangeEventHandler(object sender, StationTypesRowChangeEvent e);
        
        public delegate void TechBitsRowChangeEventHandler(object sender, TechBitsRowChangeEvent e);
        
        public delegate void TreasureChancesRowChangeEventHandler(object sender, TreasureChancesRowChangeEvent e);
        
        public delegate void TreasureSetsRowChangeEventHandler(object sender, TreasureSetsRowChangeEvent e);
        
        public delegate void WeaponsRowChangeEventHandler(object sender, WeaponsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AfterburnersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPartID;
            
            private DataColumn columnBurnRate;
            
            private DataColumn columnMaxThrust;
            
            private DataColumn columnHullThrustMultiplier;
            
            private DataColumn columnrateOn;
            
            private DataColumn columnrateOff;
            
            private DataColumn columnInteriorSound;
            
            private DataColumn columnExteriorSound;
            
            internal AfterburnersDataTable() : 
                    base("Afterburners") {
                this.InitClass();
            }
            
            internal AfterburnersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PartIDColumn {
                get {
                    return this.columnPartID;
                }
            }
            
            internal DataColumn BurnRateColumn {
                get {
                    return this.columnBurnRate;
                }
            }
            
            internal DataColumn MaxThrustColumn {
                get {
                    return this.columnMaxThrust;
                }
            }
            
            internal DataColumn HullThrustMultiplierColumn {
                get {
                    return this.columnHullThrustMultiplier;
                }
            }
            
            internal DataColumn rateOnColumn {
                get {
                    return this.columnrateOn;
                }
            }
            
            internal DataColumn rateOffColumn {
                get {
                    return this.columnrateOff;
                }
            }
            
            internal DataColumn InteriorSoundColumn {
                get {
                    return this.columnInteriorSound;
                }
            }
            
            internal DataColumn ExteriorSoundColumn {
                get {
                    return this.columnExteriorSound;
                }
            }
            
            public AfterburnersRow this[int index] {
                get {
                    return ((AfterburnersRow)(this.Rows[index]));
                }
            }
            
            public event AfterburnersRowChangeEventHandler AfterburnersRowChanged;
            
            public event AfterburnersRowChangeEventHandler AfterburnersRowChanging;
            
            public event AfterburnersRowChangeEventHandler AfterburnersRowDeleted;
            
            public event AfterburnersRowChangeEventHandler AfterburnersRowDeleting;
            
            public void AddAfterburnersRow(AfterburnersRow row) {
                this.Rows.Add(row);
            }
            
            public AfterburnersRow AddAfterburnersRow(short PartID, System.Single BurnRate, System.Single MaxThrust, System.Single HullThrustMultiplier, System.Single rateOn, System.Single rateOff, short InteriorSound, short ExteriorSound) {
                AfterburnersRow rowAfterburnersRow = ((AfterburnersRow)(this.NewRow()));
                rowAfterburnersRow.ItemArray = new object[] {
                        PartID,
                        BurnRate,
                        MaxThrust,
                        HullThrustMultiplier,
                        rateOn,
                        rateOff,
                        InteriorSound,
                        ExteriorSound};
                this.Rows.Add(rowAfterburnersRow);
                return rowAfterburnersRow;
            }
            
            public AfterburnersRow FindByPartID(short PartID) {
                return ((AfterburnersRow)(this.Rows.Find(new object[] {
                            PartID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AfterburnersDataTable cln = ((AfterburnersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AfterburnersDataTable();
            }
            
            internal void InitVars() {
                this.columnPartID = this.Columns["PartID"];
                this.columnBurnRate = this.Columns["BurnRate"];
                this.columnMaxThrust = this.Columns["MaxThrust"];
                this.columnHullThrustMultiplier = this.Columns["HullThrustMultiplier"];
                this.columnrateOn = this.Columns["rateOn"];
                this.columnrateOff = this.Columns["rateOff"];
                this.columnInteriorSound = this.Columns["InteriorSound"];
                this.columnExteriorSound = this.Columns["ExteriorSound"];
            }
            
            private void InitClass() {
                this.columnPartID = new DataColumn("PartID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartID);
                this.columnBurnRate = new DataColumn("BurnRate", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBurnRate);
                this.columnMaxThrust = new DataColumn("MaxThrust", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxThrust);
                this.columnHullThrustMultiplier = new DataColumn("HullThrustMultiplier", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHullThrustMultiplier);
                this.columnrateOn = new DataColumn("rateOn", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrateOn);
                this.columnrateOff = new DataColumn("rateOff", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrateOff);
                this.columnInteriorSound = new DataColumn("InteriorSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInteriorSound);
                this.columnExteriorSound = new DataColumn("ExteriorSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExteriorSound);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPartID}, true));
                this.columnPartID.AllowDBNull = false;
                this.columnPartID.Unique = true;
                this.columnBurnRate.AllowDBNull = false;
                this.columnMaxThrust.AllowDBNull = false;
                this.columnHullThrustMultiplier.AllowDBNull = false;
                this.columnrateOn.AllowDBNull = false;
                this.columnrateOff.AllowDBNull = false;
                this.columnInteriorSound.AllowDBNull = false;
                this.columnExteriorSound.AllowDBNull = false;
            }
            
            public AfterburnersRow NewAfterburnersRow() {
                return ((AfterburnersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AfterburnersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AfterburnersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AfterburnersRowChanged != null)) {
                    this.AfterburnersRowChanged(this, new AfterburnersRowChangeEvent(((AfterburnersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AfterburnersRowChanging != null)) {
                    this.AfterburnersRowChanging(this, new AfterburnersRowChangeEvent(((AfterburnersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AfterburnersRowDeleted != null)) {
                    this.AfterburnersRowDeleted(this, new AfterburnersRowChangeEvent(((AfterburnersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AfterburnersRowDeleting != null)) {
                    this.AfterburnersRowDeleting(this, new AfterburnersRowChangeEvent(((AfterburnersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAfterburnersRow(AfterburnersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AfterburnersRow : DataRow {
            
            private AfterburnersDataTable tableAfterburners;
            
            internal AfterburnersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAfterburners = ((AfterburnersDataTable)(this.Table));
            }
            
            public short PartID {
                get {
                    return ((short)(this[this.tableAfterburners.PartIDColumn]));
                }
                set {
                    this[this.tableAfterburners.PartIDColumn] = value;
                }
            }
            
            public System.Single BurnRate {
                get {
                    return ((System.Single)(this[this.tableAfterburners.BurnRateColumn]));
                }
                set {
                    this[this.tableAfterburners.BurnRateColumn] = value;
                }
            }
            
            public System.Single MaxThrust {
                get {
                    return ((System.Single)(this[this.tableAfterburners.MaxThrustColumn]));
                }
                set {
                    this[this.tableAfterburners.MaxThrustColumn] = value;
                }
            }
            
            public System.Single HullThrustMultiplier {
                get {
                    return ((System.Single)(this[this.tableAfterburners.HullThrustMultiplierColumn]));
                }
                set {
                    this[this.tableAfterburners.HullThrustMultiplierColumn] = value;
                }
            }
            
            public System.Single rateOn {
                get {
                    return ((System.Single)(this[this.tableAfterburners.rateOnColumn]));
                }
                set {
                    this[this.tableAfterburners.rateOnColumn] = value;
                }
            }
            
            public System.Single rateOff {
                get {
                    return ((System.Single)(this[this.tableAfterburners.rateOffColumn]));
                }
                set {
                    this[this.tableAfterburners.rateOffColumn] = value;
                }
            }
            
            public short InteriorSound {
                get {
                    return ((short)(this[this.tableAfterburners.InteriorSoundColumn]));
                }
                set {
                    this[this.tableAfterburners.InteriorSoundColumn] = value;
                }
            }
            
            public short ExteriorSound {
                get {
                    return ((short)(this[this.tableAfterburners.ExteriorSoundColumn]));
                }
                set {
                    this[this.tableAfterburners.ExteriorSoundColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AfterburnersRowChangeEvent : EventArgs {
            
            private AfterburnersRow eventRow;
            
            private DataRowAction eventAction;
            
            public AfterburnersRowChangeEvent(AfterburnersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AfterburnersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AmmoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPartID;
            
            private DataColumn columnQty;
            
            private DataColumn columnAmmoType;
            
            internal AmmoDataTable() : 
                    base("Ammo") {
                this.InitClass();
            }
            
            internal AmmoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PartIDColumn {
                get {
                    return this.columnPartID;
                }
            }
            
            internal DataColumn QtyColumn {
                get {
                    return this.columnQty;
                }
            }
            
            internal DataColumn AmmoTypeColumn {
                get {
                    return this.columnAmmoType;
                }
            }
            
            public AmmoRow this[int index] {
                get {
                    return ((AmmoRow)(this.Rows[index]));
                }
            }
            
            public event AmmoRowChangeEventHandler AmmoRowChanged;
            
            public event AmmoRowChangeEventHandler AmmoRowChanging;
            
            public event AmmoRowChangeEventHandler AmmoRowDeleted;
            
            public event AmmoRowChangeEventHandler AmmoRowDeleting;
            
            public void AddAmmoRow(AmmoRow row) {
                this.Rows.Add(row);
            }
            
            public AmmoRow AddAmmoRow(short PartID, short Qty, System.Byte AmmoType) {
                AmmoRow rowAmmoRow = ((AmmoRow)(this.NewRow()));
                rowAmmoRow.ItemArray = new object[] {
                        PartID,
                        Qty,
                        AmmoType};
                this.Rows.Add(rowAmmoRow);
                return rowAmmoRow;
            }
            
            public AmmoRow FindByPartID(short PartID) {
                return ((AmmoRow)(this.Rows.Find(new object[] {
                            PartID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AmmoDataTable cln = ((AmmoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AmmoDataTable();
            }
            
            internal void InitVars() {
                this.columnPartID = this.Columns["PartID"];
                this.columnQty = this.Columns["Qty"];
                this.columnAmmoType = this.Columns["AmmoType"];
            }
            
            private void InitClass() {
                this.columnPartID = new DataColumn("PartID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartID);
                this.columnQty = new DataColumn("Qty", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQty);
                this.columnAmmoType = new DataColumn("AmmoType", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmmoType);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPartID}, true));
                this.columnPartID.AllowDBNull = false;
                this.columnPartID.Unique = true;
                this.columnQty.AllowDBNull = false;
                this.columnAmmoType.AllowDBNull = false;
            }
            
            public AmmoRow NewAmmoRow() {
                return ((AmmoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AmmoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AmmoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AmmoRowChanged != null)) {
                    this.AmmoRowChanged(this, new AmmoRowChangeEvent(((AmmoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AmmoRowChanging != null)) {
                    this.AmmoRowChanging(this, new AmmoRowChangeEvent(((AmmoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AmmoRowDeleted != null)) {
                    this.AmmoRowDeleted(this, new AmmoRowChangeEvent(((AmmoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AmmoRowDeleting != null)) {
                    this.AmmoRowDeleting(this, new AmmoRowChangeEvent(((AmmoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAmmoRow(AmmoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AmmoRow : DataRow {
            
            private AmmoDataTable tableAmmo;
            
            internal AmmoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAmmo = ((AmmoDataTable)(this.Table));
            }
            
            public short PartID {
                get {
                    return ((short)(this[this.tableAmmo.PartIDColumn]));
                }
                set {
                    this[this.tableAmmo.PartIDColumn] = value;
                }
            }
            
            public short Qty {
                get {
                    return ((short)(this[this.tableAmmo.QtyColumn]));
                }
                set {
                    this[this.tableAmmo.QtyColumn] = value;
                }
            }
            
            public System.Byte AmmoType {
                get {
                    return ((System.Byte)(this[this.tableAmmo.AmmoTypeColumn]));
                }
                set {
                    this[this.tableAmmo.AmmoTypeColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AmmoRowChangeEvent : EventArgs {
            
            private AmmoRow eventRow;
            
            private DataRowAction eventAction;
            
            public AmmoRowChangeEvent(AmmoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AmmoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AttachPointsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnShipTypeID;
            
            private DataColumn columnAttachPointID;
            
            private DataColumn columnFrameName;
            
            private DataColumn columnPartTypeID;
            
            private DataColumn columnFieldOfFire;
            
            private DataColumn columnPartMask;
            
            private DataColumn columnGunnerHUD;
            
            private DataColumn columnInteriorSound;
            
            private DataColumn columnTurnSound;
            
            private DataColumn columnLocationAbreviation;
            
            internal AttachPointsDataTable() : 
                    base("AttachPoints") {
                this.InitClass();
            }
            
            internal AttachPointsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ShipTypeIDColumn {
                get {
                    return this.columnShipTypeID;
                }
            }
            
            internal DataColumn AttachPointIDColumn {
                get {
                    return this.columnAttachPointID;
                }
            }
            
            internal DataColumn FrameNameColumn {
                get {
                    return this.columnFrameName;
                }
            }
            
            internal DataColumn PartTypeIDColumn {
                get {
                    return this.columnPartTypeID;
                }
            }
            
            internal DataColumn FieldOfFireColumn {
                get {
                    return this.columnFieldOfFire;
                }
            }
            
            internal DataColumn PartMaskColumn {
                get {
                    return this.columnPartMask;
                }
            }
            
            internal DataColumn GunnerHUDColumn {
                get {
                    return this.columnGunnerHUD;
                }
            }
            
            internal DataColumn InteriorSoundColumn {
                get {
                    return this.columnInteriorSound;
                }
            }
            
            internal DataColumn TurnSoundColumn {
                get {
                    return this.columnTurnSound;
                }
            }
            
            internal DataColumn LocationAbreviationColumn {
                get {
                    return this.columnLocationAbreviation;
                }
            }
            
            public AttachPointsRow this[int index] {
                get {
                    return ((AttachPointsRow)(this.Rows[index]));
                }
            }
            
            public event AttachPointsRowChangeEventHandler AttachPointsRowChanged;
            
            public event AttachPointsRowChangeEventHandler AttachPointsRowChanging;
            
            public event AttachPointsRowChangeEventHandler AttachPointsRowDeleted;
            
            public event AttachPointsRowChangeEventHandler AttachPointsRowDeleting;
            
            public void AddAttachPointsRow(AttachPointsRow row) {
                this.Rows.Add(row);
            }
            
            public AttachPointsRow AddAttachPointsRow(short ShipTypeID, short AttachPointID, string FrameName, System.Byte PartTypeID, short FieldOfFire, short PartMask, string GunnerHUD, short InteriorSound, short TurnSound, string LocationAbreviation) {
                AttachPointsRow rowAttachPointsRow = ((AttachPointsRow)(this.NewRow()));
                rowAttachPointsRow.ItemArray = new object[] {
                        ShipTypeID,
                        AttachPointID,
                        FrameName,
                        PartTypeID,
                        FieldOfFire,
                        PartMask,
                        GunnerHUD,
                        InteriorSound,
                        TurnSound,
                        LocationAbreviation};
                this.Rows.Add(rowAttachPointsRow);
                return rowAttachPointsRow;
            }
            
            public AttachPointsRow FindByShipTypeIDAttachPointID(short ShipTypeID, short AttachPointID) {
                return ((AttachPointsRow)(this.Rows.Find(new object[] {
                            ShipTypeID,
                            AttachPointID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AttachPointsDataTable cln = ((AttachPointsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AttachPointsDataTable();
            }
            
            internal void InitVars() {
                this.columnShipTypeID = this.Columns["ShipTypeID"];
                this.columnAttachPointID = this.Columns["AttachPointID"];
                this.columnFrameName = this.Columns["FrameName"];
                this.columnPartTypeID = this.Columns["PartTypeID"];
                this.columnFieldOfFire = this.Columns["FieldOfFire"];
                this.columnPartMask = this.Columns["PartMask"];
                this.columnGunnerHUD = this.Columns["GunnerHUD"];
                this.columnInteriorSound = this.Columns["InteriorSound"];
                this.columnTurnSound = this.Columns["TurnSound"];
                this.columnLocationAbreviation = this.Columns["LocationAbreviation"];
            }
            
            private void InitClass() {
                this.columnShipTypeID = new DataColumn("ShipTypeID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipTypeID);
                this.columnAttachPointID = new DataColumn("AttachPointID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAttachPointID);
                this.columnFrameName = new DataColumn("FrameName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFrameName);
                this.columnPartTypeID = new DataColumn("PartTypeID", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartTypeID);
                this.columnFieldOfFire = new DataColumn("FieldOfFire", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFieldOfFire);
                this.columnPartMask = new DataColumn("PartMask", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartMask);
                this.columnGunnerHUD = new DataColumn("GunnerHUD", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGunnerHUD);
                this.columnInteriorSound = new DataColumn("InteriorSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInteriorSound);
                this.columnTurnSound = new DataColumn("TurnSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTurnSound);
                this.columnLocationAbreviation = new DataColumn("LocationAbreviation", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationAbreviation);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnShipTypeID,
                                this.columnAttachPointID}, true));
                this.columnShipTypeID.AllowDBNull = false;
                this.columnAttachPointID.AllowDBNull = false;
                this.columnFrameName.AllowDBNull = false;
                this.columnPartTypeID.AllowDBNull = false;
                this.columnFieldOfFire.AllowDBNull = false;
                this.columnPartMask.AllowDBNull = false;
                this.columnGunnerHUD.AllowDBNull = false;
                this.columnInteriorSound.AllowDBNull = false;
                this.columnTurnSound.AllowDBNull = false;
                this.columnLocationAbreviation.AllowDBNull = false;
            }
            
            public AttachPointsRow NewAttachPointsRow() {
                return ((AttachPointsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AttachPointsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AttachPointsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AttachPointsRowChanged != null)) {
                    this.AttachPointsRowChanged(this, new AttachPointsRowChangeEvent(((AttachPointsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AttachPointsRowChanging != null)) {
                    this.AttachPointsRowChanging(this, new AttachPointsRowChangeEvent(((AttachPointsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AttachPointsRowDeleted != null)) {
                    this.AttachPointsRowDeleted(this, new AttachPointsRowChangeEvent(((AttachPointsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AttachPointsRowDeleting != null)) {
                    this.AttachPointsRowDeleting(this, new AttachPointsRowChangeEvent(((AttachPointsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAttachPointsRow(AttachPointsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AttachPointsRow : DataRow {
            
            private AttachPointsDataTable tableAttachPoints;
            
            internal AttachPointsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAttachPoints = ((AttachPointsDataTable)(this.Table));
            }
            
            public short ShipTypeID {
                get {
                    return ((short)(this[this.tableAttachPoints.ShipTypeIDColumn]));
                }
                set {
                    this[this.tableAttachPoints.ShipTypeIDColumn] = value;
                }
            }
            
            public short AttachPointID {
                get {
                    return ((short)(this[this.tableAttachPoints.AttachPointIDColumn]));
                }
                set {
                    this[this.tableAttachPoints.AttachPointIDColumn] = value;
                }
            }
            
            public string FrameName {
                get {
                    return ((string)(this[this.tableAttachPoints.FrameNameColumn]));
                }
                set {
                    this[this.tableAttachPoints.FrameNameColumn] = value;
                }
            }
            
            public System.Byte PartTypeID {
                get {
                    return ((System.Byte)(this[this.tableAttachPoints.PartTypeIDColumn]));
                }
                set {
                    this[this.tableAttachPoints.PartTypeIDColumn] = value;
                }
            }
            
            public short FieldOfFire {
                get {
                    return ((short)(this[this.tableAttachPoints.FieldOfFireColumn]));
                }
                set {
                    this[this.tableAttachPoints.FieldOfFireColumn] = value;
                }
            }
            
            public short PartMask {
                get {
                    return ((short)(this[this.tableAttachPoints.PartMaskColumn]));
                }
                set {
                    this[this.tableAttachPoints.PartMaskColumn] = value;
                }
            }
            
            public string GunnerHUD {
                get {
                    return ((string)(this[this.tableAttachPoints.GunnerHUDColumn]));
                }
                set {
                    this[this.tableAttachPoints.GunnerHUDColumn] = value;
                }
            }
            
            public short InteriorSound {
                get {
                    return ((short)(this[this.tableAttachPoints.InteriorSoundColumn]));
                }
                set {
                    this[this.tableAttachPoints.InteriorSoundColumn] = value;
                }
            }
            
            public short TurnSound {
                get {
                    return ((short)(this[this.tableAttachPoints.TurnSoundColumn]));
                }
                set {
                    this[this.tableAttachPoints.TurnSoundColumn] = value;
                }
            }
            
            public string LocationAbreviation {
                get {
                    return ((string)(this[this.tableAttachPoints.LocationAbreviationColumn]));
                }
                set {
                    this[this.tableAttachPoints.LocationAbreviationColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AttachPointsRowChangeEvent : EventArgs {
            
            private AttachPointsRow eventRow;
            
            private DataRowAction eventAction;
            
            public AttachPointsRowChangeEvent(AttachPointsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AttachPointsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ChaffDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnExpendableID;
            
            private DataColumn columnStrength;
            
            internal ChaffDataTable() : 
                    base("Chaff") {
                this.InitClass();
            }
            
            internal ChaffDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ExpendableIDColumn {
                get {
                    return this.columnExpendableID;
                }
            }
            
            internal DataColumn StrengthColumn {
                get {
                    return this.columnStrength;
                }
            }
            
            public ChaffRow this[int index] {
                get {
                    return ((ChaffRow)(this.Rows[index]));
                }
            }
            
            public event ChaffRowChangeEventHandler ChaffRowChanged;
            
            public event ChaffRowChangeEventHandler ChaffRowChanging;
            
            public event ChaffRowChangeEventHandler ChaffRowDeleted;
            
            public event ChaffRowChangeEventHandler ChaffRowDeleting;
            
            public void AddChaffRow(ChaffRow row) {
                this.Rows.Add(row);
            }
            
            public ChaffRow AddChaffRow(short ExpendableID, System.Single Strength) {
                ChaffRow rowChaffRow = ((ChaffRow)(this.NewRow()));
                rowChaffRow.ItemArray = new object[] {
                        ExpendableID,
                        Strength};
                this.Rows.Add(rowChaffRow);
                return rowChaffRow;
            }
            
            public ChaffRow FindByExpendableID(short ExpendableID) {
                return ((ChaffRow)(this.Rows.Find(new object[] {
                            ExpendableID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ChaffDataTable cln = ((ChaffDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ChaffDataTable();
            }
            
            internal void InitVars() {
                this.columnExpendableID = this.Columns["ExpendableID"];
                this.columnStrength = this.Columns["Strength"];
            }
            
            private void InitClass() {
                this.columnExpendableID = new DataColumn("ExpendableID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpendableID);
                this.columnStrength = new DataColumn("Strength", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStrength);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnExpendableID}, true));
                this.columnExpendableID.AllowDBNull = false;
                this.columnExpendableID.Unique = true;
                this.columnStrength.AllowDBNull = false;
            }
            
            public ChaffRow NewChaffRow() {
                return ((ChaffRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ChaffRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ChaffRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ChaffRowChanged != null)) {
                    this.ChaffRowChanged(this, new ChaffRowChangeEvent(((ChaffRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ChaffRowChanging != null)) {
                    this.ChaffRowChanging(this, new ChaffRowChangeEvent(((ChaffRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ChaffRowDeleted != null)) {
                    this.ChaffRowDeleted(this, new ChaffRowChangeEvent(((ChaffRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ChaffRowDeleting != null)) {
                    this.ChaffRowDeleting(this, new ChaffRowChangeEvent(((ChaffRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveChaffRow(ChaffRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ChaffRow : DataRow {
            
            private ChaffDataTable tableChaff;
            
            internal ChaffRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableChaff = ((ChaffDataTable)(this.Table));
            }
            
            public short ExpendableID {
                get {
                    return ((short)(this[this.tableChaff.ExpendableIDColumn]));
                }
                set {
                    this[this.tableChaff.ExpendableIDColumn] = value;
                }
            }
            
            public System.Single Strength {
                get {
                    return ((System.Single)(this[this.tableChaff.StrengthColumn]));
                }
                set {
                    this[this.tableChaff.StrengthColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ChaffRowChangeEvent : EventArgs {
            
            private ChaffRow eventRow;
            
            private DataRowAction eventAction;
            
            public ChaffRowChangeEvent(ChaffRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ChaffRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CivsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCivID;
            
            private DataColumn columnName;
            
            private DataColumn columnDescription;
            
            private DataColumn columnEscapePodShipTypeID;
            
            private DataColumn columnTechBitsCiv;
            
            private DataColumn columnStartingGlobalAttributeID;
            
            private DataColumn columnInitialStationTypeID;
            
            private DataColumn columnIconName;
            
            private DataColumn columnStationHUD;
            
            private DataColumn columnPreferredPartID15;
            
            private DataColumn columnPreferredPartID14;
            
            private DataColumn columnPreferredPartID13;
            
            private DataColumn columnPreferredPartID12;
            
            private DataColumn columnPreferredPartID11;
            
            private DataColumn columnPreferredPartID10;
            
            private DataColumn columnPreferredPartID9;
            
            private DataColumn columnPreferredPartID8;
            
            private DataColumn columnPreferredPartID7;
            
            private DataColumn columnPreferredPartID6;
            
            private DataColumn columnPreferredPartID5;
            
            private DataColumn columnPreferredPartID4;
            
            private DataColumn columnPreferredPartID3;
            
            private DataColumn columnPreferredPartID2;
            
            private DataColumn columnPreferredPartID1;
            
            private DataColumn columnTechBitsCivNoDev;
            
            private DataColumn columnBonusMoney;
            
            private DataColumn columnIncomeMoney;
            
            internal CivsDataTable() : 
                    base("Civs") {
                this.InitClass();
            }
            
            internal CivsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CivIDColumn {
                get {
                    return this.columnCivID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn EscapePodShipTypeIDColumn {
                get {
                    return this.columnEscapePodShipTypeID;
                }
            }
            
            internal DataColumn TechBitsCivColumn {
                get {
                    return this.columnTechBitsCiv;
                }
            }
            
            internal DataColumn StartingGlobalAttributeIDColumn {
                get {
                    return this.columnStartingGlobalAttributeID;
                }
            }
            
            internal DataColumn InitialStationTypeIDColumn {
                get {
                    return this.columnInitialStationTypeID;
                }
            }
            
            internal DataColumn IconNameColumn {
                get {
                    return this.columnIconName;
                }
            }
            
            internal DataColumn StationHUDColumn {
                get {
                    return this.columnStationHUD;
                }
            }
            
            internal DataColumn PreferredPartID15Column {
                get {
                    return this.columnPreferredPartID15;
                }
            }
            
            internal DataColumn PreferredPartID14Column {
                get {
                    return this.columnPreferredPartID14;
                }
            }
            
            internal DataColumn PreferredPartID13Column {
                get {
                    return this.columnPreferredPartID13;
                }
            }
            
            internal DataColumn PreferredPartID12Column {
                get {
                    return this.columnPreferredPartID12;
                }
            }
            
            internal DataColumn PreferredPartID11Column {
                get {
                    return this.columnPreferredPartID11;
                }
            }
            
            internal DataColumn PreferredPartID10Column {
                get {
                    return this.columnPreferredPartID10;
                }
            }
            
            internal DataColumn PreferredPartID9Column {
                get {
                    return this.columnPreferredPartID9;
                }
            }
            
            internal DataColumn PreferredPartID8Column {
                get {
                    return this.columnPreferredPartID8;
                }
            }
            
            internal DataColumn PreferredPartID7Column {
                get {
                    return this.columnPreferredPartID7;
                }
            }
            
            internal DataColumn PreferredPartID6Column {
                get {
                    return this.columnPreferredPartID6;
                }
            }
            
            internal DataColumn PreferredPartID5Column {
                get {
                    return this.columnPreferredPartID5;
                }
            }
            
            internal DataColumn PreferredPartID4Column {
                get {
                    return this.columnPreferredPartID4;
                }
            }
            
            internal DataColumn PreferredPartID3Column {
                get {
                    return this.columnPreferredPartID3;
                }
            }
            
            internal DataColumn PreferredPartID2Column {
                get {
                    return this.columnPreferredPartID2;
                }
            }
            
            internal DataColumn PreferredPartID1Column {
                get {
                    return this.columnPreferredPartID1;
                }
            }
            
            internal DataColumn TechBitsCivNoDevColumn {
                get {
                    return this.columnTechBitsCivNoDev;
                }
            }
            
            internal DataColumn BonusMoneyColumn {
                get {
                    return this.columnBonusMoney;
                }
            }
            
            internal DataColumn IncomeMoneyColumn {
                get {
                    return this.columnIncomeMoney;
                }
            }
            
            public CivsRow this[int index] {
                get {
                    return ((CivsRow)(this.Rows[index]));
                }
            }
            
            public event CivsRowChangeEventHandler CivsRowChanged;
            
            public event CivsRowChangeEventHandler CivsRowChanging;
            
            public event CivsRowChangeEventHandler CivsRowDeleted;
            
            public event CivsRowChangeEventHandler CivsRowDeleting;
            
            public void AddCivsRow(CivsRow row) {
                this.Rows.Add(row);
            }
            
            public CivsRow AddCivsRow(
                        short CivID, 
                        string Name, 
                        string Description, 
                        short EscapePodShipTypeID, 
                        string TechBitsCiv, 
                        short StartingGlobalAttributeID, 
                        short InitialStationTypeID, 
                        string IconName, 
                        string StationHUD, 
                        short PreferredPartID15, 
                        short PreferredPartID14, 
                        short PreferredPartID13, 
                        short PreferredPartID12, 
                        short PreferredPartID11, 
                        short PreferredPartID10, 
                        short PreferredPartID9, 
                        short PreferredPartID8, 
                        short PreferredPartID7, 
                        short PreferredPartID6, 
                        short PreferredPartID5, 
                        short PreferredPartID4, 
                        short PreferredPartID3, 
                        short PreferredPartID2, 
                        short PreferredPartID1, 
                        string TechBitsCivNoDev, 
                        System.Single BonusMoney, 
                        System.Single IncomeMoney) {
                CivsRow rowCivsRow = ((CivsRow)(this.NewRow()));
                rowCivsRow.ItemArray = new object[] {
                        CivID,
                        Name,
                        Description,
                        EscapePodShipTypeID,
                        TechBitsCiv,
                        StartingGlobalAttributeID,
                        InitialStationTypeID,
                        IconName,
                        StationHUD,
                        PreferredPartID15,
                        PreferredPartID14,
                        PreferredPartID13,
                        PreferredPartID12,
                        PreferredPartID11,
                        PreferredPartID10,
                        PreferredPartID9,
                        PreferredPartID8,
                        PreferredPartID7,
                        PreferredPartID6,
                        PreferredPartID5,
                        PreferredPartID4,
                        PreferredPartID3,
                        PreferredPartID2,
                        PreferredPartID1,
                        TechBitsCivNoDev,
                        BonusMoney,
                        IncomeMoney};
                this.Rows.Add(rowCivsRow);
                return rowCivsRow;
            }
            
            public CivsRow FindByCivID(short CivID) {
                return ((CivsRow)(this.Rows.Find(new object[] {
                            CivID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CivsDataTable cln = ((CivsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CivsDataTable();
            }
            
            internal void InitVars() {
                this.columnCivID = this.Columns["CivID"];
                this.columnName = this.Columns["Name"];
                this.columnDescription = this.Columns["Description"];
                this.columnEscapePodShipTypeID = this.Columns["EscapePodShipTypeID"];
                this.columnTechBitsCiv = this.Columns["TechBitsCiv"];
                this.columnStartingGlobalAttributeID = this.Columns["StartingGlobalAttributeID"];
                this.columnInitialStationTypeID = this.Columns["InitialStationTypeID"];
                this.columnIconName = this.Columns["IconName"];
                this.columnStationHUD = this.Columns["StationHUD"];
                this.columnPreferredPartID15 = this.Columns["PreferredPartID15"];
                this.columnPreferredPartID14 = this.Columns["PreferredPartID14"];
                this.columnPreferredPartID13 = this.Columns["PreferredPartID13"];
                this.columnPreferredPartID12 = this.Columns["PreferredPartID12"];
                this.columnPreferredPartID11 = this.Columns["PreferredPartID11"];
                this.columnPreferredPartID10 = this.Columns["PreferredPartID10"];
                this.columnPreferredPartID9 = this.Columns["PreferredPartID9"];
                this.columnPreferredPartID8 = this.Columns["PreferredPartID8"];
                this.columnPreferredPartID7 = this.Columns["PreferredPartID7"];
                this.columnPreferredPartID6 = this.Columns["PreferredPartID6"];
                this.columnPreferredPartID5 = this.Columns["PreferredPartID5"];
                this.columnPreferredPartID4 = this.Columns["PreferredPartID4"];
                this.columnPreferredPartID3 = this.Columns["PreferredPartID3"];
                this.columnPreferredPartID2 = this.Columns["PreferredPartID2"];
                this.columnPreferredPartID1 = this.Columns["PreferredPartID1"];
                this.columnTechBitsCivNoDev = this.Columns["TechBitsCivNoDev"];
                this.columnBonusMoney = this.Columns["BonusMoney"];
                this.columnIncomeMoney = this.Columns["IncomeMoney"];
            }
            
            private void InitClass() {
                this.columnCivID = new DataColumn("CivID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCivID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnEscapePodShipTypeID = new DataColumn("EscapePodShipTypeID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEscapePodShipTypeID);
                this.columnTechBitsCiv = new DataColumn("TechBitsCiv", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechBitsCiv);
                this.columnStartingGlobalAttributeID = new DataColumn("StartingGlobalAttributeID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStartingGlobalAttributeID);
                this.columnInitialStationTypeID = new DataColumn("InitialStationTypeID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInitialStationTypeID);
                this.columnIconName = new DataColumn("IconName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIconName);
                this.columnStationHUD = new DataColumn("StationHUD", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStationHUD);
                this.columnPreferredPartID15 = new DataColumn("PreferredPartID15", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID15);
                this.columnPreferredPartID14 = new DataColumn("PreferredPartID14", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID14);
                this.columnPreferredPartID13 = new DataColumn("PreferredPartID13", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID13);
                this.columnPreferredPartID12 = new DataColumn("PreferredPartID12", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID12);
                this.columnPreferredPartID11 = new DataColumn("PreferredPartID11", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID11);
                this.columnPreferredPartID10 = new DataColumn("PreferredPartID10", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID10);
                this.columnPreferredPartID9 = new DataColumn("PreferredPartID9", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID9);
                this.columnPreferredPartID8 = new DataColumn("PreferredPartID8", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID8);
                this.columnPreferredPartID7 = new DataColumn("PreferredPartID7", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID7);
                this.columnPreferredPartID6 = new DataColumn("PreferredPartID6", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID6);
                this.columnPreferredPartID5 = new DataColumn("PreferredPartID5", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID5);
                this.columnPreferredPartID4 = new DataColumn("PreferredPartID4", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID4);
                this.columnPreferredPartID3 = new DataColumn("PreferredPartID3", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID3);
                this.columnPreferredPartID2 = new DataColumn("PreferredPartID2", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID2);
                this.columnPreferredPartID1 = new DataColumn("PreferredPartID1", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID1);
                this.columnTechBitsCivNoDev = new DataColumn("TechBitsCivNoDev", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechBitsCivNoDev);
                this.columnBonusMoney = new DataColumn("BonusMoney", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBonusMoney);
                this.columnIncomeMoney = new DataColumn("IncomeMoney", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIncomeMoney);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCivID}, true));
                this.columnCivID.AllowDBNull = false;
                this.columnCivID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnEscapePodShipTypeID.AllowDBNull = false;
                this.columnTechBitsCiv.AllowDBNull = false;
                this.columnInitialStationTypeID.AllowDBNull = false;
                this.columnIconName.AllowDBNull = false;
                this.columnStationHUD.AllowDBNull = false;
                this.columnTechBitsCivNoDev.AllowDBNull = false;
                this.columnBonusMoney.AllowDBNull = false;
                this.columnIncomeMoney.AllowDBNull = false;
            }
            
            public CivsRow NewCivsRow() {
                return ((CivsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CivsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CivsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CivsRowChanged != null)) {
                    this.CivsRowChanged(this, new CivsRowChangeEvent(((CivsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CivsRowChanging != null)) {
                    this.CivsRowChanging(this, new CivsRowChangeEvent(((CivsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CivsRowDeleted != null)) {
                    this.CivsRowDeleted(this, new CivsRowChangeEvent(((CivsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CivsRowDeleting != null)) {
                    this.CivsRowDeleting(this, new CivsRowChangeEvent(((CivsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCivsRow(CivsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CivsRow : DataRow {
            
            private CivsDataTable tableCivs;
            
            internal CivsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCivs = ((CivsDataTable)(this.Table));
            }
            
            public short CivID {
                get {
                    return ((short)(this[this.tableCivs.CivIDColumn]));
                }
                set {
                    this[this.tableCivs.CivIDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableCivs.NameColumn]));
                }
                set {
                    this[this.tableCivs.NameColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableCivs.DescriptionColumn]));
                }
                set {
                    this[this.tableCivs.DescriptionColumn] = value;
                }
            }
            
            public short EscapePodShipTypeID {
                get {
                    return ((short)(this[this.tableCivs.EscapePodShipTypeIDColumn]));
                }
                set {
                    this[this.tableCivs.EscapePodShipTypeIDColumn] = value;
                }
            }
            
            public string TechBitsCiv {
                get {
                    return ((string)(this[this.tableCivs.TechBitsCivColumn]));
                }
                set {
                    this[this.tableCivs.TechBitsCivColumn] = value;
                }
            }
            
            public short StartingGlobalAttributeID {
                get {
                    try {
                        return ((short)(this[this.tableCivs.StartingGlobalAttributeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.StartingGlobalAttributeIDColumn] = value;
                }
            }
            
            public short InitialStationTypeID {
                get {
                    return ((short)(this[this.tableCivs.InitialStationTypeIDColumn]));
                }
                set {
                    this[this.tableCivs.InitialStationTypeIDColumn] = value;
                }
            }
            
            public string IconName {
                get {
                    return ((string)(this[this.tableCivs.IconNameColumn]));
                }
                set {
                    this[this.tableCivs.IconNameColumn] = value;
                }
            }
            
            public string StationHUD {
                get {
                    return ((string)(this[this.tableCivs.StationHUDColumn]));
                }
                set {
                    this[this.tableCivs.StationHUDColumn] = value;
                }
            }
            
            public short PreferredPartID15 {
                get {
                    try {
                        return ((short)(this[this.tableCivs.PreferredPartID15Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.PreferredPartID15Column] = value;
                }
            }
            
            public short PreferredPartID14 {
                get {
                    try {
                        return ((short)(this[this.tableCivs.PreferredPartID14Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.PreferredPartID14Column] = value;
                }
            }
            
            public short PreferredPartID13 {
                get {
                    try {
                        return ((short)(this[this.tableCivs.PreferredPartID13Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.PreferredPartID13Column] = value;
                }
            }
            
            public short PreferredPartID12 {
                get {
                    try {
                        return ((short)(this[this.tableCivs.PreferredPartID12Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.PreferredPartID12Column] = value;
                }
            }
            
            public short PreferredPartID11 {
                get {
                    try {
                        return ((short)(this[this.tableCivs.PreferredPartID11Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.PreferredPartID11Column] = value;
                }
            }
            
            public short PreferredPartID10 {
                get {
                    try {
                        return ((short)(this[this.tableCivs.PreferredPartID10Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.PreferredPartID10Column] = value;
                }
            }
            
            public short PreferredPartID9 {
                get {
                    try {
                        return ((short)(this[this.tableCivs.PreferredPartID9Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.PreferredPartID9Column] = value;
                }
            }
            
            public short PreferredPartID8 {
                get {
                    try {
                        return ((short)(this[this.tableCivs.PreferredPartID8Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.PreferredPartID8Column] = value;
                }
            }
            
            public short PreferredPartID7 {
                get {
                    try {
                        return ((short)(this[this.tableCivs.PreferredPartID7Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.PreferredPartID7Column] = value;
                }
            }
            
            public short PreferredPartID6 {
                get {
                    try {
                        return ((short)(this[this.tableCivs.PreferredPartID6Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.PreferredPartID6Column] = value;
                }
            }
            
            public short PreferredPartID5 {
                get {
                    try {
                        return ((short)(this[this.tableCivs.PreferredPartID5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.PreferredPartID5Column] = value;
                }
            }
            
            public short PreferredPartID4 {
                get {
                    try {
                        return ((short)(this[this.tableCivs.PreferredPartID4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.PreferredPartID4Column] = value;
                }
            }
            
            public short PreferredPartID3 {
                get {
                    try {
                        return ((short)(this[this.tableCivs.PreferredPartID3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.PreferredPartID3Column] = value;
                }
            }
            
            public short PreferredPartID2 {
                get {
                    try {
                        return ((short)(this[this.tableCivs.PreferredPartID2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.PreferredPartID2Column] = value;
                }
            }
            
            public short PreferredPartID1 {
                get {
                    try {
                        return ((short)(this[this.tableCivs.PreferredPartID1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCivs.PreferredPartID1Column] = value;
                }
            }
            
            public string TechBitsCivNoDev {
                get {
                    return ((string)(this[this.tableCivs.TechBitsCivNoDevColumn]));
                }
                set {
                    this[this.tableCivs.TechBitsCivNoDevColumn] = value;
                }
            }
            
            public System.Single BonusMoney {
                get {
                    return ((System.Single)(this[this.tableCivs.BonusMoneyColumn]));
                }
                set {
                    this[this.tableCivs.BonusMoneyColumn] = value;
                }
            }
            
            public System.Single IncomeMoney {
                get {
                    return ((System.Single)(this[this.tableCivs.IncomeMoneyColumn]));
                }
                set {
                    this[this.tableCivs.IncomeMoneyColumn] = value;
                }
            }
            
            public bool IsStartingGlobalAttributeIDNull() {
                return this.IsNull(this.tableCivs.StartingGlobalAttributeIDColumn);
            }
            
            public void SetStartingGlobalAttributeIDNull() {
                this[this.tableCivs.StartingGlobalAttributeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID15Null() {
                return this.IsNull(this.tableCivs.PreferredPartID15Column);
            }
            
            public void SetPreferredPartID15Null() {
                this[this.tableCivs.PreferredPartID15Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID14Null() {
                return this.IsNull(this.tableCivs.PreferredPartID14Column);
            }
            
            public void SetPreferredPartID14Null() {
                this[this.tableCivs.PreferredPartID14Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID13Null() {
                return this.IsNull(this.tableCivs.PreferredPartID13Column);
            }
            
            public void SetPreferredPartID13Null() {
                this[this.tableCivs.PreferredPartID13Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID12Null() {
                return this.IsNull(this.tableCivs.PreferredPartID12Column);
            }
            
            public void SetPreferredPartID12Null() {
                this[this.tableCivs.PreferredPartID12Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID11Null() {
                return this.IsNull(this.tableCivs.PreferredPartID11Column);
            }
            
            public void SetPreferredPartID11Null() {
                this[this.tableCivs.PreferredPartID11Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID10Null() {
                return this.IsNull(this.tableCivs.PreferredPartID10Column);
            }
            
            public void SetPreferredPartID10Null() {
                this[this.tableCivs.PreferredPartID10Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID9Null() {
                return this.IsNull(this.tableCivs.PreferredPartID9Column);
            }
            
            public void SetPreferredPartID9Null() {
                this[this.tableCivs.PreferredPartID9Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID8Null() {
                return this.IsNull(this.tableCivs.PreferredPartID8Column);
            }
            
            public void SetPreferredPartID8Null() {
                this[this.tableCivs.PreferredPartID8Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID7Null() {
                return this.IsNull(this.tableCivs.PreferredPartID7Column);
            }
            
            public void SetPreferredPartID7Null() {
                this[this.tableCivs.PreferredPartID7Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID6Null() {
                return this.IsNull(this.tableCivs.PreferredPartID6Column);
            }
            
            public void SetPreferredPartID6Null() {
                this[this.tableCivs.PreferredPartID6Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID5Null() {
                return this.IsNull(this.tableCivs.PreferredPartID5Column);
            }
            
            public void SetPreferredPartID5Null() {
                this[this.tableCivs.PreferredPartID5Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID4Null() {
                return this.IsNull(this.tableCivs.PreferredPartID4Column);
            }
            
            public void SetPreferredPartID4Null() {
                this[this.tableCivs.PreferredPartID4Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID3Null() {
                return this.IsNull(this.tableCivs.PreferredPartID3Column);
            }
            
            public void SetPreferredPartID3Null() {
                this[this.tableCivs.PreferredPartID3Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID2Null() {
                return this.IsNull(this.tableCivs.PreferredPartID2Column);
            }
            
            public void SetPreferredPartID2Null() {
                this[this.tableCivs.PreferredPartID2Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID1Null() {
                return this.IsNull(this.tableCivs.PreferredPartID1Column);
            }
            
            public void SetPreferredPartID1Null() {
                this[this.tableCivs.PreferredPartID1Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CivsRowChangeEvent : EventArgs {
            
            private CivsRow eventRow;
            
            private DataRowAction eventAction;
            
            public CivsRowChangeEvent(CivsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CivsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CloaksDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPartID;
            
            private DataColumn columnEnergyConsumption;
            
            private DataColumn columnMaxCloaking;
            
            private DataColumn columnOnRate;
            
            private DataColumn columnOffRate;
            
            private DataColumn columnEngageSound;
            
            private DataColumn columnDisengageSound;
            
            internal CloaksDataTable() : 
                    base("Cloaks") {
                this.InitClass();
            }
            
            internal CloaksDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PartIDColumn {
                get {
                    return this.columnPartID;
                }
            }
            
            internal DataColumn EnergyConsumptionColumn {
                get {
                    return this.columnEnergyConsumption;
                }
            }
            
            internal DataColumn MaxCloakingColumn {
                get {
                    return this.columnMaxCloaking;
                }
            }
            
            internal DataColumn OnRateColumn {
                get {
                    return this.columnOnRate;
                }
            }
            
            internal DataColumn OffRateColumn {
                get {
                    return this.columnOffRate;
                }
            }
            
            internal DataColumn EngageSoundColumn {
                get {
                    return this.columnEngageSound;
                }
            }
            
            internal DataColumn DisengageSoundColumn {
                get {
                    return this.columnDisengageSound;
                }
            }
            
            public CloaksRow this[int index] {
                get {
                    return ((CloaksRow)(this.Rows[index]));
                }
            }
            
            public event CloaksRowChangeEventHandler CloaksRowChanged;
            
            public event CloaksRowChangeEventHandler CloaksRowChanging;
            
            public event CloaksRowChangeEventHandler CloaksRowDeleted;
            
            public event CloaksRowChangeEventHandler CloaksRowDeleting;
            
            public void AddCloaksRow(CloaksRow row) {
                this.Rows.Add(row);
            }
            
            public CloaksRow AddCloaksRow(short PartID, System.Single EnergyConsumption, System.Single MaxCloaking, System.Single OnRate, System.Single OffRate, short EngageSound, short DisengageSound) {
                CloaksRow rowCloaksRow = ((CloaksRow)(this.NewRow()));
                rowCloaksRow.ItemArray = new object[] {
                        PartID,
                        EnergyConsumption,
                        MaxCloaking,
                        OnRate,
                        OffRate,
                        EngageSound,
                        DisengageSound};
                this.Rows.Add(rowCloaksRow);
                return rowCloaksRow;
            }
            
            public CloaksRow FindByPartID(short PartID) {
                return ((CloaksRow)(this.Rows.Find(new object[] {
                            PartID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CloaksDataTable cln = ((CloaksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CloaksDataTable();
            }
            
            internal void InitVars() {
                this.columnPartID = this.Columns["PartID"];
                this.columnEnergyConsumption = this.Columns["EnergyConsumption"];
                this.columnMaxCloaking = this.Columns["MaxCloaking"];
                this.columnOnRate = this.Columns["OnRate"];
                this.columnOffRate = this.Columns["OffRate"];
                this.columnEngageSound = this.Columns["EngageSound"];
                this.columnDisengageSound = this.Columns["DisengageSound"];
            }
            
            private void InitClass() {
                this.columnPartID = new DataColumn("PartID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartID);
                this.columnEnergyConsumption = new DataColumn("EnergyConsumption", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEnergyConsumption);
                this.columnMaxCloaking = new DataColumn("MaxCloaking", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxCloaking);
                this.columnOnRate = new DataColumn("OnRate", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOnRate);
                this.columnOffRate = new DataColumn("OffRate", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOffRate);
                this.columnEngageSound = new DataColumn("EngageSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEngageSound);
                this.columnDisengageSound = new DataColumn("DisengageSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDisengageSound);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPartID}, true));
                this.columnPartID.AllowDBNull = false;
                this.columnPartID.Unique = true;
                this.columnEnergyConsumption.AllowDBNull = false;
                this.columnMaxCloaking.AllowDBNull = false;
                this.columnOnRate.AllowDBNull = false;
                this.columnOffRate.AllowDBNull = false;
                this.columnEngageSound.AllowDBNull = false;
                this.columnDisengageSound.AllowDBNull = false;
            }
            
            public CloaksRow NewCloaksRow() {
                return ((CloaksRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CloaksRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CloaksRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CloaksRowChanged != null)) {
                    this.CloaksRowChanged(this, new CloaksRowChangeEvent(((CloaksRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CloaksRowChanging != null)) {
                    this.CloaksRowChanging(this, new CloaksRowChangeEvent(((CloaksRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CloaksRowDeleted != null)) {
                    this.CloaksRowDeleted(this, new CloaksRowChangeEvent(((CloaksRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CloaksRowDeleting != null)) {
                    this.CloaksRowDeleting(this, new CloaksRowChangeEvent(((CloaksRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCloaksRow(CloaksRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CloaksRow : DataRow {
            
            private CloaksDataTable tableCloaks;
            
            internal CloaksRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCloaks = ((CloaksDataTable)(this.Table));
            }
            
            public short PartID {
                get {
                    return ((short)(this[this.tableCloaks.PartIDColumn]));
                }
                set {
                    this[this.tableCloaks.PartIDColumn] = value;
                }
            }
            
            public System.Single EnergyConsumption {
                get {
                    return ((System.Single)(this[this.tableCloaks.EnergyConsumptionColumn]));
                }
                set {
                    this[this.tableCloaks.EnergyConsumptionColumn] = value;
                }
            }
            
            public System.Single MaxCloaking {
                get {
                    return ((System.Single)(this[this.tableCloaks.MaxCloakingColumn]));
                }
                set {
                    this[this.tableCloaks.MaxCloakingColumn] = value;
                }
            }
            
            public System.Single OnRate {
                get {
                    return ((System.Single)(this[this.tableCloaks.OnRateColumn]));
                }
                set {
                    this[this.tableCloaks.OnRateColumn] = value;
                }
            }
            
            public System.Single OffRate {
                get {
                    return ((System.Single)(this[this.tableCloaks.OffRateColumn]));
                }
                set {
                    this[this.tableCloaks.OffRateColumn] = value;
                }
            }
            
            public short EngageSound {
                get {
                    return ((short)(this[this.tableCloaks.EngageSoundColumn]));
                }
                set {
                    this[this.tableCloaks.EngageSoundColumn] = value;
                }
            }
            
            public short DisengageSound {
                get {
                    return ((short)(this[this.tableCloaks.DisengageSoundColumn]));
                }
                set {
                    this[this.tableCloaks.DisengageSoundColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CloaksRowChangeEvent : EventArgs {
            
            private CloaksRow eventRow;
            
            private DataRowAction eventAction;
            
            public CloaksRowChangeEvent(CloaksRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CloaksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConstantsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPointsWin;
            
            private DataColumn columnPointsWarpsSpotted;
            
            private DataColumn columnPointsAsteroidsSpotted;
            
            private DataColumn columnPointsMinerKills;
            
            private DataColumn columnPointsBuilderKills;
            
            private DataColumn columnPointsLayerKills;
            
            private DataColumn columnPointsBaseKills;
            
            private DataColumn columnPointsBaseCaptures;
            
            private DataColumn columnPointsTechsRecovered;
            
            private DataColumn columnPointsPlayerKills;
            
            private DataColumn columnPointsDeaths;
            
            private DataColumn columnPointsPilotBaseKills;
            
            private DataColumn columnPointsPilotBaseCaptures;
            
            private DataColumn columnPointsFlagCapture;
            
            private DataColumn columnPointsArtifactCapture;
            
            internal ConstantsDataTable() : 
                    base("Constants") {
                this.InitClass();
            }
            
            internal ConstantsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PointsWinColumn {
                get {
                    return this.columnPointsWin;
                }
            }
            
            internal DataColumn PointsWarpsSpottedColumn {
                get {
                    return this.columnPointsWarpsSpotted;
                }
            }
            
            internal DataColumn PointsAsteroidsSpottedColumn {
                get {
                    return this.columnPointsAsteroidsSpotted;
                }
            }
            
            internal DataColumn PointsMinerKillsColumn {
                get {
                    return this.columnPointsMinerKills;
                }
            }
            
            internal DataColumn PointsBuilderKillsColumn {
                get {
                    return this.columnPointsBuilderKills;
                }
            }
            
            internal DataColumn PointsLayerKillsColumn {
                get {
                    return this.columnPointsLayerKills;
                }
            }
            
            internal DataColumn PointsBaseKillsColumn {
                get {
                    return this.columnPointsBaseKills;
                }
            }
            
            internal DataColumn PointsBaseCapturesColumn {
                get {
                    return this.columnPointsBaseCaptures;
                }
            }
            
            internal DataColumn PointsTechsRecoveredColumn {
                get {
                    return this.columnPointsTechsRecovered;
                }
            }
            
            internal DataColumn PointsPlayerKillsColumn {
                get {
                    return this.columnPointsPlayerKills;
                }
            }
            
            internal DataColumn PointsDeathsColumn {
                get {
                    return this.columnPointsDeaths;
                }
            }
            
            internal DataColumn PointsPilotBaseKillsColumn {
                get {
                    return this.columnPointsPilotBaseKills;
                }
            }
            
            internal DataColumn PointsPilotBaseCapturesColumn {
                get {
                    return this.columnPointsPilotBaseCaptures;
                }
            }
            
            internal DataColumn PointsFlagCaptureColumn {
                get {
                    return this.columnPointsFlagCapture;
                }
            }
            
            internal DataColumn PointsArtifactCaptureColumn {
                get {
                    return this.columnPointsArtifactCapture;
                }
            }
            
            public ConstantsRow this[int index] {
                get {
                    return ((ConstantsRow)(this.Rows[index]));
                }
            }
            
            public event ConstantsRowChangeEventHandler ConstantsRowChanged;
            
            public event ConstantsRowChangeEventHandler ConstantsRowChanging;
            
            public event ConstantsRowChangeEventHandler ConstantsRowDeleted;
            
            public event ConstantsRowChangeEventHandler ConstantsRowDeleting;
            
            public void AddConstantsRow(ConstantsRow row) {
                this.Rows.Add(row);
            }
            
            public ConstantsRow AddConstantsRow(System.Double PointsWin, System.Double PointsWarpsSpotted, System.Double PointsAsteroidsSpotted, System.Double PointsMinerKills, System.Double PointsBuilderKills, System.Double PointsLayerKills, System.Double PointsBaseKills, System.Double PointsBaseCaptures, System.Double PointsTechsRecovered, System.Double PointsPlayerKills, System.Double PointsDeaths, System.Double PointsPilotBaseKills, System.Double PointsPilotBaseCaptures, System.Double PointsFlagCapture, System.Double PointsArtifactCapture) {
                ConstantsRow rowConstantsRow = ((ConstantsRow)(this.NewRow()));
                rowConstantsRow.ItemArray = new object[] {
                        PointsWin,
                        PointsWarpsSpotted,
                        PointsAsteroidsSpotted,
                        PointsMinerKills,
                        PointsBuilderKills,
                        PointsLayerKills,
                        PointsBaseKills,
                        PointsBaseCaptures,
                        PointsTechsRecovered,
                        PointsPlayerKills,
                        PointsDeaths,
                        PointsPilotBaseKills,
                        PointsPilotBaseCaptures,
                        PointsFlagCapture,
                        PointsArtifactCapture};
                this.Rows.Add(rowConstantsRow);
                return rowConstantsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ConstantsDataTable cln = ((ConstantsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ConstantsDataTable();
            }
            
            internal void InitVars() {
                this.columnPointsWin = this.Columns["PointsWin"];
                this.columnPointsWarpsSpotted = this.Columns["PointsWarpsSpotted"];
                this.columnPointsAsteroidsSpotted = this.Columns["PointsAsteroidsSpotted"];
                this.columnPointsMinerKills = this.Columns["PointsMinerKills"];
                this.columnPointsBuilderKills = this.Columns["PointsBuilderKills"];
                this.columnPointsLayerKills = this.Columns["PointsLayerKills"];
                this.columnPointsBaseKills = this.Columns["PointsBaseKills"];
                this.columnPointsBaseCaptures = this.Columns["PointsBaseCaptures"];
                this.columnPointsTechsRecovered = this.Columns["PointsTechsRecovered"];
                this.columnPointsPlayerKills = this.Columns["PointsPlayerKills"];
                this.columnPointsDeaths = this.Columns["PointsDeaths"];
                this.columnPointsPilotBaseKills = this.Columns["PointsPilotBaseKills"];
                this.columnPointsPilotBaseCaptures = this.Columns["PointsPilotBaseCaptures"];
                this.columnPointsFlagCapture = this.Columns["PointsFlagCapture"];
                this.columnPointsArtifactCapture = this.Columns["PointsArtifactCapture"];
            }
            
            private void InitClass() {
                this.columnPointsWin = new DataColumn("PointsWin", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointsWin);
                this.columnPointsWarpsSpotted = new DataColumn("PointsWarpsSpotted", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointsWarpsSpotted);
                this.columnPointsAsteroidsSpotted = new DataColumn("PointsAsteroidsSpotted", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointsAsteroidsSpotted);
                this.columnPointsMinerKills = new DataColumn("PointsMinerKills", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointsMinerKills);
                this.columnPointsBuilderKills = new DataColumn("PointsBuilderKills", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointsBuilderKills);
                this.columnPointsLayerKills = new DataColumn("PointsLayerKills", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointsLayerKills);
                this.columnPointsBaseKills = new DataColumn("PointsBaseKills", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointsBaseKills);
                this.columnPointsBaseCaptures = new DataColumn("PointsBaseCaptures", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointsBaseCaptures);
                this.columnPointsTechsRecovered = new DataColumn("PointsTechsRecovered", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointsTechsRecovered);
                this.columnPointsPlayerKills = new DataColumn("PointsPlayerKills", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointsPlayerKills);
                this.columnPointsDeaths = new DataColumn("PointsDeaths", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointsDeaths);
                this.columnPointsPilotBaseKills = new DataColumn("PointsPilotBaseKills", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointsPilotBaseKills);
                this.columnPointsPilotBaseCaptures = new DataColumn("PointsPilotBaseCaptures", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointsPilotBaseCaptures);
                this.columnPointsFlagCapture = new DataColumn("PointsFlagCapture", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointsFlagCapture);
                this.columnPointsArtifactCapture = new DataColumn("PointsArtifactCapture", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointsArtifactCapture);
                this.columnPointsWin.AllowDBNull = false;
                this.columnPointsWarpsSpotted.AllowDBNull = false;
                this.columnPointsAsteroidsSpotted.AllowDBNull = false;
                this.columnPointsMinerKills.AllowDBNull = false;
                this.columnPointsBuilderKills.AllowDBNull = false;
                this.columnPointsLayerKills.AllowDBNull = false;
                this.columnPointsBaseKills.AllowDBNull = false;
                this.columnPointsBaseCaptures.AllowDBNull = false;
                this.columnPointsTechsRecovered.AllowDBNull = false;
                this.columnPointsPlayerKills.AllowDBNull = false;
                this.columnPointsDeaths.AllowDBNull = false;
                this.columnPointsPilotBaseKills.AllowDBNull = false;
                this.columnPointsPilotBaseCaptures.AllowDBNull = false;
                this.columnPointsFlagCapture.AllowDBNull = false;
                this.columnPointsArtifactCapture.AllowDBNull = false;
            }
            
            public ConstantsRow NewConstantsRow() {
                return ((ConstantsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ConstantsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ConstantsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConstantsRowChanged != null)) {
                    this.ConstantsRowChanged(this, new ConstantsRowChangeEvent(((ConstantsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConstantsRowChanging != null)) {
                    this.ConstantsRowChanging(this, new ConstantsRowChangeEvent(((ConstantsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConstantsRowDeleted != null)) {
                    this.ConstantsRowDeleted(this, new ConstantsRowChangeEvent(((ConstantsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConstantsRowDeleting != null)) {
                    this.ConstantsRowDeleting(this, new ConstantsRowChangeEvent(((ConstantsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveConstantsRow(ConstantsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConstantsRow : DataRow {
            
            private ConstantsDataTable tableConstants;
            
            internal ConstantsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableConstants = ((ConstantsDataTable)(this.Table));
            }
            
            public System.Double PointsWin {
                get {
                    return ((System.Double)(this[this.tableConstants.PointsWinColumn]));
                }
                set {
                    this[this.tableConstants.PointsWinColumn] = value;
                }
            }
            
            public System.Double PointsWarpsSpotted {
                get {
                    return ((System.Double)(this[this.tableConstants.PointsWarpsSpottedColumn]));
                }
                set {
                    this[this.tableConstants.PointsWarpsSpottedColumn] = value;
                }
            }
            
            public System.Double PointsAsteroidsSpotted {
                get {
                    return ((System.Double)(this[this.tableConstants.PointsAsteroidsSpottedColumn]));
                }
                set {
                    this[this.tableConstants.PointsAsteroidsSpottedColumn] = value;
                }
            }
            
            public System.Double PointsMinerKills {
                get {
                    return ((System.Double)(this[this.tableConstants.PointsMinerKillsColumn]));
                }
                set {
                    this[this.tableConstants.PointsMinerKillsColumn] = value;
                }
            }
            
            public System.Double PointsBuilderKills {
                get {
                    return ((System.Double)(this[this.tableConstants.PointsBuilderKillsColumn]));
                }
                set {
                    this[this.tableConstants.PointsBuilderKillsColumn] = value;
                }
            }
            
            public System.Double PointsLayerKills {
                get {
                    return ((System.Double)(this[this.tableConstants.PointsLayerKillsColumn]));
                }
                set {
                    this[this.tableConstants.PointsLayerKillsColumn] = value;
                }
            }
            
            public System.Double PointsBaseKills {
                get {
                    return ((System.Double)(this[this.tableConstants.PointsBaseKillsColumn]));
                }
                set {
                    this[this.tableConstants.PointsBaseKillsColumn] = value;
                }
            }
            
            public System.Double PointsBaseCaptures {
                get {
                    return ((System.Double)(this[this.tableConstants.PointsBaseCapturesColumn]));
                }
                set {
                    this[this.tableConstants.PointsBaseCapturesColumn] = value;
                }
            }
            
            public System.Double PointsTechsRecovered {
                get {
                    return ((System.Double)(this[this.tableConstants.PointsTechsRecoveredColumn]));
                }
                set {
                    this[this.tableConstants.PointsTechsRecoveredColumn] = value;
                }
            }
            
            public System.Double PointsPlayerKills {
                get {
                    return ((System.Double)(this[this.tableConstants.PointsPlayerKillsColumn]));
                }
                set {
                    this[this.tableConstants.PointsPlayerKillsColumn] = value;
                }
            }
            
            public System.Double PointsDeaths {
                get {
                    return ((System.Double)(this[this.tableConstants.PointsDeathsColumn]));
                }
                set {
                    this[this.tableConstants.PointsDeathsColumn] = value;
                }
            }
            
            public System.Double PointsPilotBaseKills {
                get {
                    return ((System.Double)(this[this.tableConstants.PointsPilotBaseKillsColumn]));
                }
                set {
                    this[this.tableConstants.PointsPilotBaseKillsColumn] = value;
                }
            }
            
            public System.Double PointsPilotBaseCaptures {
                get {
                    return ((System.Double)(this[this.tableConstants.PointsPilotBaseCapturesColumn]));
                }
                set {
                    this[this.tableConstants.PointsPilotBaseCapturesColumn] = value;
                }
            }
            
            public System.Double PointsFlagCapture {
                get {
                    return ((System.Double)(this[this.tableConstants.PointsFlagCaptureColumn]));
                }
                set {
                    this[this.tableConstants.PointsFlagCaptureColumn] = value;
                }
            }
            
            public System.Double PointsArtifactCapture {
                get {
                    return ((System.Double)(this[this.tableConstants.PointsArtifactCaptureColumn]));
                }
                set {
                    this[this.tableConstants.PointsArtifactCaptureColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConstantsRowChangeEvent : EventArgs {
            
            private ConstantsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ConstantsRowChangeEvent(ConstantsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ConstantsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DevelopmentsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPrice;
            
            private DataColumn columnLoadoutBitmap;
            
            private DataColumn columnName;
            
            private DataColumn columnDescription;
            
            private DataColumn columnTechBitsRequired;
            
            private DataColumn columnTechBitsEffect;
            
            private DataColumn columnDevelopmentID;
            
            private DataColumn columnSecondsToBuild;
            
            private DataColumn columnGlobalAttributeID;
            
            private DataColumn columnPRIcon;
            
            private DataColumn columnGroupID;
            
            private DataColumn columnSortOrder;
            
            private DataColumn columnCompletedSound;
            
            internal DevelopmentsDataTable() : 
                    base("Developments") {
                this.InitClass();
            }
            
            internal DevelopmentsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            internal DataColumn LoadoutBitmapColumn {
                get {
                    return this.columnLoadoutBitmap;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn TechBitsRequiredColumn {
                get {
                    return this.columnTechBitsRequired;
                }
            }
            
            internal DataColumn TechBitsEffectColumn {
                get {
                    return this.columnTechBitsEffect;
                }
            }
            
            internal DataColumn DevelopmentIDColumn {
                get {
                    return this.columnDevelopmentID;
                }
            }
            
            internal DataColumn SecondsToBuildColumn {
                get {
                    return this.columnSecondsToBuild;
                }
            }
            
            internal DataColumn GlobalAttributeIDColumn {
                get {
                    return this.columnGlobalAttributeID;
                }
            }
            
            internal DataColumn PRIconColumn {
                get {
                    return this.columnPRIcon;
                }
            }
            
            internal DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            internal DataColumn SortOrderColumn {
                get {
                    return this.columnSortOrder;
                }
            }
            
            internal DataColumn CompletedSoundColumn {
                get {
                    return this.columnCompletedSound;
                }
            }
            
            public DevelopmentsRow this[int index] {
                get {
                    return ((DevelopmentsRow)(this.Rows[index]));
                }
            }
            
            public event DevelopmentsRowChangeEventHandler DevelopmentsRowChanged;
            
            public event DevelopmentsRowChangeEventHandler DevelopmentsRowChanging;
            
            public event DevelopmentsRowChangeEventHandler DevelopmentsRowDeleted;
            
            public event DevelopmentsRowChangeEventHandler DevelopmentsRowDeleting;
            
            public void AddDevelopmentsRow(DevelopmentsRow row) {
                this.Rows.Add(row);
            }
            
            public DevelopmentsRow AddDevelopmentsRow(int Price, string LoadoutBitmap, string Name, string Description, string TechBitsRequired, string TechBitsEffect, short DevelopmentID, short SecondsToBuild, short GlobalAttributeID, string PRIcon, System.Byte GroupID, int SortOrder, short CompletedSound) {
                DevelopmentsRow rowDevelopmentsRow = ((DevelopmentsRow)(this.NewRow()));
                rowDevelopmentsRow.ItemArray = new object[] {
                        Price,
                        LoadoutBitmap,
                        Name,
                        Description,
                        TechBitsRequired,
                        TechBitsEffect,
                        DevelopmentID,
                        SecondsToBuild,
                        GlobalAttributeID,
                        PRIcon,
                        GroupID,
                        SortOrder,
                        CompletedSound};
                this.Rows.Add(rowDevelopmentsRow);
                return rowDevelopmentsRow;
            }
            
            public DevelopmentsRow FindByDevelopmentID(short DevelopmentID) {
                return ((DevelopmentsRow)(this.Rows.Find(new object[] {
                            DevelopmentID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DevelopmentsDataTable cln = ((DevelopmentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DevelopmentsDataTable();
            }
            
            internal void InitVars() {
                this.columnPrice = this.Columns["Price"];
                this.columnLoadoutBitmap = this.Columns["LoadoutBitmap"];
                this.columnName = this.Columns["Name"];
                this.columnDescription = this.Columns["Description"];
                this.columnTechBitsRequired = this.Columns["TechBitsRequired"];
                this.columnTechBitsEffect = this.Columns["TechBitsEffect"];
                this.columnDevelopmentID = this.Columns["DevelopmentID"];
                this.columnSecondsToBuild = this.Columns["SecondsToBuild"];
                this.columnGlobalAttributeID = this.Columns["GlobalAttributeID"];
                this.columnPRIcon = this.Columns["PRIcon"];
                this.columnGroupID = this.Columns["GroupID"];
                this.columnSortOrder = this.Columns["SortOrder"];
                this.columnCompletedSound = this.Columns["CompletedSound"];
            }
            
            private void InitClass() {
                this.columnPrice = new DataColumn("Price", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice);
                this.columnLoadoutBitmap = new DataColumn("LoadoutBitmap", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLoadoutBitmap);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnTechBitsRequired = new DataColumn("TechBitsRequired", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechBitsRequired);
                this.columnTechBitsEffect = new DataColumn("TechBitsEffect", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechBitsEffect);
                this.columnDevelopmentID = new DataColumn("DevelopmentID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDevelopmentID);
                this.columnSecondsToBuild = new DataColumn("SecondsToBuild", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecondsToBuild);
                this.columnGlobalAttributeID = new DataColumn("GlobalAttributeID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGlobalAttributeID);
                this.columnPRIcon = new DataColumn("PRIcon", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPRIcon);
                this.columnGroupID = new DataColumn("GroupID", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroupID);
                this.columnSortOrder = new DataColumn("SortOrder", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortOrder);
                this.columnCompletedSound = new DataColumn("CompletedSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompletedSound);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnDevelopmentID}, true));
                this.columnPrice.AllowDBNull = false;
                this.columnLoadoutBitmap.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnTechBitsRequired.AllowDBNull = false;
                this.columnTechBitsEffect.AllowDBNull = false;
                this.columnDevelopmentID.AllowDBNull = false;
                this.columnDevelopmentID.Unique = true;
                this.columnSecondsToBuild.AllowDBNull = false;
                this.columnCompletedSound.AllowDBNull = false;
            }
            
            public DevelopmentsRow NewDevelopmentsRow() {
                return ((DevelopmentsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DevelopmentsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DevelopmentsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DevelopmentsRowChanged != null)) {
                    this.DevelopmentsRowChanged(this, new DevelopmentsRowChangeEvent(((DevelopmentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DevelopmentsRowChanging != null)) {
                    this.DevelopmentsRowChanging(this, new DevelopmentsRowChangeEvent(((DevelopmentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DevelopmentsRowDeleted != null)) {
                    this.DevelopmentsRowDeleted(this, new DevelopmentsRowChangeEvent(((DevelopmentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DevelopmentsRowDeleting != null)) {
                    this.DevelopmentsRowDeleting(this, new DevelopmentsRowChangeEvent(((DevelopmentsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDevelopmentsRow(DevelopmentsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DevelopmentsRow : DataRow {
            
            private DevelopmentsDataTable tableDevelopments;
            
            internal DevelopmentsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDevelopments = ((DevelopmentsDataTable)(this.Table));
            }
            
            public int Price {
                get {
                    return ((int)(this[this.tableDevelopments.PriceColumn]));
                }
                set {
                    this[this.tableDevelopments.PriceColumn] = value;
                }
            }
            
            public string LoadoutBitmap {
                get {
                    return ((string)(this[this.tableDevelopments.LoadoutBitmapColumn]));
                }
                set {
                    this[this.tableDevelopments.LoadoutBitmapColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableDevelopments.NameColumn]));
                }
                set {
                    this[this.tableDevelopments.NameColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableDevelopments.DescriptionColumn]));
                }
                set {
                    this[this.tableDevelopments.DescriptionColumn] = value;
                }
            }
            
            public string TechBitsRequired {
                get {
                    return ((string)(this[this.tableDevelopments.TechBitsRequiredColumn]));
                }
                set {
                    this[this.tableDevelopments.TechBitsRequiredColumn] = value;
                }
            }
            
            public string TechBitsEffect {
                get {
                    return ((string)(this[this.tableDevelopments.TechBitsEffectColumn]));
                }
                set {
                    this[this.tableDevelopments.TechBitsEffectColumn] = value;
                }
            }
            
            public short DevelopmentID {
                get {
                    return ((short)(this[this.tableDevelopments.DevelopmentIDColumn]));
                }
                set {
                    this[this.tableDevelopments.DevelopmentIDColumn] = value;
                }
            }
            
            public short SecondsToBuild {
                get {
                    return ((short)(this[this.tableDevelopments.SecondsToBuildColumn]));
                }
                set {
                    this[this.tableDevelopments.SecondsToBuildColumn] = value;
                }
            }
            
            public short GlobalAttributeID {
                get {
                    try {
                        return ((short)(this[this.tableDevelopments.GlobalAttributeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDevelopments.GlobalAttributeIDColumn] = value;
                }
            }
            
            public string PRIcon {
                get {
                    try {
                        return ((string)(this[this.tableDevelopments.PRIconColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDevelopments.PRIconColumn] = value;
                }
            }
            
            public System.Byte GroupID {
                get {
                    try {
                        return ((System.Byte)(this[this.tableDevelopments.GroupIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDevelopments.GroupIDColumn] = value;
                }
            }
            
            public int SortOrder {
                get {
                    try {
                        return ((int)(this[this.tableDevelopments.SortOrderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDevelopments.SortOrderColumn] = value;
                }
            }
            
            public short CompletedSound {
                get {
                    return ((short)(this[this.tableDevelopments.CompletedSoundColumn]));
                }
                set {
                    this[this.tableDevelopments.CompletedSoundColumn] = value;
                }
            }
            
            public bool IsGlobalAttributeIDNull() {
                return this.IsNull(this.tableDevelopments.GlobalAttributeIDColumn);
            }
            
            public void SetGlobalAttributeIDNull() {
                this[this.tableDevelopments.GlobalAttributeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPRIconNull() {
                return this.IsNull(this.tableDevelopments.PRIconColumn);
            }
            
            public void SetPRIconNull() {
                this[this.tableDevelopments.PRIconColumn] = System.Convert.DBNull;
            }
            
            public bool IsGroupIDNull() {
                return this.IsNull(this.tableDevelopments.GroupIDColumn);
            }
            
            public void SetGroupIDNull() {
                this[this.tableDevelopments.GroupIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsSortOrderNull() {
                return this.IsNull(this.tableDevelopments.SortOrderColumn);
            }
            
            public void SetSortOrderNull() {
                this[this.tableDevelopments.SortOrderColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DevelopmentsRowChangeEvent : EventArgs {
            
            private DevelopmentsRow eventRow;
            
            private DataRowAction eventAction;
            
            public DevelopmentsRowChangeEvent(DevelopmentsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DevelopmentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DronesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDroneID;
            
            private DataColumn columnName;
            
            private DataColumn columnDescription;
            
            private DataColumn columnPrice;
            
            private DataColumn columnShipTypeID;
            
            private DataColumn columnTechBitsRequired;
            
            private DataColumn columnTechBitsEffect;
            
            private DataColumn columnSecondsToBuild;
            
            private DataColumn columnDroneType;
            
            private DataColumn columnGroupID;
            
            private DataColumn columnSortOrder;
            
            private DataColumn columnExpendableID;
            
            internal DronesDataTable() : 
                    base("Drones") {
                this.InitClass();
            }
            
            internal DronesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DroneIDColumn {
                get {
                    return this.columnDroneID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            internal DataColumn ShipTypeIDColumn {
                get {
                    return this.columnShipTypeID;
                }
            }
            
            internal DataColumn TechBitsRequiredColumn {
                get {
                    return this.columnTechBitsRequired;
                }
            }
            
            internal DataColumn TechBitsEffectColumn {
                get {
                    return this.columnTechBitsEffect;
                }
            }
            
            internal DataColumn SecondsToBuildColumn {
                get {
                    return this.columnSecondsToBuild;
                }
            }
            
            internal DataColumn DroneTypeColumn {
                get {
                    return this.columnDroneType;
                }
            }
            
            internal DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            internal DataColumn SortOrderColumn {
                get {
                    return this.columnSortOrder;
                }
            }
            
            internal DataColumn ExpendableIDColumn {
                get {
                    return this.columnExpendableID;
                }
            }
            
            public DronesRow this[int index] {
                get {
                    return ((DronesRow)(this.Rows[index]));
                }
            }
            
            public event DronesRowChangeEventHandler DronesRowChanged;
            
            public event DronesRowChangeEventHandler DronesRowChanging;
            
            public event DronesRowChangeEventHandler DronesRowDeleted;
            
            public event DronesRowChangeEventHandler DronesRowDeleting;
            
            public void AddDronesRow(DronesRow row) {
                this.Rows.Add(row);
            }
            
            public DronesRow AddDronesRow(short DroneID, string Name, string Description, int Price, short ShipTypeID, string TechBitsRequired, string TechBitsEffect, short SecondsToBuild, int DroneType, System.Byte GroupID, int SortOrder, short ExpendableID) {
                DronesRow rowDronesRow = ((DronesRow)(this.NewRow()));
                rowDronesRow.ItemArray = new object[] {
                        DroneID,
                        Name,
                        Description,
                        Price,
                        ShipTypeID,
                        TechBitsRequired,
                        TechBitsEffect,
                        SecondsToBuild,
                        DroneType,
                        GroupID,
                        SortOrder,
                        ExpendableID};
                this.Rows.Add(rowDronesRow);
                return rowDronesRow;
            }
            
            public DronesRow FindByDroneID(short DroneID) {
                return ((DronesRow)(this.Rows.Find(new object[] {
                            DroneID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DronesDataTable cln = ((DronesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DronesDataTable();
            }
            
            internal void InitVars() {
                this.columnDroneID = this.Columns["DroneID"];
                this.columnName = this.Columns["Name"];
                this.columnDescription = this.Columns["Description"];
                this.columnPrice = this.Columns["Price"];
                this.columnShipTypeID = this.Columns["ShipTypeID"];
                this.columnTechBitsRequired = this.Columns["TechBitsRequired"];
                this.columnTechBitsEffect = this.Columns["TechBitsEffect"];
                this.columnSecondsToBuild = this.Columns["SecondsToBuild"];
                this.columnDroneType = this.Columns["DroneType"];
                this.columnGroupID = this.Columns["GroupID"];
                this.columnSortOrder = this.Columns["SortOrder"];
                this.columnExpendableID = this.Columns["ExpendableID"];
            }
            
            private void InitClass() {
                this.columnDroneID = new DataColumn("DroneID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDroneID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnPrice = new DataColumn("Price", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice);
                this.columnShipTypeID = new DataColumn("ShipTypeID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipTypeID);
                this.columnTechBitsRequired = new DataColumn("TechBitsRequired", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechBitsRequired);
                this.columnTechBitsEffect = new DataColumn("TechBitsEffect", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechBitsEffect);
                this.columnSecondsToBuild = new DataColumn("SecondsToBuild", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecondsToBuild);
                this.columnDroneType = new DataColumn("DroneType", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDroneType);
                this.columnGroupID = new DataColumn("GroupID", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroupID);
                this.columnSortOrder = new DataColumn("SortOrder", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortOrder);
                this.columnExpendableID = new DataColumn("ExpendableID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpendableID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnDroneID}, true));
                this.columnDroneID.AllowDBNull = false;
                this.columnDroneID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnPrice.AllowDBNull = false;
                this.columnShipTypeID.AllowDBNull = false;
                this.columnTechBitsRequired.AllowDBNull = false;
                this.columnTechBitsEffect.AllowDBNull = false;
                this.columnSecondsToBuild.AllowDBNull = false;
                this.columnDroneType.AllowDBNull = false;
            }
            
            public DronesRow NewDronesRow() {
                return ((DronesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DronesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DronesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DronesRowChanged != null)) {
                    this.DronesRowChanged(this, new DronesRowChangeEvent(((DronesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DronesRowChanging != null)) {
                    this.DronesRowChanging(this, new DronesRowChangeEvent(((DronesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DronesRowDeleted != null)) {
                    this.DronesRowDeleted(this, new DronesRowChangeEvent(((DronesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DronesRowDeleting != null)) {
                    this.DronesRowDeleting(this, new DronesRowChangeEvent(((DronesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDronesRow(DronesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DronesRow : DataRow {
            
            private DronesDataTable tableDrones;
            
            internal DronesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDrones = ((DronesDataTable)(this.Table));
            }
            
            public short DroneID {
                get {
                    return ((short)(this[this.tableDrones.DroneIDColumn]));
                }
                set {
                    this[this.tableDrones.DroneIDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableDrones.NameColumn]));
                }
                set {
                    this[this.tableDrones.NameColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableDrones.DescriptionColumn]));
                }
                set {
                    this[this.tableDrones.DescriptionColumn] = value;
                }
            }
            
            public int Price {
                get {
                    return ((int)(this[this.tableDrones.PriceColumn]));
                }
                set {
                    this[this.tableDrones.PriceColumn] = value;
                }
            }
            
            public short ShipTypeID {
                get {
                    return ((short)(this[this.tableDrones.ShipTypeIDColumn]));
                }
                set {
                    this[this.tableDrones.ShipTypeIDColumn] = value;
                }
            }
            
            public string TechBitsRequired {
                get {
                    return ((string)(this[this.tableDrones.TechBitsRequiredColumn]));
                }
                set {
                    this[this.tableDrones.TechBitsRequiredColumn] = value;
                }
            }
            
            public string TechBitsEffect {
                get {
                    return ((string)(this[this.tableDrones.TechBitsEffectColumn]));
                }
                set {
                    this[this.tableDrones.TechBitsEffectColumn] = value;
                }
            }
            
            public short SecondsToBuild {
                get {
                    return ((short)(this[this.tableDrones.SecondsToBuildColumn]));
                }
                set {
                    this[this.tableDrones.SecondsToBuildColumn] = value;
                }
            }
            
            public int DroneType {
                get {
                    return ((int)(this[this.tableDrones.DroneTypeColumn]));
                }
                set {
                    this[this.tableDrones.DroneTypeColumn] = value;
                }
            }
            
            public System.Byte GroupID {
                get {
                    try {
                        return ((System.Byte)(this[this.tableDrones.GroupIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDrones.GroupIDColumn] = value;
                }
            }
            
            public int SortOrder {
                get {
                    try {
                        return ((int)(this[this.tableDrones.SortOrderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDrones.SortOrderColumn] = value;
                }
            }
            
            public short ExpendableID {
                get {
                    try {
                        return ((short)(this[this.tableDrones.ExpendableIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDrones.ExpendableIDColumn] = value;
                }
            }
            
            public bool IsGroupIDNull() {
                return this.IsNull(this.tableDrones.GroupIDColumn);
            }
            
            public void SetGroupIDNull() {
                this[this.tableDrones.GroupIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsSortOrderNull() {
                return this.IsNull(this.tableDrones.SortOrderColumn);
            }
            
            public void SetSortOrderNull() {
                this[this.tableDrones.SortOrderColumn] = System.Convert.DBNull;
            }
            
            public bool IsExpendableIDNull() {
                return this.IsNull(this.tableDrones.ExpendableIDColumn);
            }
            
            public void SetExpendableIDNull() {
                this[this.tableDrones.ExpendableIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DronesRowChangeEvent : EventArgs {
            
            private DronesRow eventRow;
            
            private DataRowAction eventAction;
            
            public DronesRowChangeEvent(DronesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DronesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EffectsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnEffectID;
            
            private DataColumn columnDescription;
            
            private DataColumn columnFileSound;
            
            private DataColumn columnIsLooping;
            
            internal EffectsDataTable() : 
                    base("Effects") {
                this.InitClass();
            }
            
            internal EffectsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn EffectIDColumn {
                get {
                    return this.columnEffectID;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn FileSoundColumn {
                get {
                    return this.columnFileSound;
                }
            }
            
            internal DataColumn IsLoopingColumn {
                get {
                    return this.columnIsLooping;
                }
            }
            
            public EffectsRow this[int index] {
                get {
                    return ((EffectsRow)(this.Rows[index]));
                }
            }
            
            public event EffectsRowChangeEventHandler EffectsRowChanged;
            
            public event EffectsRowChangeEventHandler EffectsRowChanging;
            
            public event EffectsRowChangeEventHandler EffectsRowDeleted;
            
            public event EffectsRowChangeEventHandler EffectsRowDeleting;
            
            public void AddEffectsRow(EffectsRow row) {
                this.Rows.Add(row);
            }
            
            public EffectsRow AddEffectsRow(short EffectID, string Description, string FileSound, bool IsLooping) {
                EffectsRow rowEffectsRow = ((EffectsRow)(this.NewRow()));
                rowEffectsRow.ItemArray = new object[] {
                        EffectID,
                        Description,
                        FileSound,
                        IsLooping};
                this.Rows.Add(rowEffectsRow);
                return rowEffectsRow;
            }
            
            public EffectsRow FindByEffectID(short EffectID) {
                return ((EffectsRow)(this.Rows.Find(new object[] {
                            EffectID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EffectsDataTable cln = ((EffectsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EffectsDataTable();
            }
            
            internal void InitVars() {
                this.columnEffectID = this.Columns["EffectID"];
                this.columnDescription = this.Columns["Description"];
                this.columnFileSound = this.Columns["FileSound"];
                this.columnIsLooping = this.Columns["IsLooping"];
            }
            
            private void InitClass() {
                this.columnEffectID = new DataColumn("EffectID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEffectID);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnFileSound = new DataColumn("FileSound", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFileSound);
                this.columnIsLooping = new DataColumn("IsLooping", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsLooping);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnEffectID}, true));
                this.columnEffectID.AllowDBNull = false;
                this.columnEffectID.Unique = true;
                this.columnDescription.AllowDBNull = false;
                this.columnFileSound.AllowDBNull = false;
                this.columnIsLooping.AllowDBNull = false;
            }
            
            public EffectsRow NewEffectsRow() {
                return ((EffectsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EffectsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EffectsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EffectsRowChanged != null)) {
                    this.EffectsRowChanged(this, new EffectsRowChangeEvent(((EffectsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EffectsRowChanging != null)) {
                    this.EffectsRowChanging(this, new EffectsRowChangeEvent(((EffectsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EffectsRowDeleted != null)) {
                    this.EffectsRowDeleted(this, new EffectsRowChangeEvent(((EffectsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EffectsRowDeleting != null)) {
                    this.EffectsRowDeleting(this, new EffectsRowChangeEvent(((EffectsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEffectsRow(EffectsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EffectsRow : DataRow {
            
            private EffectsDataTable tableEffects;
            
            internal EffectsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEffects = ((EffectsDataTable)(this.Table));
            }
            
            public short EffectID {
                get {
                    return ((short)(this[this.tableEffects.EffectIDColumn]));
                }
                set {
                    this[this.tableEffects.EffectIDColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableEffects.DescriptionColumn]));
                }
                set {
                    this[this.tableEffects.DescriptionColumn] = value;
                }
            }
            
            public string FileSound {
                get {
                    return ((string)(this[this.tableEffects.FileSoundColumn]));
                }
                set {
                    this[this.tableEffects.FileSoundColumn] = value;
                }
            }
            
            public bool IsLooping {
                get {
                    return ((bool)(this[this.tableEffects.IsLoopingColumn]));
                }
                set {
                    this[this.tableEffects.IsLoopingColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EffectsRowChangeEvent : EventArgs {
            
            private EffectsRow eventRow;
            
            private DataRowAction eventAction;
            
            public EffectsRowChangeEvent(EffectsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EffectsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExpendablesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnExpendableID;
            
            private DataColumn columnPrice;
            
            private DataColumn columnFileModel;
            
            private DataColumn columnName;
            
            private DataColumn columnDescription;
            
            private DataColumn columnTechBitsRequired;
            
            private DataColumn columnTechBitsEffect;
            
            private DataColumn columnSignatureShip;
            
            private DataColumn columnMass;
            
            private DataColumn columnLoadTime;
            
            private DataColumn columnLifeSpan;
            
            private DataColumn columnSignatureInstance;
            
            private DataColumn columnHitPoints;
            
            private DataColumn columnFileModelInstance;
            
            private DataColumn columnFileTextureInstance;
            
            private DataColumn columnRadius;
            
            private DataColumn columnRateRotation;
            
            private DataColumn columnpercentRed;
            
            private DataColumn columnpercentGreen;
            
            private DataColumn columnpercentBlue;
            
            private DataColumn columnpercentAlpha;
            
            private DataColumn columnPRIcon;
            
            private DataColumn columnPRIconInstance;
            
            private DataColumn columnPartMask;
            
            private DataColumn columnDefenseType;
            
            private DataColumn columnSecondsToBuild;
            
            private DataColumn columnGroupID;
            
            private DataColumn columnExpendableSize;
            
            private DataColumn columnCapabilities;
            
            internal ExpendablesDataTable() : 
                    base("Expendables") {
                this.InitClass();
            }
            
            internal ExpendablesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ExpendableIDColumn {
                get {
                    return this.columnExpendableID;
                }
            }
            
            internal DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            internal DataColumn FileModelColumn {
                get {
                    return this.columnFileModel;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn TechBitsRequiredColumn {
                get {
                    return this.columnTechBitsRequired;
                }
            }
            
            internal DataColumn TechBitsEffectColumn {
                get {
                    return this.columnTechBitsEffect;
                }
            }
            
            internal DataColumn SignatureShipColumn {
                get {
                    return this.columnSignatureShip;
                }
            }
            
            internal DataColumn MassColumn {
                get {
                    return this.columnMass;
                }
            }
            
            internal DataColumn LoadTimeColumn {
                get {
                    return this.columnLoadTime;
                }
            }
            
            internal DataColumn LifeSpanColumn {
                get {
                    return this.columnLifeSpan;
                }
            }
            
            internal DataColumn SignatureInstanceColumn {
                get {
                    return this.columnSignatureInstance;
                }
            }
            
            internal DataColumn HitPointsColumn {
                get {
                    return this.columnHitPoints;
                }
            }
            
            internal DataColumn FileModelInstanceColumn {
                get {
                    return this.columnFileModelInstance;
                }
            }
            
            internal DataColumn FileTextureInstanceColumn {
                get {
                    return this.columnFileTextureInstance;
                }
            }
            
            internal DataColumn RadiusColumn {
                get {
                    return this.columnRadius;
                }
            }
            
            internal DataColumn RateRotationColumn {
                get {
                    return this.columnRateRotation;
                }
            }
            
            internal DataColumn percentRedColumn {
                get {
                    return this.columnpercentRed;
                }
            }
            
            internal DataColumn percentGreenColumn {
                get {
                    return this.columnpercentGreen;
                }
            }
            
            internal DataColumn percentBlueColumn {
                get {
                    return this.columnpercentBlue;
                }
            }
            
            internal DataColumn percentAlphaColumn {
                get {
                    return this.columnpercentAlpha;
                }
            }
            
            internal DataColumn PRIconColumn {
                get {
                    return this.columnPRIcon;
                }
            }
            
            internal DataColumn PRIconInstanceColumn {
                get {
                    return this.columnPRIconInstance;
                }
            }
            
            internal DataColumn PartMaskColumn {
                get {
                    return this.columnPartMask;
                }
            }
            
            internal DataColumn DefenseTypeColumn {
                get {
                    return this.columnDefenseType;
                }
            }
            
            internal DataColumn SecondsToBuildColumn {
                get {
                    return this.columnSecondsToBuild;
                }
            }
            
            internal DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            internal DataColumn ExpendableSizeColumn {
                get {
                    return this.columnExpendableSize;
                }
            }
            
            internal DataColumn CapabilitiesColumn {
                get {
                    return this.columnCapabilities;
                }
            }
            
            public ExpendablesRow this[int index] {
                get {
                    return ((ExpendablesRow)(this.Rows[index]));
                }
            }
            
            public event ExpendablesRowChangeEventHandler ExpendablesRowChanged;
            
            public event ExpendablesRowChangeEventHandler ExpendablesRowChanging;
            
            public event ExpendablesRowChangeEventHandler ExpendablesRowDeleted;
            
            public event ExpendablesRowChangeEventHandler ExpendablesRowDeleting;
            
            public void AddExpendablesRow(ExpendablesRow row) {
                this.Rows.Add(row);
            }
            
            public ExpendablesRow AddExpendablesRow(
                        short ExpendableID, 
                        int Price, 
                        string FileModel, 
                        string Name, 
                        string Description, 
                        string TechBitsRequired, 
                        string TechBitsEffect, 
                        System.Single SignatureShip, 
                        System.Single Mass, 
                        System.Single LoadTime, 
                        System.Single LifeSpan, 
                        System.Single SignatureInstance, 
                        short HitPoints, 
                        string FileModelInstance, 
                        string FileTextureInstance, 
                        System.Single Radius, 
                        System.Single RateRotation, 
                        System.Byte percentRed, 
                        System.Byte percentGreen, 
                        System.Byte percentBlue, 
                        System.Byte percentAlpha, 
                        string PRIcon, 
                        string PRIconInstance, 
                        short PartMask, 
                        System.Byte DefenseType, 
                        short SecondsToBuild, 
                        System.Byte GroupID, 
                        short ExpendableSize, 
                        short Capabilities) {
                ExpendablesRow rowExpendablesRow = ((ExpendablesRow)(this.NewRow()));
                rowExpendablesRow.ItemArray = new object[] {
                        ExpendableID,
                        Price,
                        FileModel,
                        Name,
                        Description,
                        TechBitsRequired,
                        TechBitsEffect,
                        SignatureShip,
                        Mass,
                        LoadTime,
                        LifeSpan,
                        SignatureInstance,
                        HitPoints,
                        FileModelInstance,
                        FileTextureInstance,
                        Radius,
                        RateRotation,
                        percentRed,
                        percentGreen,
                        percentBlue,
                        percentAlpha,
                        PRIcon,
                        PRIconInstance,
                        PartMask,
                        DefenseType,
                        SecondsToBuild,
                        GroupID,
                        ExpendableSize,
                        Capabilities};
                this.Rows.Add(rowExpendablesRow);
                return rowExpendablesRow;
            }
            
            public ExpendablesRow FindByExpendableID(short ExpendableID) {
                return ((ExpendablesRow)(this.Rows.Find(new object[] {
                            ExpendableID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ExpendablesDataTable cln = ((ExpendablesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ExpendablesDataTable();
            }
            
            internal void InitVars() {
                this.columnExpendableID = this.Columns["ExpendableID"];
                this.columnPrice = this.Columns["Price"];
                this.columnFileModel = this.Columns["FileModel"];
                this.columnName = this.Columns["Name"];
                this.columnDescription = this.Columns["Description"];
                this.columnTechBitsRequired = this.Columns["TechBitsRequired"];
                this.columnTechBitsEffect = this.Columns["TechBitsEffect"];
                this.columnSignatureShip = this.Columns["SignatureShip"];
                this.columnMass = this.Columns["Mass"];
                this.columnLoadTime = this.Columns["LoadTime"];
                this.columnLifeSpan = this.Columns["LifeSpan"];
                this.columnSignatureInstance = this.Columns["SignatureInstance"];
                this.columnHitPoints = this.Columns["HitPoints"];
                this.columnFileModelInstance = this.Columns["FileModelInstance"];
                this.columnFileTextureInstance = this.Columns["FileTextureInstance"];
                this.columnRadius = this.Columns["Radius"];
                this.columnRateRotation = this.Columns["RateRotation"];
                this.columnpercentRed = this.Columns["percentRed"];
                this.columnpercentGreen = this.Columns["percentGreen"];
                this.columnpercentBlue = this.Columns["percentBlue"];
                this.columnpercentAlpha = this.Columns["percentAlpha"];
                this.columnPRIcon = this.Columns["PRIcon"];
                this.columnPRIconInstance = this.Columns["PRIconInstance"];
                this.columnPartMask = this.Columns["PartMask"];
                this.columnDefenseType = this.Columns["DefenseType"];
                this.columnSecondsToBuild = this.Columns["SecondsToBuild"];
                this.columnGroupID = this.Columns["GroupID"];
                this.columnExpendableSize = this.Columns["ExpendableSize"];
                this.columnCapabilities = this.Columns["Capabilities"];
            }
            
            private void InitClass() {
                this.columnExpendableID = new DataColumn("ExpendableID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpendableID);
                this.columnPrice = new DataColumn("Price", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice);
                this.columnFileModel = new DataColumn("FileModel", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFileModel);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnTechBitsRequired = new DataColumn("TechBitsRequired", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechBitsRequired);
                this.columnTechBitsEffect = new DataColumn("TechBitsEffect", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechBitsEffect);
                this.columnSignatureShip = new DataColumn("SignatureShip", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSignatureShip);
                this.columnMass = new DataColumn("Mass", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMass);
                this.columnLoadTime = new DataColumn("LoadTime", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLoadTime);
                this.columnLifeSpan = new DataColumn("LifeSpan", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLifeSpan);
                this.columnSignatureInstance = new DataColumn("SignatureInstance", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSignatureInstance);
                this.columnHitPoints = new DataColumn("HitPoints", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHitPoints);
                this.columnFileModelInstance = new DataColumn("FileModelInstance", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFileModelInstance);
                this.columnFileTextureInstance = new DataColumn("FileTextureInstance", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFileTextureInstance);
                this.columnRadius = new DataColumn("Radius", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRadius);
                this.columnRateRotation = new DataColumn("RateRotation", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRateRotation);
                this.columnpercentRed = new DataColumn("percentRed", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpercentRed);
                this.columnpercentGreen = new DataColumn("percentGreen", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpercentGreen);
                this.columnpercentBlue = new DataColumn("percentBlue", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpercentBlue);
                this.columnpercentAlpha = new DataColumn("percentAlpha", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpercentAlpha);
                this.columnPRIcon = new DataColumn("PRIcon", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPRIcon);
                this.columnPRIconInstance = new DataColumn("PRIconInstance", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPRIconInstance);
                this.columnPartMask = new DataColumn("PartMask", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartMask);
                this.columnDefenseType = new DataColumn("DefenseType", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDefenseType);
                this.columnSecondsToBuild = new DataColumn("SecondsToBuild", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecondsToBuild);
                this.columnGroupID = new DataColumn("GroupID", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroupID);
                this.columnExpendableSize = new DataColumn("ExpendableSize", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpendableSize);
                this.columnCapabilities = new DataColumn("Capabilities", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCapabilities);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnExpendableID}, true));
                this.columnExpendableID.AllowDBNull = false;
                this.columnExpendableID.Unique = true;
                this.columnPrice.AllowDBNull = false;
                this.columnFileModel.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnTechBitsRequired.AllowDBNull = false;
                this.columnTechBitsEffect.AllowDBNull = false;
                this.columnSignatureShip.AllowDBNull = false;
                this.columnMass.AllowDBNull = false;
                this.columnLoadTime.AllowDBNull = false;
                this.columnLifeSpan.AllowDBNull = false;
                this.columnSignatureInstance.AllowDBNull = false;
                this.columnHitPoints.AllowDBNull = false;
                this.columnFileModelInstance.AllowDBNull = false;
                this.columnFileTextureInstance.AllowDBNull = false;
                this.columnRadius.AllowDBNull = false;
                this.columnRateRotation.AllowDBNull = false;
                this.columnpercentRed.AllowDBNull = false;
                this.columnpercentGreen.AllowDBNull = false;
                this.columnpercentBlue.AllowDBNull = false;
                this.columnpercentAlpha.AllowDBNull = false;
                this.columnPartMask.AllowDBNull = false;
                this.columnDefenseType.AllowDBNull = false;
                this.columnSecondsToBuild.AllowDBNull = false;
                this.columnExpendableSize.AllowDBNull = false;
                this.columnCapabilities.AllowDBNull = false;
            }
            
            public ExpendablesRow NewExpendablesRow() {
                return ((ExpendablesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ExpendablesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ExpendablesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExpendablesRowChanged != null)) {
                    this.ExpendablesRowChanged(this, new ExpendablesRowChangeEvent(((ExpendablesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExpendablesRowChanging != null)) {
                    this.ExpendablesRowChanging(this, new ExpendablesRowChangeEvent(((ExpendablesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExpendablesRowDeleted != null)) {
                    this.ExpendablesRowDeleted(this, new ExpendablesRowChangeEvent(((ExpendablesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExpendablesRowDeleting != null)) {
                    this.ExpendablesRowDeleting(this, new ExpendablesRowChangeEvent(((ExpendablesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveExpendablesRow(ExpendablesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExpendablesRow : DataRow {
            
            private ExpendablesDataTable tableExpendables;
            
            internal ExpendablesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableExpendables = ((ExpendablesDataTable)(this.Table));
            }
            
            public short ExpendableID {
                get {
                    return ((short)(this[this.tableExpendables.ExpendableIDColumn]));
                }
                set {
                    this[this.tableExpendables.ExpendableIDColumn] = value;
                }
            }
            
            public int Price {
                get {
                    return ((int)(this[this.tableExpendables.PriceColumn]));
                }
                set {
                    this[this.tableExpendables.PriceColumn] = value;
                }
            }
            
            public string FileModel {
                get {
                    return ((string)(this[this.tableExpendables.FileModelColumn]));
                }
                set {
                    this[this.tableExpendables.FileModelColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableExpendables.NameColumn]));
                }
                set {
                    this[this.tableExpendables.NameColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableExpendables.DescriptionColumn]));
                }
                set {
                    this[this.tableExpendables.DescriptionColumn] = value;
                }
            }
            
            public string TechBitsRequired {
                get {
                    return ((string)(this[this.tableExpendables.TechBitsRequiredColumn]));
                }
                set {
                    this[this.tableExpendables.TechBitsRequiredColumn] = value;
                }
            }
            
            public string TechBitsEffect {
                get {
                    return ((string)(this[this.tableExpendables.TechBitsEffectColumn]));
                }
                set {
                    this[this.tableExpendables.TechBitsEffectColumn] = value;
                }
            }
            
            public System.Single SignatureShip {
                get {
                    return ((System.Single)(this[this.tableExpendables.SignatureShipColumn]));
                }
                set {
                    this[this.tableExpendables.SignatureShipColumn] = value;
                }
            }
            
            public System.Single Mass {
                get {
                    return ((System.Single)(this[this.tableExpendables.MassColumn]));
                }
                set {
                    this[this.tableExpendables.MassColumn] = value;
                }
            }
            
            public System.Single LoadTime {
                get {
                    return ((System.Single)(this[this.tableExpendables.LoadTimeColumn]));
                }
                set {
                    this[this.tableExpendables.LoadTimeColumn] = value;
                }
            }
            
            public System.Single LifeSpan {
                get {
                    return ((System.Single)(this[this.tableExpendables.LifeSpanColumn]));
                }
                set {
                    this[this.tableExpendables.LifeSpanColumn] = value;
                }
            }
            
            public System.Single SignatureInstance {
                get {
                    return ((System.Single)(this[this.tableExpendables.SignatureInstanceColumn]));
                }
                set {
                    this[this.tableExpendables.SignatureInstanceColumn] = value;
                }
            }
            
            public short HitPoints {
                get {
                    return ((short)(this[this.tableExpendables.HitPointsColumn]));
                }
                set {
                    this[this.tableExpendables.HitPointsColumn] = value;
                }
            }
            
            public string FileModelInstance {
                get {
                    return ((string)(this[this.tableExpendables.FileModelInstanceColumn]));
                }
                set {
                    this[this.tableExpendables.FileModelInstanceColumn] = value;
                }
            }
            
            public string FileTextureInstance {
                get {
                    return ((string)(this[this.tableExpendables.FileTextureInstanceColumn]));
                }
                set {
                    this[this.tableExpendables.FileTextureInstanceColumn] = value;
                }
            }
            
            public System.Single Radius {
                get {
                    return ((System.Single)(this[this.tableExpendables.RadiusColumn]));
                }
                set {
                    this[this.tableExpendables.RadiusColumn] = value;
                }
            }
            
            public System.Single RateRotation {
                get {
                    return ((System.Single)(this[this.tableExpendables.RateRotationColumn]));
                }
                set {
                    this[this.tableExpendables.RateRotationColumn] = value;
                }
            }
            
            public System.Byte percentRed {
                get {
                    return ((System.Byte)(this[this.tableExpendables.percentRedColumn]));
                }
                set {
                    this[this.tableExpendables.percentRedColumn] = value;
                }
            }
            
            public System.Byte percentGreen {
                get {
                    return ((System.Byte)(this[this.tableExpendables.percentGreenColumn]));
                }
                set {
                    this[this.tableExpendables.percentGreenColumn] = value;
                }
            }
            
            public System.Byte percentBlue {
                get {
                    return ((System.Byte)(this[this.tableExpendables.percentBlueColumn]));
                }
                set {
                    this[this.tableExpendables.percentBlueColumn] = value;
                }
            }
            
            public System.Byte percentAlpha {
                get {
                    return ((System.Byte)(this[this.tableExpendables.percentAlphaColumn]));
                }
                set {
                    this[this.tableExpendables.percentAlphaColumn] = value;
                }
            }
            
            public string PRIcon {
                get {
                    try {
                        return ((string)(this[this.tableExpendables.PRIconColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExpendables.PRIconColumn] = value;
                }
            }
            
            public string PRIconInstance {
                get {
                    try {
                        return ((string)(this[this.tableExpendables.PRIconInstanceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExpendables.PRIconInstanceColumn] = value;
                }
            }
            
            public short PartMask {
                get {
                    return ((short)(this[this.tableExpendables.PartMaskColumn]));
                }
                set {
                    this[this.tableExpendables.PartMaskColumn] = value;
                }
            }
            
            public System.Byte DefenseType {
                get {
                    return ((System.Byte)(this[this.tableExpendables.DefenseTypeColumn]));
                }
                set {
                    this[this.tableExpendables.DefenseTypeColumn] = value;
                }
            }
            
            public short SecondsToBuild {
                get {
                    return ((short)(this[this.tableExpendables.SecondsToBuildColumn]));
                }
                set {
                    this[this.tableExpendables.SecondsToBuildColumn] = value;
                }
            }
            
            public System.Byte GroupID {
                get {
                    try {
                        return ((System.Byte)(this[this.tableExpendables.GroupIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExpendables.GroupIDColumn] = value;
                }
            }
            
            public short ExpendableSize {
                get {
                    return ((short)(this[this.tableExpendables.ExpendableSizeColumn]));
                }
                set {
                    this[this.tableExpendables.ExpendableSizeColumn] = value;
                }
            }
            
            public short Capabilities {
                get {
                    return ((short)(this[this.tableExpendables.CapabilitiesColumn]));
                }
                set {
                    this[this.tableExpendables.CapabilitiesColumn] = value;
                }
            }
            
            public bool IsPRIconNull() {
                return this.IsNull(this.tableExpendables.PRIconColumn);
            }
            
            public void SetPRIconNull() {
                this[this.tableExpendables.PRIconColumn] = System.Convert.DBNull;
            }
            
            public bool IsPRIconInstanceNull() {
                return this.IsNull(this.tableExpendables.PRIconInstanceColumn);
            }
            
            public void SetPRIconInstanceNull() {
                this[this.tableExpendables.PRIconInstanceColumn] = System.Convert.DBNull;
            }
            
            public bool IsGroupIDNull() {
                return this.IsNull(this.tableExpendables.GroupIDColumn);
            }
            
            public void SetGroupIDNull() {
                this[this.tableExpendables.GroupIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExpendablesRowChangeEvent : EventArgs {
            
            private ExpendablesRow eventRow;
            
            private DataRowAction eventAction;
            
            public ExpendablesRowChangeEvent(ExpendablesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ExpendablesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GlobalAttributesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnGlobalAttributeID;
            
            private DataColumn columnMaxSpeed;
            
            private DataColumn columnThrust;
            
            private DataColumn columnTurnRate;
            
            private DataColumn columnTurnTorque;
            
            private DataColumn columnMaxArmorStation;
            
            private DataColumn columnArmorRegenerationStation;
            
            private DataColumn columnMaxShieldStation;
            
            private DataColumn columnShieldRegenerationStation;
            
            private DataColumn columnMaxArmorShip;
            
            private DataColumn columnMaxShieldShip;
            
            private DataColumn columnShieldRegenerationShip;
            
            private DataColumn columnScanRange;
            
            private DataColumn columnSignature;
            
            private DataColumn columnMaxEnergy;
            
            private DataColumn columnSpeedAmmo;
            
            private DataColumn columnLifespanEnergy;
            
            private DataColumn columnTurnRateMissile;
            
            private DataColumn columnMiningRate;
            
            private DataColumn columnMiningYield;
            
            private DataColumn columnRipcordTime;
            
            private DataColumn columnDamageGuns;
            
            private DataColumn columnDamageMissiles;
            
            private DataColumn columnDevelopmentCost;
            
            private DataColumn columnDevelopmentTime;
            
            private DataColumn columnMiningCapacity;
            
            internal GlobalAttributesDataTable() : 
                    base("GlobalAttributes") {
                this.InitClass();
            }
            
            internal GlobalAttributesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn GlobalAttributeIDColumn {
                get {
                    return this.columnGlobalAttributeID;
                }
            }
            
            internal DataColumn MaxSpeedColumn {
                get {
                    return this.columnMaxSpeed;
                }
            }
            
            internal DataColumn ThrustColumn {
                get {
                    return this.columnThrust;
                }
            }
            
            internal DataColumn TurnRateColumn {
                get {
                    return this.columnTurnRate;
                }
            }
            
            internal DataColumn TurnTorqueColumn {
                get {
                    return this.columnTurnTorque;
                }
            }
            
            internal DataColumn MaxArmorStationColumn {
                get {
                    return this.columnMaxArmorStation;
                }
            }
            
            internal DataColumn ArmorRegenerationStationColumn {
                get {
                    return this.columnArmorRegenerationStation;
                }
            }
            
            internal DataColumn MaxShieldStationColumn {
                get {
                    return this.columnMaxShieldStation;
                }
            }
            
            internal DataColumn ShieldRegenerationStationColumn {
                get {
                    return this.columnShieldRegenerationStation;
                }
            }
            
            internal DataColumn MaxArmorShipColumn {
                get {
                    return this.columnMaxArmorShip;
                }
            }
            
            internal DataColumn MaxShieldShipColumn {
                get {
                    return this.columnMaxShieldShip;
                }
            }
            
            internal DataColumn ShieldRegenerationShipColumn {
                get {
                    return this.columnShieldRegenerationShip;
                }
            }
            
            internal DataColumn ScanRangeColumn {
                get {
                    return this.columnScanRange;
                }
            }
            
            internal DataColumn SignatureColumn {
                get {
                    return this.columnSignature;
                }
            }
            
            internal DataColumn MaxEnergyColumn {
                get {
                    return this.columnMaxEnergy;
                }
            }
            
            internal DataColumn SpeedAmmoColumn {
                get {
                    return this.columnSpeedAmmo;
                }
            }
            
            internal DataColumn LifespanEnergyColumn {
                get {
                    return this.columnLifespanEnergy;
                }
            }
            
            internal DataColumn TurnRateMissileColumn {
                get {
                    return this.columnTurnRateMissile;
                }
            }
            
            internal DataColumn MiningRateColumn {
                get {
                    return this.columnMiningRate;
                }
            }
            
            internal DataColumn MiningYieldColumn {
                get {
                    return this.columnMiningYield;
                }
            }
            
            internal DataColumn RipcordTimeColumn {
                get {
                    return this.columnRipcordTime;
                }
            }
            
            internal DataColumn DamageGunsColumn {
                get {
                    return this.columnDamageGuns;
                }
            }
            
            internal DataColumn DamageMissilesColumn {
                get {
                    return this.columnDamageMissiles;
                }
            }
            
            internal DataColumn DevelopmentCostColumn {
                get {
                    return this.columnDevelopmentCost;
                }
            }
            
            internal DataColumn DevelopmentTimeColumn {
                get {
                    return this.columnDevelopmentTime;
                }
            }
            
            internal DataColumn MiningCapacityColumn {
                get {
                    return this.columnMiningCapacity;
                }
            }
            
            public GlobalAttributesRow this[int index] {
                get {
                    return ((GlobalAttributesRow)(this.Rows[index]));
                }
            }
            
            public event GlobalAttributesRowChangeEventHandler GlobalAttributesRowChanged;
            
            public event GlobalAttributesRowChangeEventHandler GlobalAttributesRowChanging;
            
            public event GlobalAttributesRowChangeEventHandler GlobalAttributesRowDeleted;
            
            public event GlobalAttributesRowChangeEventHandler GlobalAttributesRowDeleting;
            
            public void AddGlobalAttributesRow(GlobalAttributesRow row) {
                this.Rows.Add(row);
            }
            
            public GlobalAttributesRow AddGlobalAttributesRow(
                        short GlobalAttributeID, 
                        short MaxSpeed, 
                        short Thrust, 
                        short TurnRate, 
                        short TurnTorque, 
                        short MaxArmorStation, 
                        short ArmorRegenerationStation, 
                        short MaxShieldStation, 
                        short ShieldRegenerationStation, 
                        short MaxArmorShip, 
                        short MaxShieldShip, 
                        short ShieldRegenerationShip, 
                        short ScanRange, 
                        short Signature, 
                        short MaxEnergy, 
                        short SpeedAmmo, 
                        short LifespanEnergy, 
                        short TurnRateMissile, 
                        short MiningRate, 
                        short MiningYield, 
                        short RipcordTime, 
                        short DamageGuns, 
                        short DamageMissiles, 
                        short DevelopmentCost, 
                        short DevelopmentTime, 
                        short MiningCapacity) {
                GlobalAttributesRow rowGlobalAttributesRow = ((GlobalAttributesRow)(this.NewRow()));
                rowGlobalAttributesRow.ItemArray = new object[] {
                        GlobalAttributeID,
                        MaxSpeed,
                        Thrust,
                        TurnRate,
                        TurnTorque,
                        MaxArmorStation,
                        ArmorRegenerationStation,
                        MaxShieldStation,
                        ShieldRegenerationStation,
                        MaxArmorShip,
                        MaxShieldShip,
                        ShieldRegenerationShip,
                        ScanRange,
                        Signature,
                        MaxEnergy,
                        SpeedAmmo,
                        LifespanEnergy,
                        TurnRateMissile,
                        MiningRate,
                        MiningYield,
                        RipcordTime,
                        DamageGuns,
                        DamageMissiles,
                        DevelopmentCost,
                        DevelopmentTime,
                        MiningCapacity};
                this.Rows.Add(rowGlobalAttributesRow);
                return rowGlobalAttributesRow;
            }
            
            public GlobalAttributesRow FindByGlobalAttributeID(short GlobalAttributeID) {
                return ((GlobalAttributesRow)(this.Rows.Find(new object[] {
                            GlobalAttributeID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GlobalAttributesDataTable cln = ((GlobalAttributesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GlobalAttributesDataTable();
            }
            
            internal void InitVars() {
                this.columnGlobalAttributeID = this.Columns["GlobalAttributeID"];
                this.columnMaxSpeed = this.Columns["MaxSpeed"];
                this.columnThrust = this.Columns["Thrust"];
                this.columnTurnRate = this.Columns["TurnRate"];
                this.columnTurnTorque = this.Columns["TurnTorque"];
                this.columnMaxArmorStation = this.Columns["MaxArmorStation"];
                this.columnArmorRegenerationStation = this.Columns["ArmorRegenerationStation"];
                this.columnMaxShieldStation = this.Columns["MaxShieldStation"];
                this.columnShieldRegenerationStation = this.Columns["ShieldRegenerationStation"];
                this.columnMaxArmorShip = this.Columns["MaxArmorShip"];
                this.columnMaxShieldShip = this.Columns["MaxShieldShip"];
                this.columnShieldRegenerationShip = this.Columns["ShieldRegenerationShip"];
                this.columnScanRange = this.Columns["ScanRange"];
                this.columnSignature = this.Columns["Signature"];
                this.columnMaxEnergy = this.Columns["MaxEnergy"];
                this.columnSpeedAmmo = this.Columns["SpeedAmmo"];
                this.columnLifespanEnergy = this.Columns["LifespanEnergy"];
                this.columnTurnRateMissile = this.Columns["TurnRateMissile"];
                this.columnMiningRate = this.Columns["MiningRate"];
                this.columnMiningYield = this.Columns["MiningYield"];
                this.columnRipcordTime = this.Columns["RipcordTime"];
                this.columnDamageGuns = this.Columns["DamageGuns"];
                this.columnDamageMissiles = this.Columns["DamageMissiles"];
                this.columnDevelopmentCost = this.Columns["DevelopmentCost"];
                this.columnDevelopmentTime = this.Columns["DevelopmentTime"];
                this.columnMiningCapacity = this.Columns["MiningCapacity"];
            }
            
            private void InitClass() {
                this.columnGlobalAttributeID = new DataColumn("GlobalAttributeID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGlobalAttributeID);
                this.columnMaxSpeed = new DataColumn("MaxSpeed", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxSpeed);
                this.columnThrust = new DataColumn("Thrust", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnThrust);
                this.columnTurnRate = new DataColumn("TurnRate", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTurnRate);
                this.columnTurnTorque = new DataColumn("TurnTorque", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTurnTorque);
                this.columnMaxArmorStation = new DataColumn("MaxArmorStation", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxArmorStation);
                this.columnArmorRegenerationStation = new DataColumn("ArmorRegenerationStation", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnArmorRegenerationStation);
                this.columnMaxShieldStation = new DataColumn("MaxShieldStation", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxShieldStation);
                this.columnShieldRegenerationStation = new DataColumn("ShieldRegenerationStation", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShieldRegenerationStation);
                this.columnMaxArmorShip = new DataColumn("MaxArmorShip", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxArmorShip);
                this.columnMaxShieldShip = new DataColumn("MaxShieldShip", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxShieldShip);
                this.columnShieldRegenerationShip = new DataColumn("ShieldRegenerationShip", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShieldRegenerationShip);
                this.columnScanRange = new DataColumn("ScanRange", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnScanRange);
                this.columnSignature = new DataColumn("Signature", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSignature);
                this.columnMaxEnergy = new DataColumn("MaxEnergy", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxEnergy);
                this.columnSpeedAmmo = new DataColumn("SpeedAmmo", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpeedAmmo);
                this.columnLifespanEnergy = new DataColumn("LifespanEnergy", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLifespanEnergy);
                this.columnTurnRateMissile = new DataColumn("TurnRateMissile", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTurnRateMissile);
                this.columnMiningRate = new DataColumn("MiningRate", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMiningRate);
                this.columnMiningYield = new DataColumn("MiningYield", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMiningYield);
                this.columnRipcordTime = new DataColumn("RipcordTime", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRipcordTime);
                this.columnDamageGuns = new DataColumn("DamageGuns", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDamageGuns);
                this.columnDamageMissiles = new DataColumn("DamageMissiles", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDamageMissiles);
                this.columnDevelopmentCost = new DataColumn("DevelopmentCost", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDevelopmentCost);
                this.columnDevelopmentTime = new DataColumn("DevelopmentTime", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDevelopmentTime);
                this.columnMiningCapacity = new DataColumn("MiningCapacity", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMiningCapacity);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnGlobalAttributeID}, true));
                this.columnGlobalAttributeID.AllowDBNull = false;
                this.columnGlobalAttributeID.Unique = true;
                this.columnMaxSpeed.AllowDBNull = false;
                this.columnThrust.AllowDBNull = false;
                this.columnTurnRate.AllowDBNull = false;
                this.columnTurnTorque.AllowDBNull = false;
                this.columnMaxArmorStation.AllowDBNull = false;
                this.columnArmorRegenerationStation.AllowDBNull = false;
                this.columnMaxShieldStation.AllowDBNull = false;
                this.columnShieldRegenerationStation.AllowDBNull = false;
                this.columnMaxArmorShip.AllowDBNull = false;
                this.columnMaxShieldShip.AllowDBNull = false;
                this.columnShieldRegenerationShip.AllowDBNull = false;
                this.columnScanRange.AllowDBNull = false;
                this.columnSignature.AllowDBNull = false;
                this.columnMaxEnergy.AllowDBNull = false;
                this.columnSpeedAmmo.AllowDBNull = false;
                this.columnLifespanEnergy.AllowDBNull = false;
                this.columnTurnRateMissile.AllowDBNull = false;
                this.columnMiningRate.AllowDBNull = false;
                this.columnMiningYield.AllowDBNull = false;
                this.columnRipcordTime.AllowDBNull = false;
                this.columnDamageGuns.AllowDBNull = false;
                this.columnDamageMissiles.AllowDBNull = false;
                this.columnDevelopmentCost.AllowDBNull = false;
                this.columnDevelopmentTime.AllowDBNull = false;
                this.columnMiningCapacity.AllowDBNull = false;
            }
            
            public GlobalAttributesRow NewGlobalAttributesRow() {
                return ((GlobalAttributesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GlobalAttributesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GlobalAttributesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GlobalAttributesRowChanged != null)) {
                    this.GlobalAttributesRowChanged(this, new GlobalAttributesRowChangeEvent(((GlobalAttributesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GlobalAttributesRowChanging != null)) {
                    this.GlobalAttributesRowChanging(this, new GlobalAttributesRowChangeEvent(((GlobalAttributesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GlobalAttributesRowDeleted != null)) {
                    this.GlobalAttributesRowDeleted(this, new GlobalAttributesRowChangeEvent(((GlobalAttributesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GlobalAttributesRowDeleting != null)) {
                    this.GlobalAttributesRowDeleting(this, new GlobalAttributesRowChangeEvent(((GlobalAttributesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGlobalAttributesRow(GlobalAttributesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GlobalAttributesRow : DataRow {
            
            private GlobalAttributesDataTable tableGlobalAttributes;
            
            internal GlobalAttributesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGlobalAttributes = ((GlobalAttributesDataTable)(this.Table));
            }
            
            public short GlobalAttributeID {
                get {
                    return ((short)(this[this.tableGlobalAttributes.GlobalAttributeIDColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.GlobalAttributeIDColumn] = value;
                }
            }
            
            public short MaxSpeed {
                get {
                    return ((short)(this[this.tableGlobalAttributes.MaxSpeedColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.MaxSpeedColumn] = value;
                }
            }
            
            public short Thrust {
                get {
                    return ((short)(this[this.tableGlobalAttributes.ThrustColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.ThrustColumn] = value;
                }
            }
            
            public short TurnRate {
                get {
                    return ((short)(this[this.tableGlobalAttributes.TurnRateColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.TurnRateColumn] = value;
                }
            }
            
            public short TurnTorque {
                get {
                    return ((short)(this[this.tableGlobalAttributes.TurnTorqueColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.TurnTorqueColumn] = value;
                }
            }
            
            public short MaxArmorStation {
                get {
                    return ((short)(this[this.tableGlobalAttributes.MaxArmorStationColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.MaxArmorStationColumn] = value;
                }
            }
            
            public short ArmorRegenerationStation {
                get {
                    return ((short)(this[this.tableGlobalAttributes.ArmorRegenerationStationColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.ArmorRegenerationStationColumn] = value;
                }
            }
            
            public short MaxShieldStation {
                get {
                    return ((short)(this[this.tableGlobalAttributes.MaxShieldStationColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.MaxShieldStationColumn] = value;
                }
            }
            
            public short ShieldRegenerationStation {
                get {
                    return ((short)(this[this.tableGlobalAttributes.ShieldRegenerationStationColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.ShieldRegenerationStationColumn] = value;
                }
            }
            
            public short MaxArmorShip {
                get {
                    return ((short)(this[this.tableGlobalAttributes.MaxArmorShipColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.MaxArmorShipColumn] = value;
                }
            }
            
            public short MaxShieldShip {
                get {
                    return ((short)(this[this.tableGlobalAttributes.MaxShieldShipColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.MaxShieldShipColumn] = value;
                }
            }
            
            public short ShieldRegenerationShip {
                get {
                    return ((short)(this[this.tableGlobalAttributes.ShieldRegenerationShipColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.ShieldRegenerationShipColumn] = value;
                }
            }
            
            public short ScanRange {
                get {
                    return ((short)(this[this.tableGlobalAttributes.ScanRangeColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.ScanRangeColumn] = value;
                }
            }
            
            public short Signature {
                get {
                    return ((short)(this[this.tableGlobalAttributes.SignatureColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.SignatureColumn] = value;
                }
            }
            
            public short MaxEnergy {
                get {
                    return ((short)(this[this.tableGlobalAttributes.MaxEnergyColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.MaxEnergyColumn] = value;
                }
            }
            
            public short SpeedAmmo {
                get {
                    return ((short)(this[this.tableGlobalAttributes.SpeedAmmoColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.SpeedAmmoColumn] = value;
                }
            }
            
            public short LifespanEnergy {
                get {
                    return ((short)(this[this.tableGlobalAttributes.LifespanEnergyColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.LifespanEnergyColumn] = value;
                }
            }
            
            public short TurnRateMissile {
                get {
                    return ((short)(this[this.tableGlobalAttributes.TurnRateMissileColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.TurnRateMissileColumn] = value;
                }
            }
            
            public short MiningRate {
                get {
                    return ((short)(this[this.tableGlobalAttributes.MiningRateColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.MiningRateColumn] = value;
                }
            }
            
            public short MiningYield {
                get {
                    return ((short)(this[this.tableGlobalAttributes.MiningYieldColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.MiningYieldColumn] = value;
                }
            }
            
            public short RipcordTime {
                get {
                    return ((short)(this[this.tableGlobalAttributes.RipcordTimeColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.RipcordTimeColumn] = value;
                }
            }
            
            public short DamageGuns {
                get {
                    return ((short)(this[this.tableGlobalAttributes.DamageGunsColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.DamageGunsColumn] = value;
                }
            }
            
            public short DamageMissiles {
                get {
                    return ((short)(this[this.tableGlobalAttributes.DamageMissilesColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.DamageMissilesColumn] = value;
                }
            }
            
            public short DevelopmentCost {
                get {
                    return ((short)(this[this.tableGlobalAttributes.DevelopmentCostColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.DevelopmentCostColumn] = value;
                }
            }
            
            public short DevelopmentTime {
                get {
                    return ((short)(this[this.tableGlobalAttributes.DevelopmentTimeColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.DevelopmentTimeColumn] = value;
                }
            }
            
            public short MiningCapacity {
                get {
                    return ((short)(this[this.tableGlobalAttributes.MiningCapacityColumn]));
                }
                set {
                    this[this.tableGlobalAttributes.MiningCapacityColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GlobalAttributesRowChangeEvent : EventArgs {
            
            private GlobalAttributesRow eventRow;
            
            private DataRowAction eventAction;
            
            public GlobalAttributesRowChangeEvent(GlobalAttributesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GlobalAttributesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MagazinesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPartID;
            
            private DataColumn columnAmount;
            
            private DataColumn columnExpendableID;
            
            private DataColumn columnSuccessorPartID;
            
            private DataColumn columnLaunchCount;
            
            internal MagazinesDataTable() : 
                    base("Magazines") {
                this.InitClass();
            }
            
            internal MagazinesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PartIDColumn {
                get {
                    return this.columnPartID;
                }
            }
            
            internal DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            internal DataColumn ExpendableIDColumn {
                get {
                    return this.columnExpendableID;
                }
            }
            
            internal DataColumn SuccessorPartIDColumn {
                get {
                    return this.columnSuccessorPartID;
                }
            }
            
            internal DataColumn LaunchCountColumn {
                get {
                    return this.columnLaunchCount;
                }
            }
            
            public MagazinesRow this[int index] {
                get {
                    return ((MagazinesRow)(this.Rows[index]));
                }
            }
            
            public event MagazinesRowChangeEventHandler MagazinesRowChanged;
            
            public event MagazinesRowChangeEventHandler MagazinesRowChanging;
            
            public event MagazinesRowChangeEventHandler MagazinesRowDeleted;
            
            public event MagazinesRowChangeEventHandler MagazinesRowDeleting;
            
            public void AddMagazinesRow(MagazinesRow row) {
                this.Rows.Add(row);
            }
            
            public MagazinesRow AddMagazinesRow(short PartID, short Amount, short ExpendableID, short SuccessorPartID, short LaunchCount) {
                MagazinesRow rowMagazinesRow = ((MagazinesRow)(this.NewRow()));
                rowMagazinesRow.ItemArray = new object[] {
                        PartID,
                        Amount,
                        ExpendableID,
                        SuccessorPartID,
                        LaunchCount};
                this.Rows.Add(rowMagazinesRow);
                return rowMagazinesRow;
            }
            
            public MagazinesRow FindByPartID(short PartID) {
                return ((MagazinesRow)(this.Rows.Find(new object[] {
                            PartID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MagazinesDataTable cln = ((MagazinesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MagazinesDataTable();
            }
            
            internal void InitVars() {
                this.columnPartID = this.Columns["PartID"];
                this.columnAmount = this.Columns["Amount"];
                this.columnExpendableID = this.Columns["ExpendableID"];
                this.columnSuccessorPartID = this.Columns["SuccessorPartID"];
                this.columnLaunchCount = this.Columns["LaunchCount"];
            }
            
            private void InitClass() {
                this.columnPartID = new DataColumn("PartID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartID);
                this.columnAmount = new DataColumn("Amount", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmount);
                this.columnExpendableID = new DataColumn("ExpendableID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpendableID);
                this.columnSuccessorPartID = new DataColumn("SuccessorPartID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSuccessorPartID);
                this.columnLaunchCount = new DataColumn("LaunchCount", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLaunchCount);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPartID}, true));
                this.columnPartID.AllowDBNull = false;
                this.columnPartID.Unique = true;
                this.columnAmount.AllowDBNull = false;
                this.columnExpendableID.AllowDBNull = false;
            }
            
            public MagazinesRow NewMagazinesRow() {
                return ((MagazinesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MagazinesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MagazinesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MagazinesRowChanged != null)) {
                    this.MagazinesRowChanged(this, new MagazinesRowChangeEvent(((MagazinesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MagazinesRowChanging != null)) {
                    this.MagazinesRowChanging(this, new MagazinesRowChangeEvent(((MagazinesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MagazinesRowDeleted != null)) {
                    this.MagazinesRowDeleted(this, new MagazinesRowChangeEvent(((MagazinesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MagazinesRowDeleting != null)) {
                    this.MagazinesRowDeleting(this, new MagazinesRowChangeEvent(((MagazinesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMagazinesRow(MagazinesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MagazinesRow : DataRow {
            
            private MagazinesDataTable tableMagazines;
            
            internal MagazinesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMagazines = ((MagazinesDataTable)(this.Table));
            }
            
            public short PartID {
                get {
                    return ((short)(this[this.tableMagazines.PartIDColumn]));
                }
                set {
                    this[this.tableMagazines.PartIDColumn] = value;
                }
            }
            
            public short Amount {
                get {
                    return ((short)(this[this.tableMagazines.AmountColumn]));
                }
                set {
                    this[this.tableMagazines.AmountColumn] = value;
                }
            }
            
            public short ExpendableID {
                get {
                    return ((short)(this[this.tableMagazines.ExpendableIDColumn]));
                }
                set {
                    this[this.tableMagazines.ExpendableIDColumn] = value;
                }
            }
            
            public short SuccessorPartID {
                get {
                    try {
                        return ((short)(this[this.tableMagazines.SuccessorPartIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMagazines.SuccessorPartIDColumn] = value;
                }
            }
            
            public short LaunchCount {
                get {
                    try {
                        return ((short)(this[this.tableMagazines.LaunchCountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMagazines.LaunchCountColumn] = value;
                }
            }
            
            public bool IsSuccessorPartIDNull() {
                return this.IsNull(this.tableMagazines.SuccessorPartIDColumn);
            }
            
            public void SetSuccessorPartIDNull() {
                this[this.tableMagazines.SuccessorPartIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsLaunchCountNull() {
                return this.IsNull(this.tableMagazines.LaunchCountColumn);
            }
            
            public void SetLaunchCountNull() {
                this[this.tableMagazines.LaunchCountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MagazinesRowChangeEvent : EventArgs {
            
            private MagazinesRow eventRow;
            
            private DataRowAction eventAction;
            
            public MagazinesRowChangeEvent(MagazinesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MagazinesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MinesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnExpendableID;
            
            private DataColumn columnPlacementRadius;
            
            private DataColumn columnMunitionCount;
            
            private DataColumn columnPower;
            
            private DataColumn columnDamageType;
            
            private DataColumn columnFileTextureMunition;
            
            private DataColumn columnpercentRedMunition;
            
            private DataColumn columnpercentGreenMunition;
            
            private DataColumn columnpercentBlueMunition;
            
            private DataColumn columnpercentAlphaMunition;
            
            private DataColumn columnPRIconMunition;
            
            internal MinesDataTable() : 
                    base("Mines") {
                this.InitClass();
            }
            
            internal MinesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ExpendableIDColumn {
                get {
                    return this.columnExpendableID;
                }
            }
            
            internal DataColumn PlacementRadiusColumn {
                get {
                    return this.columnPlacementRadius;
                }
            }
            
            internal DataColumn MunitionCountColumn {
                get {
                    return this.columnMunitionCount;
                }
            }
            
            internal DataColumn PowerColumn {
                get {
                    return this.columnPower;
                }
            }
            
            internal DataColumn DamageTypeColumn {
                get {
                    return this.columnDamageType;
                }
            }
            
            internal DataColumn FileTextureMunitionColumn {
                get {
                    return this.columnFileTextureMunition;
                }
            }
            
            internal DataColumn percentRedMunitionColumn {
                get {
                    return this.columnpercentRedMunition;
                }
            }
            
            internal DataColumn percentGreenMunitionColumn {
                get {
                    return this.columnpercentGreenMunition;
                }
            }
            
            internal DataColumn percentBlueMunitionColumn {
                get {
                    return this.columnpercentBlueMunition;
                }
            }
            
            internal DataColumn percentAlphaMunitionColumn {
                get {
                    return this.columnpercentAlphaMunition;
                }
            }
            
            internal DataColumn PRIconMunitionColumn {
                get {
                    return this.columnPRIconMunition;
                }
            }
            
            public MinesRow this[int index] {
                get {
                    return ((MinesRow)(this.Rows[index]));
                }
            }
            
            public event MinesRowChangeEventHandler MinesRowChanged;
            
            public event MinesRowChangeEventHandler MinesRowChanging;
            
            public event MinesRowChangeEventHandler MinesRowDeleted;
            
            public event MinesRowChangeEventHandler MinesRowDeleting;
            
            public void AddMinesRow(MinesRow row) {
                this.Rows.Add(row);
            }
            
            public MinesRow AddMinesRow(short ExpendableID, System.Single PlacementRadius, System.Byte MunitionCount, System.Single Power, System.Byte DamageType, string FileTextureMunition, System.Byte percentRedMunition, System.Byte percentGreenMunition, System.Byte percentBlueMunition, System.Byte percentAlphaMunition, string PRIconMunition) {
                MinesRow rowMinesRow = ((MinesRow)(this.NewRow()));
                rowMinesRow.ItemArray = new object[] {
                        ExpendableID,
                        PlacementRadius,
                        MunitionCount,
                        Power,
                        DamageType,
                        FileTextureMunition,
                        percentRedMunition,
                        percentGreenMunition,
                        percentBlueMunition,
                        percentAlphaMunition,
                        PRIconMunition};
                this.Rows.Add(rowMinesRow);
                return rowMinesRow;
            }
            
            public MinesRow FindByExpendableID(short ExpendableID) {
                return ((MinesRow)(this.Rows.Find(new object[] {
                            ExpendableID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MinesDataTable cln = ((MinesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MinesDataTable();
            }
            
            internal void InitVars() {
                this.columnExpendableID = this.Columns["ExpendableID"];
                this.columnPlacementRadius = this.Columns["PlacementRadius"];
                this.columnMunitionCount = this.Columns["MunitionCount"];
                this.columnPower = this.Columns["Power"];
                this.columnDamageType = this.Columns["DamageType"];
                this.columnFileTextureMunition = this.Columns["FileTextureMunition"];
                this.columnpercentRedMunition = this.Columns["percentRedMunition"];
                this.columnpercentGreenMunition = this.Columns["percentGreenMunition"];
                this.columnpercentBlueMunition = this.Columns["percentBlueMunition"];
                this.columnpercentAlphaMunition = this.Columns["percentAlphaMunition"];
                this.columnPRIconMunition = this.Columns["PRIconMunition"];
            }
            
            private void InitClass() {
                this.columnExpendableID = new DataColumn("ExpendableID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpendableID);
                this.columnPlacementRadius = new DataColumn("PlacementRadius", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlacementRadius);
                this.columnMunitionCount = new DataColumn("MunitionCount", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMunitionCount);
                this.columnPower = new DataColumn("Power", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPower);
                this.columnDamageType = new DataColumn("DamageType", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDamageType);
                this.columnFileTextureMunition = new DataColumn("FileTextureMunition", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFileTextureMunition);
                this.columnpercentRedMunition = new DataColumn("percentRedMunition", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpercentRedMunition);
                this.columnpercentGreenMunition = new DataColumn("percentGreenMunition", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpercentGreenMunition);
                this.columnpercentBlueMunition = new DataColumn("percentBlueMunition", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpercentBlueMunition);
                this.columnpercentAlphaMunition = new DataColumn("percentAlphaMunition", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpercentAlphaMunition);
                this.columnPRIconMunition = new DataColumn("PRIconMunition", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPRIconMunition);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnExpendableID}, true));
                this.columnExpendableID.AllowDBNull = false;
                this.columnExpendableID.Unique = true;
                this.columnPlacementRadius.AllowDBNull = false;
                this.columnMunitionCount.AllowDBNull = false;
                this.columnPower.AllowDBNull = false;
                this.columnDamageType.AllowDBNull = false;
                this.columnFileTextureMunition.AllowDBNull = false;
                this.columnpercentRedMunition.AllowDBNull = false;
                this.columnpercentGreenMunition.AllowDBNull = false;
                this.columnpercentBlueMunition.AllowDBNull = false;
                this.columnpercentAlphaMunition.AllowDBNull = false;
            }
            
            public MinesRow NewMinesRow() {
                return ((MinesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MinesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MinesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MinesRowChanged != null)) {
                    this.MinesRowChanged(this, new MinesRowChangeEvent(((MinesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MinesRowChanging != null)) {
                    this.MinesRowChanging(this, new MinesRowChangeEvent(((MinesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MinesRowDeleted != null)) {
                    this.MinesRowDeleted(this, new MinesRowChangeEvent(((MinesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MinesRowDeleting != null)) {
                    this.MinesRowDeleting(this, new MinesRowChangeEvent(((MinesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMinesRow(MinesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MinesRow : DataRow {
            
            private MinesDataTable tableMines;
            
            internal MinesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMines = ((MinesDataTable)(this.Table));
            }
            
            public short ExpendableID {
                get {
                    return ((short)(this[this.tableMines.ExpendableIDColumn]));
                }
                set {
                    this[this.tableMines.ExpendableIDColumn] = value;
                }
            }
            
            public System.Single PlacementRadius {
                get {
                    return ((System.Single)(this[this.tableMines.PlacementRadiusColumn]));
                }
                set {
                    this[this.tableMines.PlacementRadiusColumn] = value;
                }
            }
            
            public System.Byte MunitionCount {
                get {
                    return ((System.Byte)(this[this.tableMines.MunitionCountColumn]));
                }
                set {
                    this[this.tableMines.MunitionCountColumn] = value;
                }
            }
            
            public System.Single Power {
                get {
                    return ((System.Single)(this[this.tableMines.PowerColumn]));
                }
                set {
                    this[this.tableMines.PowerColumn] = value;
                }
            }
            
            public System.Byte DamageType {
                get {
                    return ((System.Byte)(this[this.tableMines.DamageTypeColumn]));
                }
                set {
                    this[this.tableMines.DamageTypeColumn] = value;
                }
            }
            
            public string FileTextureMunition {
                get {
                    return ((string)(this[this.tableMines.FileTextureMunitionColumn]));
                }
                set {
                    this[this.tableMines.FileTextureMunitionColumn] = value;
                }
            }
            
            public System.Byte percentRedMunition {
                get {
                    return ((System.Byte)(this[this.tableMines.percentRedMunitionColumn]));
                }
                set {
                    this[this.tableMines.percentRedMunitionColumn] = value;
                }
            }
            
            public System.Byte percentGreenMunition {
                get {
                    return ((System.Byte)(this[this.tableMines.percentGreenMunitionColumn]));
                }
                set {
                    this[this.tableMines.percentGreenMunitionColumn] = value;
                }
            }
            
            public System.Byte percentBlueMunition {
                get {
                    return ((System.Byte)(this[this.tableMines.percentBlueMunitionColumn]));
                }
                set {
                    this[this.tableMines.percentBlueMunitionColumn] = value;
                }
            }
            
            public System.Byte percentAlphaMunition {
                get {
                    return ((System.Byte)(this[this.tableMines.percentAlphaMunitionColumn]));
                }
                set {
                    this[this.tableMines.percentAlphaMunitionColumn] = value;
                }
            }
            
            public string PRIconMunition {
                get {
                    try {
                        return ((string)(this[this.tableMines.PRIconMunitionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMines.PRIconMunitionColumn] = value;
                }
            }
            
            public bool IsPRIconMunitionNull() {
                return this.IsNull(this.tableMines.PRIconMunitionColumn);
            }
            
            public void SetPRIconMunitionNull() {
                this[this.tableMines.PRIconMunitionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MinesRowChangeEvent : EventArgs {
            
            private MinesRow eventRow;
            
            private DataRowAction eventAction;
            
            public MinesRowChangeEvent(MinesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MinesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MissilesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnExpendableID;
            
            private DataColumn columnAcceleration;
            
            private DataColumn columnTurnRate;
            
            private DataColumn columnInitialSpeed;
            
            private DataColumn columnArmTime;
            
            private DataColumn columnLockTime;
            
            private DataColumn columnReadyTime;
            
            private DataColumn columnDispersion;
            
            private DataColumn columnLockAngle;
            
            private DataColumn columnPower;
            
            private DataColumn columnDamageType;
            
            private DataColumn columnBlastPower;
            
            private DataColumn columnBlastRadius;
            
            private DataColumn columnIsDirectional;
            
            private DataColumn columnWidthOverHeight;
            
            private DataColumn columnMaxLock;
            
            private DataColumn columnChaffResistance;
            
            private DataColumn columnLaunchSound;
            
            private DataColumn columnFlightSound;
            
            internal MissilesDataTable() : 
                    base("Missiles") {
                this.InitClass();
            }
            
            internal MissilesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ExpendableIDColumn {
                get {
                    return this.columnExpendableID;
                }
            }
            
            internal DataColumn AccelerationColumn {
                get {
                    return this.columnAcceleration;
                }
            }
            
            internal DataColumn TurnRateColumn {
                get {
                    return this.columnTurnRate;
                }
            }
            
            internal DataColumn InitialSpeedColumn {
                get {
                    return this.columnInitialSpeed;
                }
            }
            
            internal DataColumn ArmTimeColumn {
                get {
                    return this.columnArmTime;
                }
            }
            
            internal DataColumn LockTimeColumn {
                get {
                    return this.columnLockTime;
                }
            }
            
            internal DataColumn ReadyTimeColumn {
                get {
                    return this.columnReadyTime;
                }
            }
            
            internal DataColumn DispersionColumn {
                get {
                    return this.columnDispersion;
                }
            }
            
            internal DataColumn LockAngleColumn {
                get {
                    return this.columnLockAngle;
                }
            }
            
            internal DataColumn PowerColumn {
                get {
                    return this.columnPower;
                }
            }
            
            internal DataColumn DamageTypeColumn {
                get {
                    return this.columnDamageType;
                }
            }
            
            internal DataColumn BlastPowerColumn {
                get {
                    return this.columnBlastPower;
                }
            }
            
            internal DataColumn BlastRadiusColumn {
                get {
                    return this.columnBlastRadius;
                }
            }
            
            internal DataColumn IsDirectionalColumn {
                get {
                    return this.columnIsDirectional;
                }
            }
            
            internal DataColumn WidthOverHeightColumn {
                get {
                    return this.columnWidthOverHeight;
                }
            }
            
            internal DataColumn MaxLockColumn {
                get {
                    return this.columnMaxLock;
                }
            }
            
            internal DataColumn ChaffResistanceColumn {
                get {
                    return this.columnChaffResistance;
                }
            }
            
            internal DataColumn LaunchSoundColumn {
                get {
                    return this.columnLaunchSound;
                }
            }
            
            internal DataColumn FlightSoundColumn {
                get {
                    return this.columnFlightSound;
                }
            }
            
            public MissilesRow this[int index] {
                get {
                    return ((MissilesRow)(this.Rows[index]));
                }
            }
            
            public event MissilesRowChangeEventHandler MissilesRowChanged;
            
            public event MissilesRowChangeEventHandler MissilesRowChanging;
            
            public event MissilesRowChangeEventHandler MissilesRowDeleted;
            
            public event MissilesRowChangeEventHandler MissilesRowDeleting;
            
            public void AddMissilesRow(MissilesRow row) {
                this.Rows.Add(row);
            }
            
            public MissilesRow AddMissilesRow(
                        short ExpendableID, 
                        System.Single Acceleration, 
                        System.Single TurnRate, 
                        System.Single InitialSpeed, 
                        System.Single ArmTime, 
                        System.Single LockTime, 
                        System.Single ReadyTime, 
                        System.Single Dispersion, 
                        System.Single LockAngle, 
                        System.Single Power, 
                        System.Byte DamageType, 
                        System.Single BlastPower, 
                        System.Single BlastRadius, 
                        bool IsDirectional, 
                        System.Single WidthOverHeight, 
                        System.Single MaxLock, 
                        System.Single ChaffResistance, 
                        short LaunchSound, 
                        short FlightSound) {
                MissilesRow rowMissilesRow = ((MissilesRow)(this.NewRow()));
                rowMissilesRow.ItemArray = new object[] {
                        ExpendableID,
                        Acceleration,
                        TurnRate,
                        InitialSpeed,
                        ArmTime,
                        LockTime,
                        ReadyTime,
                        Dispersion,
                        LockAngle,
                        Power,
                        DamageType,
                        BlastPower,
                        BlastRadius,
                        IsDirectional,
                        WidthOverHeight,
                        MaxLock,
                        ChaffResistance,
                        LaunchSound,
                        FlightSound};
                this.Rows.Add(rowMissilesRow);
                return rowMissilesRow;
            }
            
            public MissilesRow FindByExpendableID(short ExpendableID) {
                return ((MissilesRow)(this.Rows.Find(new object[] {
                            ExpendableID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MissilesDataTable cln = ((MissilesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MissilesDataTable();
            }
            
            internal void InitVars() {
                this.columnExpendableID = this.Columns["ExpendableID"];
                this.columnAcceleration = this.Columns["Acceleration"];
                this.columnTurnRate = this.Columns["TurnRate"];
                this.columnInitialSpeed = this.Columns["InitialSpeed"];
                this.columnArmTime = this.Columns["ArmTime"];
                this.columnLockTime = this.Columns["LockTime"];
                this.columnReadyTime = this.Columns["ReadyTime"];
                this.columnDispersion = this.Columns["Dispersion"];
                this.columnLockAngle = this.Columns["LockAngle"];
                this.columnPower = this.Columns["Power"];
                this.columnDamageType = this.Columns["DamageType"];
                this.columnBlastPower = this.Columns["BlastPower"];
                this.columnBlastRadius = this.Columns["BlastRadius"];
                this.columnIsDirectional = this.Columns["IsDirectional"];
                this.columnWidthOverHeight = this.Columns["WidthOverHeight"];
                this.columnMaxLock = this.Columns["MaxLock"];
                this.columnChaffResistance = this.Columns["ChaffResistance"];
                this.columnLaunchSound = this.Columns["LaunchSound"];
                this.columnFlightSound = this.Columns["FlightSound"];
            }
            
            private void InitClass() {
                this.columnExpendableID = new DataColumn("ExpendableID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpendableID);
                this.columnAcceleration = new DataColumn("Acceleration", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAcceleration);
                this.columnTurnRate = new DataColumn("TurnRate", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTurnRate);
                this.columnInitialSpeed = new DataColumn("InitialSpeed", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInitialSpeed);
                this.columnArmTime = new DataColumn("ArmTime", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnArmTime);
                this.columnLockTime = new DataColumn("LockTime", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLockTime);
                this.columnReadyTime = new DataColumn("ReadyTime", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReadyTime);
                this.columnDispersion = new DataColumn("Dispersion", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDispersion);
                this.columnLockAngle = new DataColumn("LockAngle", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLockAngle);
                this.columnPower = new DataColumn("Power", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPower);
                this.columnDamageType = new DataColumn("DamageType", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDamageType);
                this.columnBlastPower = new DataColumn("BlastPower", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlastPower);
                this.columnBlastRadius = new DataColumn("BlastRadius", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlastRadius);
                this.columnIsDirectional = new DataColumn("IsDirectional", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsDirectional);
                this.columnWidthOverHeight = new DataColumn("WidthOverHeight", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWidthOverHeight);
                this.columnMaxLock = new DataColumn("MaxLock", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxLock);
                this.columnChaffResistance = new DataColumn("ChaffResistance", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChaffResistance);
                this.columnLaunchSound = new DataColumn("LaunchSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLaunchSound);
                this.columnFlightSound = new DataColumn("FlightSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFlightSound);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnExpendableID}, true));
                this.columnExpendableID.AllowDBNull = false;
                this.columnExpendableID.Unique = true;
                this.columnAcceleration.AllowDBNull = false;
                this.columnTurnRate.AllowDBNull = false;
                this.columnInitialSpeed.AllowDBNull = false;
                this.columnArmTime.AllowDBNull = false;
                this.columnLockTime.AllowDBNull = false;
                this.columnReadyTime.AllowDBNull = false;
                this.columnDispersion.AllowDBNull = false;
                this.columnLockAngle.AllowDBNull = false;
                this.columnPower.AllowDBNull = false;
                this.columnDamageType.AllowDBNull = false;
                this.columnBlastPower.AllowDBNull = false;
                this.columnBlastRadius.AllowDBNull = false;
                this.columnIsDirectional.AllowDBNull = false;
                this.columnWidthOverHeight.AllowDBNull = false;
                this.columnMaxLock.AllowDBNull = false;
                this.columnChaffResistance.AllowDBNull = false;
                this.columnLaunchSound.AllowDBNull = false;
                this.columnFlightSound.AllowDBNull = false;
            }
            
            public MissilesRow NewMissilesRow() {
                return ((MissilesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MissilesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MissilesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MissilesRowChanged != null)) {
                    this.MissilesRowChanged(this, new MissilesRowChangeEvent(((MissilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MissilesRowChanging != null)) {
                    this.MissilesRowChanging(this, new MissilesRowChangeEvent(((MissilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MissilesRowDeleted != null)) {
                    this.MissilesRowDeleted(this, new MissilesRowChangeEvent(((MissilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MissilesRowDeleting != null)) {
                    this.MissilesRowDeleting(this, new MissilesRowChangeEvent(((MissilesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMissilesRow(MissilesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MissilesRow : DataRow {
            
            private MissilesDataTable tableMissiles;
            
            internal MissilesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMissiles = ((MissilesDataTable)(this.Table));
            }
            
            public short ExpendableID {
                get {
                    return ((short)(this[this.tableMissiles.ExpendableIDColumn]));
                }
                set {
                    this[this.tableMissiles.ExpendableIDColumn] = value;
                }
            }
            
            public System.Single Acceleration {
                get {
                    return ((System.Single)(this[this.tableMissiles.AccelerationColumn]));
                }
                set {
                    this[this.tableMissiles.AccelerationColumn] = value;
                }
            }
            
            public System.Single TurnRate {
                get {
                    return ((System.Single)(this[this.tableMissiles.TurnRateColumn]));
                }
                set {
                    this[this.tableMissiles.TurnRateColumn] = value;
                }
            }
            
            public System.Single InitialSpeed {
                get {
                    return ((System.Single)(this[this.tableMissiles.InitialSpeedColumn]));
                }
                set {
                    this[this.tableMissiles.InitialSpeedColumn] = value;
                }
            }
            
            public System.Single ArmTime {
                get {
                    return ((System.Single)(this[this.tableMissiles.ArmTimeColumn]));
                }
                set {
                    this[this.tableMissiles.ArmTimeColumn] = value;
                }
            }
            
            public System.Single LockTime {
                get {
                    return ((System.Single)(this[this.tableMissiles.LockTimeColumn]));
                }
                set {
                    this[this.tableMissiles.LockTimeColumn] = value;
                }
            }
            
            public System.Single ReadyTime {
                get {
                    return ((System.Single)(this[this.tableMissiles.ReadyTimeColumn]));
                }
                set {
                    this[this.tableMissiles.ReadyTimeColumn] = value;
                }
            }
            
            public System.Single Dispersion {
                get {
                    return ((System.Single)(this[this.tableMissiles.DispersionColumn]));
                }
                set {
                    this[this.tableMissiles.DispersionColumn] = value;
                }
            }
            
            public System.Single LockAngle {
                get {
                    return ((System.Single)(this[this.tableMissiles.LockAngleColumn]));
                }
                set {
                    this[this.tableMissiles.LockAngleColumn] = value;
                }
            }
            
            public System.Single Power {
                get {
                    return ((System.Single)(this[this.tableMissiles.PowerColumn]));
                }
                set {
                    this[this.tableMissiles.PowerColumn] = value;
                }
            }
            
            public System.Byte DamageType {
                get {
                    return ((System.Byte)(this[this.tableMissiles.DamageTypeColumn]));
                }
                set {
                    this[this.tableMissiles.DamageTypeColumn] = value;
                }
            }
            
            public System.Single BlastPower {
                get {
                    return ((System.Single)(this[this.tableMissiles.BlastPowerColumn]));
                }
                set {
                    this[this.tableMissiles.BlastPowerColumn] = value;
                }
            }
            
            public System.Single BlastRadius {
                get {
                    return ((System.Single)(this[this.tableMissiles.BlastRadiusColumn]));
                }
                set {
                    this[this.tableMissiles.BlastRadiusColumn] = value;
                }
            }
            
            public bool IsDirectional {
                get {
                    return ((bool)(this[this.tableMissiles.IsDirectionalColumn]));
                }
                set {
                    this[this.tableMissiles.IsDirectionalColumn] = value;
                }
            }
            
            public System.Single WidthOverHeight {
                get {
                    return ((System.Single)(this[this.tableMissiles.WidthOverHeightColumn]));
                }
                set {
                    this[this.tableMissiles.WidthOverHeightColumn] = value;
                }
            }
            
            public System.Single MaxLock {
                get {
                    return ((System.Single)(this[this.tableMissiles.MaxLockColumn]));
                }
                set {
                    this[this.tableMissiles.MaxLockColumn] = value;
                }
            }
            
            public System.Single ChaffResistance {
                get {
                    return ((System.Single)(this[this.tableMissiles.ChaffResistanceColumn]));
                }
                set {
                    this[this.tableMissiles.ChaffResistanceColumn] = value;
                }
            }
            
            public short LaunchSound {
                get {
                    return ((short)(this[this.tableMissiles.LaunchSoundColumn]));
                }
                set {
                    this[this.tableMissiles.LaunchSoundColumn] = value;
                }
            }
            
            public short FlightSound {
                get {
                    return ((short)(this[this.tableMissiles.FlightSoundColumn]));
                }
                set {
                    this[this.tableMissiles.FlightSoundColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MissilesRowChangeEvent : EventArgs {
            
            private MissilesRow eventRow;
            
            private DataRowAction eventAction;
            
            public MissilesRowChangeEvent(MissilesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MissilesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PartsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPartID;
            
            private DataColumn columnPrice;
            
            private DataColumn columnFileModel;
            
            private DataColumn columnFileTexture;
            
            private DataColumn columnDescription;
            
            private DataColumn columnName;
            
            private DataColumn columnPartTypeID;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnMass;
            
            private DataColumn columndSignatureMounted;
            
            private DataColumn columndSignatureActive;
            
            private DataColumn columnTechBitsRequired;
            
            private DataColumn columnTechBitsEffect;
            
            private DataColumn columnChanceTreasure;
            
            private DataColumn columnPRIcon;
            
            private DataColumn columnPartMask;
            
            private DataColumn columnSuccessorPartID;
            
            private DataColumn columnInventoryLineMDL;
            
            private DataColumn columnSortOrder;
            
            private DataColumn columnSecondsToBuild;
            
            private DataColumn columnGroupID;
            
            internal PartsDataTable() : 
                    base("Parts") {
                this.InitClass();
            }
            
            internal PartsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PartIDColumn {
                get {
                    return this.columnPartID;
                }
            }
            
            internal DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            internal DataColumn FileModelColumn {
                get {
                    return this.columnFileModel;
                }
            }
            
            internal DataColumn FileTextureColumn {
                get {
                    return this.columnFileTexture;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn PartTypeIDColumn {
                get {
                    return this.columnPartTypeID;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn MassColumn {
                get {
                    return this.columnMass;
                }
            }
            
            internal DataColumn dSignatureMountedColumn {
                get {
                    return this.columndSignatureMounted;
                }
            }
            
            internal DataColumn dSignatureActiveColumn {
                get {
                    return this.columndSignatureActive;
                }
            }
            
            internal DataColumn TechBitsRequiredColumn {
                get {
                    return this.columnTechBitsRequired;
                }
            }
            
            internal DataColumn TechBitsEffectColumn {
                get {
                    return this.columnTechBitsEffect;
                }
            }
            
            internal DataColumn ChanceTreasureColumn {
                get {
                    return this.columnChanceTreasure;
                }
            }
            
            internal DataColumn PRIconColumn {
                get {
                    return this.columnPRIcon;
                }
            }
            
            internal DataColumn PartMaskColumn {
                get {
                    return this.columnPartMask;
                }
            }
            
            internal DataColumn SuccessorPartIDColumn {
                get {
                    return this.columnSuccessorPartID;
                }
            }
            
            internal DataColumn InventoryLineMDLColumn {
                get {
                    return this.columnInventoryLineMDL;
                }
            }
            
            internal DataColumn SortOrderColumn {
                get {
                    return this.columnSortOrder;
                }
            }
            
            internal DataColumn SecondsToBuildColumn {
                get {
                    return this.columnSecondsToBuild;
                }
            }
            
            internal DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            public PartsRow this[int index] {
                get {
                    return ((PartsRow)(this.Rows[index]));
                }
            }
            
            public event PartsRowChangeEventHandler PartsRowChanged;
            
            public event PartsRowChangeEventHandler PartsRowChanging;
            
            public event PartsRowChangeEventHandler PartsRowDeleted;
            
            public event PartsRowChangeEventHandler PartsRowDeleting;
            
            public void AddPartsRow(PartsRow row) {
                this.Rows.Add(row);
            }
            
            public PartsRow AddPartsRow(
                        short PartID, 
                        int Price, 
                        string FileModel, 
                        string FileTexture, 
                        string Description, 
                        string Name, 
                        System.Byte PartTypeID, 
                        System.DateTime LastUpdated, 
                        short Mass, 
                        short dSignatureMounted, 
                        short dSignatureActive, 
                        string TechBitsRequired, 
                        string TechBitsEffect, 
                        System.Byte ChanceTreasure, 
                        string PRIcon, 
                        short PartMask, 
                        short SuccessorPartID, 
                        string InventoryLineMDL, 
                        int SortOrder, 
                        short SecondsToBuild, 
                        System.Byte GroupID) {
                PartsRow rowPartsRow = ((PartsRow)(this.NewRow()));
                rowPartsRow.ItemArray = new object[] {
                        PartID,
                        Price,
                        FileModel,
                        FileTexture,
                        Description,
                        Name,
                        PartTypeID,
                        LastUpdated,
                        Mass,
                        dSignatureMounted,
                        dSignatureActive,
                        TechBitsRequired,
                        TechBitsEffect,
                        ChanceTreasure,
                        PRIcon,
                        PartMask,
                        SuccessorPartID,
                        InventoryLineMDL,
                        SortOrder,
                        SecondsToBuild,
                        GroupID};
                this.Rows.Add(rowPartsRow);
                return rowPartsRow;
            }
            
            public PartsRow FindByPartID(short PartID) {
                return ((PartsRow)(this.Rows.Find(new object[] {
                            PartID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PartsDataTable cln = ((PartsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PartsDataTable();
            }
            
            internal void InitVars() {
                this.columnPartID = this.Columns["PartID"];
                this.columnPrice = this.Columns["Price"];
                this.columnFileModel = this.Columns["FileModel"];
                this.columnFileTexture = this.Columns["FileTexture"];
                this.columnDescription = this.Columns["Description"];
                this.columnName = this.Columns["Name"];
                this.columnPartTypeID = this.Columns["PartTypeID"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnMass = this.Columns["Mass"];
                this.columndSignatureMounted = this.Columns["dSignatureMounted"];
                this.columndSignatureActive = this.Columns["dSignatureActive"];
                this.columnTechBitsRequired = this.Columns["TechBitsRequired"];
                this.columnTechBitsEffect = this.Columns["TechBitsEffect"];
                this.columnChanceTreasure = this.Columns["ChanceTreasure"];
                this.columnPRIcon = this.Columns["PRIcon"];
                this.columnPartMask = this.Columns["PartMask"];
                this.columnSuccessorPartID = this.Columns["SuccessorPartID"];
                this.columnInventoryLineMDL = this.Columns["InventoryLineMDL"];
                this.columnSortOrder = this.Columns["SortOrder"];
                this.columnSecondsToBuild = this.Columns["SecondsToBuild"];
                this.columnGroupID = this.Columns["GroupID"];
            }
            
            private void InitClass() {
                this.columnPartID = new DataColumn("PartID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartID);
                this.columnPrice = new DataColumn("Price", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice);
                this.columnFileModel = new DataColumn("FileModel", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFileModel);
                this.columnFileTexture = new DataColumn("FileTexture", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFileTexture);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnPartTypeID = new DataColumn("PartTypeID", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartTypeID);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnMass = new DataColumn("Mass", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMass);
                this.columndSignatureMounted = new DataColumn("dSignatureMounted", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndSignatureMounted);
                this.columndSignatureActive = new DataColumn("dSignatureActive", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndSignatureActive);
                this.columnTechBitsRequired = new DataColumn("TechBitsRequired", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechBitsRequired);
                this.columnTechBitsEffect = new DataColumn("TechBitsEffect", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechBitsEffect);
                this.columnChanceTreasure = new DataColumn("ChanceTreasure", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChanceTreasure);
                this.columnPRIcon = new DataColumn("PRIcon", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPRIcon);
                this.columnPartMask = new DataColumn("PartMask", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartMask);
                this.columnSuccessorPartID = new DataColumn("SuccessorPartID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSuccessorPartID);
                this.columnInventoryLineMDL = new DataColumn("InventoryLineMDL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInventoryLineMDL);
                this.columnSortOrder = new DataColumn("SortOrder", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortOrder);
                this.columnSecondsToBuild = new DataColumn("SecondsToBuild", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecondsToBuild);
                this.columnGroupID = new DataColumn("GroupID", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroupID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPartID}, true));
                this.columnPartID.AllowDBNull = false;
                this.columnPartID.Unique = true;
                this.columnPrice.AllowDBNull = false;
                this.columnFileModel.AllowDBNull = false;
                this.columnFileTexture.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnPartTypeID.AllowDBNull = false;
                this.columnMass.AllowDBNull = false;
                this.columndSignatureMounted.AllowDBNull = false;
                this.columndSignatureActive.AllowDBNull = false;
                this.columnTechBitsRequired.AllowDBNull = false;
                this.columnTechBitsEffect.AllowDBNull = false;
                this.columnChanceTreasure.AllowDBNull = false;
                this.columnPartMask.AllowDBNull = false;
                this.columnInventoryLineMDL.AllowDBNull = false;
                this.columnSecondsToBuild.AllowDBNull = false;
            }
            
            public PartsRow NewPartsRow() {
                return ((PartsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PartsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PartsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PartsRowChanged != null)) {
                    this.PartsRowChanged(this, new PartsRowChangeEvent(((PartsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PartsRowChanging != null)) {
                    this.PartsRowChanging(this, new PartsRowChangeEvent(((PartsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PartsRowDeleted != null)) {
                    this.PartsRowDeleted(this, new PartsRowChangeEvent(((PartsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PartsRowDeleting != null)) {
                    this.PartsRowDeleting(this, new PartsRowChangeEvent(((PartsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePartsRow(PartsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PartsRow : DataRow {
            
            private PartsDataTable tableParts;
            
            internal PartsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableParts = ((PartsDataTable)(this.Table));
            }
            
            public short PartID {
                get {
                    return ((short)(this[this.tableParts.PartIDColumn]));
                }
                set {
                    this[this.tableParts.PartIDColumn] = value;
                }
            }
            
            public int Price {
                get {
                    return ((int)(this[this.tableParts.PriceColumn]));
                }
                set {
                    this[this.tableParts.PriceColumn] = value;
                }
            }
            
            public string FileModel {
                get {
                    return ((string)(this[this.tableParts.FileModelColumn]));
                }
                set {
                    this[this.tableParts.FileModelColumn] = value;
                }
            }
            
            public string FileTexture {
                get {
                    return ((string)(this[this.tableParts.FileTextureColumn]));
                }
                set {
                    this[this.tableParts.FileTextureColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableParts.DescriptionColumn]));
                }
                set {
                    this[this.tableParts.DescriptionColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableParts.NameColumn]));
                }
                set {
                    this[this.tableParts.NameColumn] = value;
                }
            }
            
            public System.Byte PartTypeID {
                get {
                    return ((System.Byte)(this[this.tableParts.PartTypeIDColumn]));
                }
                set {
                    this[this.tableParts.PartTypeIDColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableParts.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParts.LastUpdatedColumn] = value;
                }
            }
            
            public short Mass {
                get {
                    return ((short)(this[this.tableParts.MassColumn]));
                }
                set {
                    this[this.tableParts.MassColumn] = value;
                }
            }
            
            public short dSignatureMounted {
                get {
                    return ((short)(this[this.tableParts.dSignatureMountedColumn]));
                }
                set {
                    this[this.tableParts.dSignatureMountedColumn] = value;
                }
            }
            
            public short dSignatureActive {
                get {
                    return ((short)(this[this.tableParts.dSignatureActiveColumn]));
                }
                set {
                    this[this.tableParts.dSignatureActiveColumn] = value;
                }
            }
            
            public string TechBitsRequired {
                get {
                    return ((string)(this[this.tableParts.TechBitsRequiredColumn]));
                }
                set {
                    this[this.tableParts.TechBitsRequiredColumn] = value;
                }
            }
            
            public string TechBitsEffect {
                get {
                    return ((string)(this[this.tableParts.TechBitsEffectColumn]));
                }
                set {
                    this[this.tableParts.TechBitsEffectColumn] = value;
                }
            }
            
            public System.Byte ChanceTreasure {
                get {
                    return ((System.Byte)(this[this.tableParts.ChanceTreasureColumn]));
                }
                set {
                    this[this.tableParts.ChanceTreasureColumn] = value;
                }
            }
            
            public string PRIcon {
                get {
                    try {
                        return ((string)(this[this.tableParts.PRIconColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParts.PRIconColumn] = value;
                }
            }
            
            public short PartMask {
                get {
                    return ((short)(this[this.tableParts.PartMaskColumn]));
                }
                set {
                    this[this.tableParts.PartMaskColumn] = value;
                }
            }
            
            public short SuccessorPartID {
                get {
                    try {
                        return ((short)(this[this.tableParts.SuccessorPartIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParts.SuccessorPartIDColumn] = value;
                }
            }
            
            public string InventoryLineMDL {
                get {
                    return ((string)(this[this.tableParts.InventoryLineMDLColumn]));
                }
                set {
                    this[this.tableParts.InventoryLineMDLColumn] = value;
                }
            }
            
            public int SortOrder {
                get {
                    try {
                        return ((int)(this[this.tableParts.SortOrderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParts.SortOrderColumn] = value;
                }
            }
            
            public short SecondsToBuild {
                get {
                    return ((short)(this[this.tableParts.SecondsToBuildColumn]));
                }
                set {
                    this[this.tableParts.SecondsToBuildColumn] = value;
                }
            }
            
            public System.Byte GroupID {
                get {
                    try {
                        return ((System.Byte)(this[this.tableParts.GroupIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParts.GroupIDColumn] = value;
                }
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableParts.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableParts.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsPRIconNull() {
                return this.IsNull(this.tableParts.PRIconColumn);
            }
            
            public void SetPRIconNull() {
                this[this.tableParts.PRIconColumn] = System.Convert.DBNull;
            }
            
            public bool IsSuccessorPartIDNull() {
                return this.IsNull(this.tableParts.SuccessorPartIDColumn);
            }
            
            public void SetSuccessorPartIDNull() {
                this[this.tableParts.SuccessorPartIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsSortOrderNull() {
                return this.IsNull(this.tableParts.SortOrderColumn);
            }
            
            public void SetSortOrderNull() {
                this[this.tableParts.SortOrderColumn] = System.Convert.DBNull;
            }
            
            public bool IsGroupIDNull() {
                return this.IsNull(this.tableParts.GroupIDColumn);
            }
            
            public void SetGroupIDNull() {
                this[this.tableParts.GroupIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PartsRowChangeEvent : EventArgs {
            
            private PartsRow eventRow;
            
            private DataRowAction eventAction;
            
            public PartsRowChangeEvent(PartsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PartsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PartTypesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPartTypeID;
            
            private DataColumn columnPartTypeName;
            
            internal PartTypesDataTable() : 
                    base("PartTypes") {
                this.InitClass();
            }
            
            internal PartTypesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PartTypeIDColumn {
                get {
                    return this.columnPartTypeID;
                }
            }
            
            internal DataColumn PartTypeNameColumn {
                get {
                    return this.columnPartTypeName;
                }
            }
            
            public PartTypesRow this[int index] {
                get {
                    return ((PartTypesRow)(this.Rows[index]));
                }
            }
            
            public event PartTypesRowChangeEventHandler PartTypesRowChanged;
            
            public event PartTypesRowChangeEventHandler PartTypesRowChanging;
            
            public event PartTypesRowChangeEventHandler PartTypesRowDeleted;
            
            public event PartTypesRowChangeEventHandler PartTypesRowDeleting;
            
            public void AddPartTypesRow(PartTypesRow row) {
                this.Rows.Add(row);
            }
            
            public PartTypesRow AddPartTypesRow(System.Byte PartTypeID, string PartTypeName) {
                PartTypesRow rowPartTypesRow = ((PartTypesRow)(this.NewRow()));
                rowPartTypesRow.ItemArray = new object[] {
                        PartTypeID,
                        PartTypeName};
                this.Rows.Add(rowPartTypesRow);
                return rowPartTypesRow;
            }
            
            public PartTypesRow FindByPartTypeID(System.Byte PartTypeID) {
                return ((PartTypesRow)(this.Rows.Find(new object[] {
                            PartTypeID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PartTypesDataTable cln = ((PartTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PartTypesDataTable();
            }
            
            internal void InitVars() {
                this.columnPartTypeID = this.Columns["PartTypeID"];
                this.columnPartTypeName = this.Columns["PartTypeName"];
            }
            
            private void InitClass() {
                this.columnPartTypeID = new DataColumn("PartTypeID", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartTypeID);
                this.columnPartTypeName = new DataColumn("PartTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartTypeName);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPartTypeID}, true));
                this.columnPartTypeID.AllowDBNull = false;
                this.columnPartTypeID.Unique = true;
                this.columnPartTypeName.AllowDBNull = false;
            }
            
            public PartTypesRow NewPartTypesRow() {
                return ((PartTypesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PartTypesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PartTypesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PartTypesRowChanged != null)) {
                    this.PartTypesRowChanged(this, new PartTypesRowChangeEvent(((PartTypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PartTypesRowChanging != null)) {
                    this.PartTypesRowChanging(this, new PartTypesRowChangeEvent(((PartTypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PartTypesRowDeleted != null)) {
                    this.PartTypesRowDeleted(this, new PartTypesRowChangeEvent(((PartTypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PartTypesRowDeleting != null)) {
                    this.PartTypesRowDeleting(this, new PartTypesRowChangeEvent(((PartTypesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePartTypesRow(PartTypesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PartTypesRow : DataRow {
            
            private PartTypesDataTable tablePartTypes;
            
            internal PartTypesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePartTypes = ((PartTypesDataTable)(this.Table));
            }
            
            public System.Byte PartTypeID {
                get {
                    return ((System.Byte)(this[this.tablePartTypes.PartTypeIDColumn]));
                }
                set {
                    this[this.tablePartTypes.PartTypeIDColumn] = value;
                }
            }
            
            public string PartTypeName {
                get {
                    return ((string)(this[this.tablePartTypes.PartTypeNameColumn]));
                }
                set {
                    this[this.tablePartTypes.PartTypeNameColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PartTypesRowChangeEvent : EventArgs {
            
            private PartTypesRow eventRow;
            
            private DataRowAction eventAction;
            
            public PartTypesRowChangeEvent(PartTypesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PartTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProbesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnExpendableID;
            
            private DataColumn columnScanRange;
            
            private DataColumn columnProjectileID;
            
            private DataColumn columndtimeBurst;
            
            private DataColumn columnaccuracy;
            
            private DataColumn columndispersion;
            
            private DataColumn columnAmbientSound;
            
            private DataColumn columnAmmo;
            
            private DataColumn columndtRipcord;
            
            internal ProbesDataTable() : 
                    base("Probes") {
                this.InitClass();
            }
            
            internal ProbesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ExpendableIDColumn {
                get {
                    return this.columnExpendableID;
                }
            }
            
            internal DataColumn ScanRangeColumn {
                get {
                    return this.columnScanRange;
                }
            }
            
            internal DataColumn ProjectileIDColumn {
                get {
                    return this.columnProjectileID;
                }
            }
            
            internal DataColumn dtimeBurstColumn {
                get {
                    return this.columndtimeBurst;
                }
            }
            
            internal DataColumn accuracyColumn {
                get {
                    return this.columnaccuracy;
                }
            }
            
            internal DataColumn dispersionColumn {
                get {
                    return this.columndispersion;
                }
            }
            
            internal DataColumn AmbientSoundColumn {
                get {
                    return this.columnAmbientSound;
                }
            }
            
            internal DataColumn AmmoColumn {
                get {
                    return this.columnAmmo;
                }
            }
            
            internal DataColumn dtRipcordColumn {
                get {
                    return this.columndtRipcord;
                }
            }
            
            public ProbesRow this[int index] {
                get {
                    return ((ProbesRow)(this.Rows[index]));
                }
            }
            
            public event ProbesRowChangeEventHandler ProbesRowChanged;
            
            public event ProbesRowChangeEventHandler ProbesRowChanging;
            
            public event ProbesRowChangeEventHandler ProbesRowDeleted;
            
            public event ProbesRowChangeEventHandler ProbesRowDeleting;
            
            public void AddProbesRow(ProbesRow row) {
                this.Rows.Add(row);
            }
            
            public ProbesRow AddProbesRow(short ExpendableID, System.Single ScanRange, short ProjectileID, short dtimeBurst, System.Byte accuracy, System.Double dispersion, short AmbientSound, short Ammo, System.Byte dtRipcord) {
                ProbesRow rowProbesRow = ((ProbesRow)(this.NewRow()));
                rowProbesRow.ItemArray = new object[] {
                        ExpendableID,
                        ScanRange,
                        ProjectileID,
                        dtimeBurst,
                        accuracy,
                        dispersion,
                        AmbientSound,
                        Ammo,
                        dtRipcord};
                this.Rows.Add(rowProbesRow);
                return rowProbesRow;
            }
            
            public ProbesRow FindByExpendableID(short ExpendableID) {
                return ((ProbesRow)(this.Rows.Find(new object[] {
                            ExpendableID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProbesDataTable cln = ((ProbesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProbesDataTable();
            }
            
            internal void InitVars() {
                this.columnExpendableID = this.Columns["ExpendableID"];
                this.columnScanRange = this.Columns["ScanRange"];
                this.columnProjectileID = this.Columns["ProjectileID"];
                this.columndtimeBurst = this.Columns["dtimeBurst"];
                this.columnaccuracy = this.Columns["accuracy"];
                this.columndispersion = this.Columns["dispersion"];
                this.columnAmbientSound = this.Columns["AmbientSound"];
                this.columnAmmo = this.Columns["Ammo"];
                this.columndtRipcord = this.Columns["dtRipcord"];
            }
            
            private void InitClass() {
                this.columnExpendableID = new DataColumn("ExpendableID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpendableID);
                this.columnScanRange = new DataColumn("ScanRange", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnScanRange);
                this.columnProjectileID = new DataColumn("ProjectileID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectileID);
                this.columndtimeBurst = new DataColumn("dtimeBurst", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndtimeBurst);
                this.columnaccuracy = new DataColumn("accuracy", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnaccuracy);
                this.columndispersion = new DataColumn("dispersion", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndispersion);
                this.columnAmbientSound = new DataColumn("AmbientSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmbientSound);
                this.columnAmmo = new DataColumn("Ammo", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmmo);
                this.columndtRipcord = new DataColumn("dtRipcord", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndtRipcord);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnExpendableID}, true));
                this.columnExpendableID.AllowDBNull = false;
                this.columnExpendableID.Unique = true;
                this.columnScanRange.AllowDBNull = false;
                this.columndtimeBurst.AllowDBNull = false;
                this.columnaccuracy.AllowDBNull = false;
                this.columndispersion.AllowDBNull = false;
                this.columnAmbientSound.AllowDBNull = false;
                this.columnAmmo.AllowDBNull = false;
                this.columndtRipcord.AllowDBNull = false;
            }
            
            public ProbesRow NewProbesRow() {
                return ((ProbesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProbesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProbesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProbesRowChanged != null)) {
                    this.ProbesRowChanged(this, new ProbesRowChangeEvent(((ProbesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProbesRowChanging != null)) {
                    this.ProbesRowChanging(this, new ProbesRowChangeEvent(((ProbesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProbesRowDeleted != null)) {
                    this.ProbesRowDeleted(this, new ProbesRowChangeEvent(((ProbesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProbesRowDeleting != null)) {
                    this.ProbesRowDeleting(this, new ProbesRowChangeEvent(((ProbesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProbesRow(ProbesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProbesRow : DataRow {
            
            private ProbesDataTable tableProbes;
            
            internal ProbesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProbes = ((ProbesDataTable)(this.Table));
            }
            
            public short ExpendableID {
                get {
                    return ((short)(this[this.tableProbes.ExpendableIDColumn]));
                }
                set {
                    this[this.tableProbes.ExpendableIDColumn] = value;
                }
            }
            
            public System.Single ScanRange {
                get {
                    return ((System.Single)(this[this.tableProbes.ScanRangeColumn]));
                }
                set {
                    this[this.tableProbes.ScanRangeColumn] = value;
                }
            }
            
            public short ProjectileID {
                get {
                    try {
                        return ((short)(this[this.tableProbes.ProjectileIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProbes.ProjectileIDColumn] = value;
                }
            }
            
            public short dtimeBurst {
                get {
                    return ((short)(this[this.tableProbes.dtimeBurstColumn]));
                }
                set {
                    this[this.tableProbes.dtimeBurstColumn] = value;
                }
            }
            
            public System.Byte accuracy {
                get {
                    return ((System.Byte)(this[this.tableProbes.accuracyColumn]));
                }
                set {
                    this[this.tableProbes.accuracyColumn] = value;
                }
            }
            
            public System.Double dispersion {
                get {
                    return ((System.Double)(this[this.tableProbes.dispersionColumn]));
                }
                set {
                    this[this.tableProbes.dispersionColumn] = value;
                }
            }
            
            public short AmbientSound {
                get {
                    return ((short)(this[this.tableProbes.AmbientSoundColumn]));
                }
                set {
                    this[this.tableProbes.AmbientSoundColumn] = value;
                }
            }
            
            public short Ammo {
                get {
                    return ((short)(this[this.tableProbes.AmmoColumn]));
                }
                set {
                    this[this.tableProbes.AmmoColumn] = value;
                }
            }
            
            public System.Byte dtRipcord {
                get {
                    return ((System.Byte)(this[this.tableProbes.dtRipcordColumn]));
                }
                set {
                    this[this.tableProbes.dtRipcordColumn] = value;
                }
            }
            
            public bool IsProjectileIDNull() {
                return this.IsNull(this.tableProbes.ProjectileIDColumn);
            }
            
            public void SetProjectileIDNull() {
                this[this.tableProbes.ProjectileIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProbesRowChangeEvent : EventArgs {
            
            private ProbesRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProbesRowChangeEvent(ProbesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProbesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectilesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnProjectileID;
            
            private DataColumn columnTimeDuration;
            
            private DataColumn columnHitPointsInflict;
            
            private DataColumn columnDamageType;
            
            private DataColumn columnFileModel;
            
            private DataColumn columnFileTexture;
            
            private DataColumn columnSpeedMax;
            
            private DataColumn columnAcceleration;
            
            private DataColumn columnSize_cm;
            
            private DataColumn columnRadiusBlast_m;
            
            private DataColumn columnpercentPenetration;
            
            private DataColumn columnRateRotation;
            
            private DataColumn columnIsAbsoluteSpeed;
            
            private DataColumn columnIsDirectional;
            
            private DataColumn columnIsExplodeOnExpire;
            
            private DataColumn columnIsProximityFuse;
            
            private DataColumn columnpercentRed;
            
            private DataColumn columnpercentGreen;
            
            private DataColumn columnpercentBlue;
            
            private DataColumn columnpercentAlpha;
            
            private DataColumn columnBlastPower;
            
            private DataColumn columnBlastRadius;
            
            private DataColumn columnWidthOverHeight;
            
            private DataColumn columnPRIcon;
            
            private DataColumn columnAmbientSound;
            
            internal ProjectilesDataTable() : 
                    base("Projectiles") {
                this.InitClass();
            }
            
            internal ProjectilesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ProjectileIDColumn {
                get {
                    return this.columnProjectileID;
                }
            }
            
            internal DataColumn TimeDurationColumn {
                get {
                    return this.columnTimeDuration;
                }
            }
            
            internal DataColumn HitPointsInflictColumn {
                get {
                    return this.columnHitPointsInflict;
                }
            }
            
            internal DataColumn DamageTypeColumn {
                get {
                    return this.columnDamageType;
                }
            }
            
            internal DataColumn FileModelColumn {
                get {
                    return this.columnFileModel;
                }
            }
            
            internal DataColumn FileTextureColumn {
                get {
                    return this.columnFileTexture;
                }
            }
            
            internal DataColumn SpeedMaxColumn {
                get {
                    return this.columnSpeedMax;
                }
            }
            
            internal DataColumn AccelerationColumn {
                get {
                    return this.columnAcceleration;
                }
            }
            
            internal DataColumn Size_cmColumn {
                get {
                    return this.columnSize_cm;
                }
            }
            
            internal DataColumn RadiusBlast_mColumn {
                get {
                    return this.columnRadiusBlast_m;
                }
            }
            
            internal DataColumn percentPenetrationColumn {
                get {
                    return this.columnpercentPenetration;
                }
            }
            
            internal DataColumn RateRotationColumn {
                get {
                    return this.columnRateRotation;
                }
            }
            
            internal DataColumn IsAbsoluteSpeedColumn {
                get {
                    return this.columnIsAbsoluteSpeed;
                }
            }
            
            internal DataColumn IsDirectionalColumn {
                get {
                    return this.columnIsDirectional;
                }
            }
            
            internal DataColumn IsExplodeOnExpireColumn {
                get {
                    return this.columnIsExplodeOnExpire;
                }
            }
            
            internal DataColumn IsProximityFuseColumn {
                get {
                    return this.columnIsProximityFuse;
                }
            }
            
            internal DataColumn percentRedColumn {
                get {
                    return this.columnpercentRed;
                }
            }
            
            internal DataColumn percentGreenColumn {
                get {
                    return this.columnpercentGreen;
                }
            }
            
            internal DataColumn percentBlueColumn {
                get {
                    return this.columnpercentBlue;
                }
            }
            
            internal DataColumn percentAlphaColumn {
                get {
                    return this.columnpercentAlpha;
                }
            }
            
            internal DataColumn BlastPowerColumn {
                get {
                    return this.columnBlastPower;
                }
            }
            
            internal DataColumn BlastRadiusColumn {
                get {
                    return this.columnBlastRadius;
                }
            }
            
            internal DataColumn WidthOverHeightColumn {
                get {
                    return this.columnWidthOverHeight;
                }
            }
            
            internal DataColumn PRIconColumn {
                get {
                    return this.columnPRIcon;
                }
            }
            
            internal DataColumn AmbientSoundColumn {
                get {
                    return this.columnAmbientSound;
                }
            }
            
            public ProjectilesRow this[int index] {
                get {
                    return ((ProjectilesRow)(this.Rows[index]));
                }
            }
            
            public event ProjectilesRowChangeEventHandler ProjectilesRowChanged;
            
            public event ProjectilesRowChangeEventHandler ProjectilesRowChanging;
            
            public event ProjectilesRowChangeEventHandler ProjectilesRowDeleted;
            
            public event ProjectilesRowChangeEventHandler ProjectilesRowDeleting;
            
            public void AddProjectilesRow(ProjectilesRow row) {
                this.Rows.Add(row);
            }
            
            public ProjectilesRow AddProjectilesRow(
                        short ProjectileID, 
                        short TimeDuration, 
                        System.Single HitPointsInflict, 
                        System.Byte DamageType, 
                        string FileModel, 
                        string FileTexture, 
                        short SpeedMax, 
                        short Acceleration, 
                        short Size_cm, 
                        System.Byte RadiusBlast_m, 
                        System.Byte percentPenetration, 
                        System.Single RateRotation, 
                        bool IsAbsoluteSpeed, 
                        bool IsDirectional, 
                        bool IsExplodeOnExpire, 
                        bool IsProximityFuse, 
                        System.Byte percentRed, 
                        System.Byte percentGreen, 
                        System.Byte percentBlue, 
                        System.Byte percentAlpha, 
                        System.Single BlastPower, 
                        System.Single BlastRadius, 
                        System.Single WidthOverHeight, 
                        string PRIcon, 
                        short AmbientSound) {
                ProjectilesRow rowProjectilesRow = ((ProjectilesRow)(this.NewRow()));
                rowProjectilesRow.ItemArray = new object[] {
                        ProjectileID,
                        TimeDuration,
                        HitPointsInflict,
                        DamageType,
                        FileModel,
                        FileTexture,
                        SpeedMax,
                        Acceleration,
                        Size_cm,
                        RadiusBlast_m,
                        percentPenetration,
                        RateRotation,
                        IsAbsoluteSpeed,
                        IsDirectional,
                        IsExplodeOnExpire,
                        IsProximityFuse,
                        percentRed,
                        percentGreen,
                        percentBlue,
                        percentAlpha,
                        BlastPower,
                        BlastRadius,
                        WidthOverHeight,
                        PRIcon,
                        AmbientSound};
                this.Rows.Add(rowProjectilesRow);
                return rowProjectilesRow;
            }
            
            public ProjectilesRow FindByProjectileID(short ProjectileID) {
                return ((ProjectilesRow)(this.Rows.Find(new object[] {
                            ProjectileID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProjectilesDataTable cln = ((ProjectilesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProjectilesDataTable();
            }
            
            internal void InitVars() {
                this.columnProjectileID = this.Columns["ProjectileID"];
                this.columnTimeDuration = this.Columns["TimeDuration"];
                this.columnHitPointsInflict = this.Columns["HitPointsInflict"];
                this.columnDamageType = this.Columns["DamageType"];
                this.columnFileModel = this.Columns["FileModel"];
                this.columnFileTexture = this.Columns["FileTexture"];
                this.columnSpeedMax = this.Columns["SpeedMax"];
                this.columnAcceleration = this.Columns["Acceleration"];
                this.columnSize_cm = this.Columns["Size_cm"];
                this.columnRadiusBlast_m = this.Columns["RadiusBlast_m"];
                this.columnpercentPenetration = this.Columns["percentPenetration"];
                this.columnRateRotation = this.Columns["RateRotation"];
                this.columnIsAbsoluteSpeed = this.Columns["IsAbsoluteSpeed"];
                this.columnIsDirectional = this.Columns["IsDirectional"];
                this.columnIsExplodeOnExpire = this.Columns["IsExplodeOnExpire"];
                this.columnIsProximityFuse = this.Columns["IsProximityFuse"];
                this.columnpercentRed = this.Columns["percentRed"];
                this.columnpercentGreen = this.Columns["percentGreen"];
                this.columnpercentBlue = this.Columns["percentBlue"];
                this.columnpercentAlpha = this.Columns["percentAlpha"];
                this.columnBlastPower = this.Columns["BlastPower"];
                this.columnBlastRadius = this.Columns["BlastRadius"];
                this.columnWidthOverHeight = this.Columns["WidthOverHeight"];
                this.columnPRIcon = this.Columns["PRIcon"];
                this.columnAmbientSound = this.Columns["AmbientSound"];
            }
            
            private void InitClass() {
                this.columnProjectileID = new DataColumn("ProjectileID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectileID);
                this.columnTimeDuration = new DataColumn("TimeDuration", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeDuration);
                this.columnHitPointsInflict = new DataColumn("HitPointsInflict", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHitPointsInflict);
                this.columnDamageType = new DataColumn("DamageType", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDamageType);
                this.columnFileModel = new DataColumn("FileModel", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFileModel);
                this.columnFileTexture = new DataColumn("FileTexture", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFileTexture);
                this.columnSpeedMax = new DataColumn("SpeedMax", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpeedMax);
                this.columnAcceleration = new DataColumn("Acceleration", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAcceleration);
                this.columnSize_cm = new DataColumn("Size_cm", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSize_cm);
                this.columnRadiusBlast_m = new DataColumn("RadiusBlast_m", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRadiusBlast_m);
                this.columnpercentPenetration = new DataColumn("percentPenetration", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpercentPenetration);
                this.columnRateRotation = new DataColumn("RateRotation", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRateRotation);
                this.columnIsAbsoluteSpeed = new DataColumn("IsAbsoluteSpeed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsAbsoluteSpeed);
                this.columnIsDirectional = new DataColumn("IsDirectional", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsDirectional);
                this.columnIsExplodeOnExpire = new DataColumn("IsExplodeOnExpire", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsExplodeOnExpire);
                this.columnIsProximityFuse = new DataColumn("IsProximityFuse", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsProximityFuse);
                this.columnpercentRed = new DataColumn("percentRed", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpercentRed);
                this.columnpercentGreen = new DataColumn("percentGreen", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpercentGreen);
                this.columnpercentBlue = new DataColumn("percentBlue", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpercentBlue);
                this.columnpercentAlpha = new DataColumn("percentAlpha", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpercentAlpha);
                this.columnBlastPower = new DataColumn("BlastPower", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlastPower);
                this.columnBlastRadius = new DataColumn("BlastRadius", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlastRadius);
                this.columnWidthOverHeight = new DataColumn("WidthOverHeight", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWidthOverHeight);
                this.columnPRIcon = new DataColumn("PRIcon", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPRIcon);
                this.columnAmbientSound = new DataColumn("AmbientSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmbientSound);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnProjectileID}, true));
                this.columnProjectileID.AllowDBNull = false;
                this.columnProjectileID.Unique = true;
                this.columnTimeDuration.AllowDBNull = false;
                this.columnHitPointsInflict.AllowDBNull = false;
                this.columnDamageType.AllowDBNull = false;
                this.columnFileModel.AllowDBNull = false;
                this.columnFileTexture.AllowDBNull = false;
                this.columnSpeedMax.AllowDBNull = false;
                this.columnAcceleration.AllowDBNull = false;
                this.columnSize_cm.AllowDBNull = false;
                this.columnRadiusBlast_m.AllowDBNull = false;
                this.columnpercentPenetration.AllowDBNull = false;
                this.columnRateRotation.AllowDBNull = false;
                this.columnIsAbsoluteSpeed.AllowDBNull = false;
                this.columnIsDirectional.AllowDBNull = false;
                this.columnIsExplodeOnExpire.AllowDBNull = false;
                this.columnIsProximityFuse.AllowDBNull = false;
                this.columnpercentRed.AllowDBNull = false;
                this.columnpercentGreen.AllowDBNull = false;
                this.columnpercentBlue.AllowDBNull = false;
                this.columnpercentAlpha.AllowDBNull = false;
                this.columnBlastPower.AllowDBNull = false;
                this.columnBlastRadius.AllowDBNull = false;
                this.columnWidthOverHeight.AllowDBNull = false;
                this.columnAmbientSound.AllowDBNull = false;
            }
            
            public ProjectilesRow NewProjectilesRow() {
                return ((ProjectilesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProjectilesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProjectilesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectilesRowChanged != null)) {
                    this.ProjectilesRowChanged(this, new ProjectilesRowChangeEvent(((ProjectilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectilesRowChanging != null)) {
                    this.ProjectilesRowChanging(this, new ProjectilesRowChangeEvent(((ProjectilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectilesRowDeleted != null)) {
                    this.ProjectilesRowDeleted(this, new ProjectilesRowChangeEvent(((ProjectilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectilesRowDeleting != null)) {
                    this.ProjectilesRowDeleting(this, new ProjectilesRowChangeEvent(((ProjectilesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProjectilesRow(ProjectilesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectilesRow : DataRow {
            
            private ProjectilesDataTable tableProjectiles;
            
            internal ProjectilesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectiles = ((ProjectilesDataTable)(this.Table));
            }
            
            public short ProjectileID {
                get {
                    return ((short)(this[this.tableProjectiles.ProjectileIDColumn]));
                }
                set {
                    this[this.tableProjectiles.ProjectileIDColumn] = value;
                }
            }
            
            public short TimeDuration {
                get {
                    return ((short)(this[this.tableProjectiles.TimeDurationColumn]));
                }
                set {
                    this[this.tableProjectiles.TimeDurationColumn] = value;
                }
            }
            
            public System.Single HitPointsInflict {
                get {
                    return ((System.Single)(this[this.tableProjectiles.HitPointsInflictColumn]));
                }
                set {
                    this[this.tableProjectiles.HitPointsInflictColumn] = value;
                }
            }
            
            public System.Byte DamageType {
                get {
                    return ((System.Byte)(this[this.tableProjectiles.DamageTypeColumn]));
                }
                set {
                    this[this.tableProjectiles.DamageTypeColumn] = value;
                }
            }
            
            public string FileModel {
                get {
                    return ((string)(this[this.tableProjectiles.FileModelColumn]));
                }
                set {
                    this[this.tableProjectiles.FileModelColumn] = value;
                }
            }
            
            public string FileTexture {
                get {
                    return ((string)(this[this.tableProjectiles.FileTextureColumn]));
                }
                set {
                    this[this.tableProjectiles.FileTextureColumn] = value;
                }
            }
            
            public short SpeedMax {
                get {
                    return ((short)(this[this.tableProjectiles.SpeedMaxColumn]));
                }
                set {
                    this[this.tableProjectiles.SpeedMaxColumn] = value;
                }
            }
            
            public short Acceleration {
                get {
                    return ((short)(this[this.tableProjectiles.AccelerationColumn]));
                }
                set {
                    this[this.tableProjectiles.AccelerationColumn] = value;
                }
            }
            
            public short Size_cm {
                get {
                    return ((short)(this[this.tableProjectiles.Size_cmColumn]));
                }
                set {
                    this[this.tableProjectiles.Size_cmColumn] = value;
                }
            }
            
            public System.Byte RadiusBlast_m {
                get {
                    return ((System.Byte)(this[this.tableProjectiles.RadiusBlast_mColumn]));
                }
                set {
                    this[this.tableProjectiles.RadiusBlast_mColumn] = value;
                }
            }
            
            public System.Byte percentPenetration {
                get {
                    return ((System.Byte)(this[this.tableProjectiles.percentPenetrationColumn]));
                }
                set {
                    this[this.tableProjectiles.percentPenetrationColumn] = value;
                }
            }
            
            public System.Single RateRotation {
                get {
                    return ((System.Single)(this[this.tableProjectiles.RateRotationColumn]));
                }
                set {
                    this[this.tableProjectiles.RateRotationColumn] = value;
                }
            }
            
            public bool IsAbsoluteSpeed {
                get {
                    return ((bool)(this[this.tableProjectiles.IsAbsoluteSpeedColumn]));
                }
                set {
                    this[this.tableProjectiles.IsAbsoluteSpeedColumn] = value;
                }
            }
            
            public bool IsDirectional {
                get {
                    return ((bool)(this[this.tableProjectiles.IsDirectionalColumn]));
                }
                set {
                    this[this.tableProjectiles.IsDirectionalColumn] = value;
                }
            }
            
            public bool IsExplodeOnExpire {
                get {
                    return ((bool)(this[this.tableProjectiles.IsExplodeOnExpireColumn]));
                }
                set {
                    this[this.tableProjectiles.IsExplodeOnExpireColumn] = value;
                }
            }
            
            public bool IsProximityFuse {
                get {
                    return ((bool)(this[this.tableProjectiles.IsProximityFuseColumn]));
                }
                set {
                    this[this.tableProjectiles.IsProximityFuseColumn] = value;
                }
            }
            
            public System.Byte percentRed {
                get {
                    return ((System.Byte)(this[this.tableProjectiles.percentRedColumn]));
                }
                set {
                    this[this.tableProjectiles.percentRedColumn] = value;
                }
            }
            
            public System.Byte percentGreen {
                get {
                    return ((System.Byte)(this[this.tableProjectiles.percentGreenColumn]));
                }
                set {
                    this[this.tableProjectiles.percentGreenColumn] = value;
                }
            }
            
            public System.Byte percentBlue {
                get {
                    return ((System.Byte)(this[this.tableProjectiles.percentBlueColumn]));
                }
                set {
                    this[this.tableProjectiles.percentBlueColumn] = value;
                }
            }
            
            public System.Byte percentAlpha {
                get {
                    return ((System.Byte)(this[this.tableProjectiles.percentAlphaColumn]));
                }
                set {
                    this[this.tableProjectiles.percentAlphaColumn] = value;
                }
            }
            
            public System.Single BlastPower {
                get {
                    return ((System.Single)(this[this.tableProjectiles.BlastPowerColumn]));
                }
                set {
                    this[this.tableProjectiles.BlastPowerColumn] = value;
                }
            }
            
            public System.Single BlastRadius {
                get {
                    return ((System.Single)(this[this.tableProjectiles.BlastRadiusColumn]));
                }
                set {
                    this[this.tableProjectiles.BlastRadiusColumn] = value;
                }
            }
            
            public System.Single WidthOverHeight {
                get {
                    return ((System.Single)(this[this.tableProjectiles.WidthOverHeightColumn]));
                }
                set {
                    this[this.tableProjectiles.WidthOverHeightColumn] = value;
                }
            }
            
            public string PRIcon {
                get {
                    try {
                        return ((string)(this[this.tableProjectiles.PRIconColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectiles.PRIconColumn] = value;
                }
            }
            
            public short AmbientSound {
                get {
                    return ((short)(this[this.tableProjectiles.AmbientSoundColumn]));
                }
                set {
                    this[this.tableProjectiles.AmbientSoundColumn] = value;
                }
            }
            
            public bool IsPRIconNull() {
                return this.IsNull(this.tableProjectiles.PRIconColumn);
            }
            
            public void SetPRIconNull() {
                this[this.tableProjectiles.PRIconColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectilesRowChangeEvent : EventArgs {
            
            private ProjectilesRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProjectilesRowChangeEvent(ProjectilesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProjectilesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ShieldsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPartID;
            
            private DataColumn columnRegenRate;
            
            private DataColumn columnHitPoints;
            
            private DataColumn columnActivateSound;
            
            private DataColumn columnDeactivateSound;
            
            private DataColumn columnDefenseType;
            
            internal ShieldsDataTable() : 
                    base("Shields") {
                this.InitClass();
            }
            
            internal ShieldsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PartIDColumn {
                get {
                    return this.columnPartID;
                }
            }
            
            internal DataColumn RegenRateColumn {
                get {
                    return this.columnRegenRate;
                }
            }
            
            internal DataColumn HitPointsColumn {
                get {
                    return this.columnHitPoints;
                }
            }
            
            internal DataColumn ActivateSoundColumn {
                get {
                    return this.columnActivateSound;
                }
            }
            
            internal DataColumn DeactivateSoundColumn {
                get {
                    return this.columnDeactivateSound;
                }
            }
            
            internal DataColumn DefenseTypeColumn {
                get {
                    return this.columnDefenseType;
                }
            }
            
            public ShieldsRow this[int index] {
                get {
                    return ((ShieldsRow)(this.Rows[index]));
                }
            }
            
            public event ShieldsRowChangeEventHandler ShieldsRowChanged;
            
            public event ShieldsRowChangeEventHandler ShieldsRowChanging;
            
            public event ShieldsRowChangeEventHandler ShieldsRowDeleted;
            
            public event ShieldsRowChangeEventHandler ShieldsRowDeleting;
            
            public void AddShieldsRow(ShieldsRow row) {
                this.Rows.Add(row);
            }
            
            public ShieldsRow AddShieldsRow(short PartID, System.Single RegenRate, short HitPoints, short ActivateSound, short DeactivateSound, System.Byte DefenseType) {
                ShieldsRow rowShieldsRow = ((ShieldsRow)(this.NewRow()));
                rowShieldsRow.ItemArray = new object[] {
                        PartID,
                        RegenRate,
                        HitPoints,
                        ActivateSound,
                        DeactivateSound,
                        DefenseType};
                this.Rows.Add(rowShieldsRow);
                return rowShieldsRow;
            }
            
            public ShieldsRow FindByPartID(short PartID) {
                return ((ShieldsRow)(this.Rows.Find(new object[] {
                            PartID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ShieldsDataTable cln = ((ShieldsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ShieldsDataTable();
            }
            
            internal void InitVars() {
                this.columnPartID = this.Columns["PartID"];
                this.columnRegenRate = this.Columns["RegenRate"];
                this.columnHitPoints = this.Columns["HitPoints"];
                this.columnActivateSound = this.Columns["ActivateSound"];
                this.columnDeactivateSound = this.Columns["DeactivateSound"];
                this.columnDefenseType = this.Columns["DefenseType"];
            }
            
            private void InitClass() {
                this.columnPartID = new DataColumn("PartID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartID);
                this.columnRegenRate = new DataColumn("RegenRate", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegenRate);
                this.columnHitPoints = new DataColumn("HitPoints", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHitPoints);
                this.columnActivateSound = new DataColumn("ActivateSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActivateSound);
                this.columnDeactivateSound = new DataColumn("DeactivateSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDeactivateSound);
                this.columnDefenseType = new DataColumn("DefenseType", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDefenseType);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPartID}, true));
                this.columnPartID.AllowDBNull = false;
                this.columnPartID.Unique = true;
                this.columnRegenRate.AllowDBNull = false;
                this.columnHitPoints.AllowDBNull = false;
                this.columnActivateSound.AllowDBNull = false;
                this.columnDeactivateSound.AllowDBNull = false;
                this.columnDefenseType.AllowDBNull = false;
            }
            
            public ShieldsRow NewShieldsRow() {
                return ((ShieldsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ShieldsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ShieldsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ShieldsRowChanged != null)) {
                    this.ShieldsRowChanged(this, new ShieldsRowChangeEvent(((ShieldsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ShieldsRowChanging != null)) {
                    this.ShieldsRowChanging(this, new ShieldsRowChangeEvent(((ShieldsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ShieldsRowDeleted != null)) {
                    this.ShieldsRowDeleted(this, new ShieldsRowChangeEvent(((ShieldsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ShieldsRowDeleting != null)) {
                    this.ShieldsRowDeleting(this, new ShieldsRowChangeEvent(((ShieldsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveShieldsRow(ShieldsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ShieldsRow : DataRow {
            
            private ShieldsDataTable tableShields;
            
            internal ShieldsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableShields = ((ShieldsDataTable)(this.Table));
            }
            
            public short PartID {
                get {
                    return ((short)(this[this.tableShields.PartIDColumn]));
                }
                set {
                    this[this.tableShields.PartIDColumn] = value;
                }
            }
            
            public System.Single RegenRate {
                get {
                    return ((System.Single)(this[this.tableShields.RegenRateColumn]));
                }
                set {
                    this[this.tableShields.RegenRateColumn] = value;
                }
            }
            
            public short HitPoints {
                get {
                    return ((short)(this[this.tableShields.HitPointsColumn]));
                }
                set {
                    this[this.tableShields.HitPointsColumn] = value;
                }
            }
            
            public short ActivateSound {
                get {
                    return ((short)(this[this.tableShields.ActivateSoundColumn]));
                }
                set {
                    this[this.tableShields.ActivateSoundColumn] = value;
                }
            }
            
            public short DeactivateSound {
                get {
                    return ((short)(this[this.tableShields.DeactivateSoundColumn]));
                }
                set {
                    this[this.tableShields.DeactivateSoundColumn] = value;
                }
            }
            
            public System.Byte DefenseType {
                get {
                    return ((System.Byte)(this[this.tableShields.DefenseTypeColumn]));
                }
                set {
                    this[this.tableShields.DefenseTypeColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ShieldsRowChangeEvent : EventArgs {
            
            private ShieldsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ShieldsRowChangeEvent(ShieldsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ShieldsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ShipClassesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnShipClassID;
            
            private DataColumn columnShipClassName;
            
            private DataColumn columnShipClassDescription;
            
            internal ShipClassesDataTable() : 
                    base("ShipClasses") {
                this.InitClass();
            }
            
            internal ShipClassesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ShipClassIDColumn {
                get {
                    return this.columnShipClassID;
                }
            }
            
            internal DataColumn ShipClassNameColumn {
                get {
                    return this.columnShipClassName;
                }
            }
            
            internal DataColumn ShipClassDescriptionColumn {
                get {
                    return this.columnShipClassDescription;
                }
            }
            
            public ShipClassesRow this[int index] {
                get {
                    return ((ShipClassesRow)(this.Rows[index]));
                }
            }
            
            public event ShipClassesRowChangeEventHandler ShipClassesRowChanged;
            
            public event ShipClassesRowChangeEventHandler ShipClassesRowChanging;
            
            public event ShipClassesRowChangeEventHandler ShipClassesRowDeleted;
            
            public event ShipClassesRowChangeEventHandler ShipClassesRowDeleting;
            
            public void AddShipClassesRow(ShipClassesRow row) {
                this.Rows.Add(row);
            }
            
            public ShipClassesRow AddShipClassesRow(short ShipClassID, string ShipClassName, string ShipClassDescription) {
                ShipClassesRow rowShipClassesRow = ((ShipClassesRow)(this.NewRow()));
                rowShipClassesRow.ItemArray = new object[] {
                        ShipClassID,
                        ShipClassName,
                        ShipClassDescription};
                this.Rows.Add(rowShipClassesRow);
                return rowShipClassesRow;
            }
            
            public ShipClassesRow FindByShipClassID(short ShipClassID) {
                return ((ShipClassesRow)(this.Rows.Find(new object[] {
                            ShipClassID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ShipClassesDataTable cln = ((ShipClassesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ShipClassesDataTable();
            }
            
            internal void InitVars() {
                this.columnShipClassID = this.Columns["ShipClassID"];
                this.columnShipClassName = this.Columns["ShipClassName"];
                this.columnShipClassDescription = this.Columns["ShipClassDescription"];
            }
            
            private void InitClass() {
                this.columnShipClassID = new DataColumn("ShipClassID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipClassID);
                this.columnShipClassName = new DataColumn("ShipClassName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipClassName);
                this.columnShipClassDescription = new DataColumn("ShipClassDescription", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipClassDescription);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnShipClassID}, true));
                this.columnShipClassID.AllowDBNull = false;
                this.columnShipClassID.Unique = true;
                this.columnShipClassName.AllowDBNull = false;
            }
            
            public ShipClassesRow NewShipClassesRow() {
                return ((ShipClassesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ShipClassesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ShipClassesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ShipClassesRowChanged != null)) {
                    this.ShipClassesRowChanged(this, new ShipClassesRowChangeEvent(((ShipClassesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ShipClassesRowChanging != null)) {
                    this.ShipClassesRowChanging(this, new ShipClassesRowChangeEvent(((ShipClassesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ShipClassesRowDeleted != null)) {
                    this.ShipClassesRowDeleted(this, new ShipClassesRowChangeEvent(((ShipClassesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ShipClassesRowDeleting != null)) {
                    this.ShipClassesRowDeleting(this, new ShipClassesRowChangeEvent(((ShipClassesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveShipClassesRow(ShipClassesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ShipClassesRow : DataRow {
            
            private ShipClassesDataTable tableShipClasses;
            
            internal ShipClassesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableShipClasses = ((ShipClassesDataTable)(this.Table));
            }
            
            public short ShipClassID {
                get {
                    return ((short)(this[this.tableShipClasses.ShipClassIDColumn]));
                }
                set {
                    this[this.tableShipClasses.ShipClassIDColumn] = value;
                }
            }
            
            public string ShipClassName {
                get {
                    return ((string)(this[this.tableShipClasses.ShipClassNameColumn]));
                }
                set {
                    this[this.tableShipClasses.ShipClassNameColumn] = value;
                }
            }
            
            public string ShipClassDescription {
                get {
                    try {
                        return ((string)(this[this.tableShipClasses.ShipClassDescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipClasses.ShipClassDescriptionColumn] = value;
                }
            }
            
            public bool IsShipClassDescriptionNull() {
                return this.IsNull(this.tableShipClasses.ShipClassDescriptionColumn);
            }
            
            public void SetShipClassDescriptionNull() {
                this[this.tableShipClasses.ShipClassDescriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ShipClassesRowChangeEvent : EventArgs {
            
            private ShipClassesRow eventRow;
            
            private DataRowAction eventAction;
            
            public ShipClassesRowChangeEvent(ShipClassesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ShipClassesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ShipTypesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnShipTypeID;
            
            private DataColumn columnModel;
            
            private DataColumn columnLength;
            
            private DataColumn columnWeight;
            
            private DataColumn columnPrice;
            
            private DataColumn columnBaseMaxSpeed;
            
            private DataColumn columnBaseHitPoints;
            
            private DataColumn columnBaseScannerRange;
            
            private DataColumn columnDescription;
            
            private DataColumn columnMaxRollRate;
            
            private DataColumn columnMaxPitchRate;
            
            private DataColumn columnMaxYawRate;
            
            private DataColumn columnDriftRoll;
            
            private DataColumn columnDriftPitch;
            
            private DataColumn columnDriftYaw;
            
            private DataColumn columnAcceleration;
            
            private DataColumn columnAccelSideMultiplier;
            
            private DataColumn columnAccelBackMultiplier;
            
            private DataColumn columnBaseSignature;
            
            private DataColumn columnEnergyMax;
            
            private DataColumn columnRateRechargeEnergy;
            
            private DataColumn columnTechBitsRequired;
            
            private DataColumn columnTechBitsEffect;
            
            private DataColumn columnCapabilities;
            
            private DataColumn columnMaxAmmo;
            
            private DataColumn columnMaxFuel;
            
            private DataColumn columnPRIcon;
            
            private DataColumn columnShieldPartMask;
            
            private DataColumn columnAfterburnerPartMask;
            
            private DataColumn columnCloakPartMask;
            
            private DataColumn columnMagazinePartMask;
            
            private DataColumn columnDispenserPartMask;
            
            private DataColumn columnChaffPartMask;
            
            private DataColumn columnMagazineCapacity;
            
            private DataColumn columnDispenserCapacity;
            
            private DataColumn columnChaffCapacity;
            
            private DataColumn columnSuccessorHullID;
            
            private DataColumn columnPilotHUD;
            
            private DataColumn columnObserverHUD;
            
            private DataColumn columnInteriorSound;
            
            private DataColumn columnExteriorSound;
            
            private DataColumn columnThrustInteriorSound;
            
            private DataColumn columnThrustExteriorSound;
            
            private DataColumn columnTurnInteriorSound;
            
            private DataColumn columnTurnExteriorSound;
            
            private DataColumn columnSortOrder;
            
            private DataColumn columnPreferredPartID14;
            
            private DataColumn columnPreferredPartID13;
            
            private DataColumn columnPreferredPartID12;
            
            private DataColumn columnPreferredPartID11;
            
            private DataColumn columnPreferredPartID10;
            
            private DataColumn columnPreferredPartID9;
            
            private DataColumn columnPreferredPartID8;
            
            private DataColumn columnPreferredPartID7;
            
            private DataColumn columnPreferredPartID6;
            
            private DataColumn columnPreferredPartID5;
            
            private DataColumn columnPreferredPartID4;
            
            private DataColumn columnPreferredPartID3;
            
            private DataColumn columnPreferredPartID2;
            
            private DataColumn columnPreferredPartID1;
            
            private DataColumn columnDefenseType;
            
            private DataColumn columnSecondsToBuild;
            
            private DataColumn columnGroupID;
            
            private DataColumn columnRipcordSpeed;
            
            private DataColumn columnECM;
            
            private DataColumn columnRipcordCost;
            
            internal ShipTypesDataTable() : 
                    base("ShipTypes") {
                this.InitClass();
            }
            
            internal ShipTypesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ShipTypeIDColumn {
                get {
                    return this.columnShipTypeID;
                }
            }
            
            internal DataColumn ModelColumn {
                get {
                    return this.columnModel;
                }
            }
            
            internal DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            internal DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            internal DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            internal DataColumn BaseMaxSpeedColumn {
                get {
                    return this.columnBaseMaxSpeed;
                }
            }
            
            internal DataColumn BaseHitPointsColumn {
                get {
                    return this.columnBaseHitPoints;
                }
            }
            
            internal DataColumn BaseScannerRangeColumn {
                get {
                    return this.columnBaseScannerRange;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn MaxRollRateColumn {
                get {
                    return this.columnMaxRollRate;
                }
            }
            
            internal DataColumn MaxPitchRateColumn {
                get {
                    return this.columnMaxPitchRate;
                }
            }
            
            internal DataColumn MaxYawRateColumn {
                get {
                    return this.columnMaxYawRate;
                }
            }
            
            internal DataColumn DriftRollColumn {
                get {
                    return this.columnDriftRoll;
                }
            }
            
            internal DataColumn DriftPitchColumn {
                get {
                    return this.columnDriftPitch;
                }
            }
            
            internal DataColumn DriftYawColumn {
                get {
                    return this.columnDriftYaw;
                }
            }
            
            internal DataColumn AccelerationColumn {
                get {
                    return this.columnAcceleration;
                }
            }
            
            internal DataColumn AccelSideMultiplierColumn {
                get {
                    return this.columnAccelSideMultiplier;
                }
            }
            
            internal DataColumn AccelBackMultiplierColumn {
                get {
                    return this.columnAccelBackMultiplier;
                }
            }
            
            internal DataColumn BaseSignatureColumn {
                get {
                    return this.columnBaseSignature;
                }
            }
            
            internal DataColumn EnergyMaxColumn {
                get {
                    return this.columnEnergyMax;
                }
            }
            
            internal DataColumn RateRechargeEnergyColumn {
                get {
                    return this.columnRateRechargeEnergy;
                }
            }
            
            internal DataColumn TechBitsRequiredColumn {
                get {
                    return this.columnTechBitsRequired;
                }
            }
            
            internal DataColumn TechBitsEffectColumn {
                get {
                    return this.columnTechBitsEffect;
                }
            }
            
            internal DataColumn CapabilitiesColumn {
                get {
                    return this.columnCapabilities;
                }
            }
            
            internal DataColumn MaxAmmoColumn {
                get {
                    return this.columnMaxAmmo;
                }
            }
            
            internal DataColumn MaxFuelColumn {
                get {
                    return this.columnMaxFuel;
                }
            }
            
            internal DataColumn PRIconColumn {
                get {
                    return this.columnPRIcon;
                }
            }
            
            internal DataColumn ShieldPartMaskColumn {
                get {
                    return this.columnShieldPartMask;
                }
            }
            
            internal DataColumn AfterburnerPartMaskColumn {
                get {
                    return this.columnAfterburnerPartMask;
                }
            }
            
            internal DataColumn CloakPartMaskColumn {
                get {
                    return this.columnCloakPartMask;
                }
            }
            
            internal DataColumn MagazinePartMaskColumn {
                get {
                    return this.columnMagazinePartMask;
                }
            }
            
            internal DataColumn DispenserPartMaskColumn {
                get {
                    return this.columnDispenserPartMask;
                }
            }
            
            internal DataColumn ChaffPartMaskColumn {
                get {
                    return this.columnChaffPartMask;
                }
            }
            
            internal DataColumn MagazineCapacityColumn {
                get {
                    return this.columnMagazineCapacity;
                }
            }
            
            internal DataColumn DispenserCapacityColumn {
                get {
                    return this.columnDispenserCapacity;
                }
            }
            
            internal DataColumn ChaffCapacityColumn {
                get {
                    return this.columnChaffCapacity;
                }
            }
            
            internal DataColumn SuccessorHullIDColumn {
                get {
                    return this.columnSuccessorHullID;
                }
            }
            
            internal DataColumn PilotHUDColumn {
                get {
                    return this.columnPilotHUD;
                }
            }
            
            internal DataColumn ObserverHUDColumn {
                get {
                    return this.columnObserverHUD;
                }
            }
            
            internal DataColumn InteriorSoundColumn {
                get {
                    return this.columnInteriorSound;
                }
            }
            
            internal DataColumn ExteriorSoundColumn {
                get {
                    return this.columnExteriorSound;
                }
            }
            
            internal DataColumn ThrustInteriorSoundColumn {
                get {
                    return this.columnThrustInteriorSound;
                }
            }
            
            internal DataColumn ThrustExteriorSoundColumn {
                get {
                    return this.columnThrustExteriorSound;
                }
            }
            
            internal DataColumn TurnInteriorSoundColumn {
                get {
                    return this.columnTurnInteriorSound;
                }
            }
            
            internal DataColumn TurnExteriorSoundColumn {
                get {
                    return this.columnTurnExteriorSound;
                }
            }
            
            internal DataColumn SortOrderColumn {
                get {
                    return this.columnSortOrder;
                }
            }
            
            internal DataColumn PreferredPartID14Column {
                get {
                    return this.columnPreferredPartID14;
                }
            }
            
            internal DataColumn PreferredPartID13Column {
                get {
                    return this.columnPreferredPartID13;
                }
            }
            
            internal DataColumn PreferredPartID12Column {
                get {
                    return this.columnPreferredPartID12;
                }
            }
            
            internal DataColumn PreferredPartID11Column {
                get {
                    return this.columnPreferredPartID11;
                }
            }
            
            internal DataColumn PreferredPartID10Column {
                get {
                    return this.columnPreferredPartID10;
                }
            }
            
            internal DataColumn PreferredPartID9Column {
                get {
                    return this.columnPreferredPartID9;
                }
            }
            
            internal DataColumn PreferredPartID8Column {
                get {
                    return this.columnPreferredPartID8;
                }
            }
            
            internal DataColumn PreferredPartID7Column {
                get {
                    return this.columnPreferredPartID7;
                }
            }
            
            internal DataColumn PreferredPartID6Column {
                get {
                    return this.columnPreferredPartID6;
                }
            }
            
            internal DataColumn PreferredPartID5Column {
                get {
                    return this.columnPreferredPartID5;
                }
            }
            
            internal DataColumn PreferredPartID4Column {
                get {
                    return this.columnPreferredPartID4;
                }
            }
            
            internal DataColumn PreferredPartID3Column {
                get {
                    return this.columnPreferredPartID3;
                }
            }
            
            internal DataColumn PreferredPartID2Column {
                get {
                    return this.columnPreferredPartID2;
                }
            }
            
            internal DataColumn PreferredPartID1Column {
                get {
                    return this.columnPreferredPartID1;
                }
            }
            
            internal DataColumn DefenseTypeColumn {
                get {
                    return this.columnDefenseType;
                }
            }
            
            internal DataColumn SecondsToBuildColumn {
                get {
                    return this.columnSecondsToBuild;
                }
            }
            
            internal DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            internal DataColumn RipcordSpeedColumn {
                get {
                    return this.columnRipcordSpeed;
                }
            }
            
            internal DataColumn ECMColumn {
                get {
                    return this.columnECM;
                }
            }
            
            internal DataColumn RipcordCostColumn {
                get {
                    return this.columnRipcordCost;
                }
            }
            
            public ShipTypesRow this[int index] {
                get {
                    return ((ShipTypesRow)(this.Rows[index]));
                }
            }
            
            public event ShipTypesRowChangeEventHandler ShipTypesRowChanged;
            
            public event ShipTypesRowChangeEventHandler ShipTypesRowChanging;
            
            public event ShipTypesRowChangeEventHandler ShipTypesRowDeleted;
            
            public event ShipTypesRowChangeEventHandler ShipTypesRowDeleting;
            
            public void AddShipTypesRow(ShipTypesRow row) {
                this.Rows.Add(row);
            }
            
            public ShipTypesRow AddShipTypesRow(
                        string Name, 
                        short ShipTypeID, 
                        string Model, 
                        System.Single Length, 
                        System.Single Weight, 
                        int Price, 
                        int BaseMaxSpeed, 
                        short BaseHitPoints, 
                        int BaseScannerRange, 
                        string Description, 
                        System.Single MaxRollRate, 
                        System.Single MaxPitchRate, 
                        System.Single MaxYawRate, 
                        System.Single DriftRoll, 
                        System.Single DriftPitch, 
                        System.Single DriftYaw, 
                        System.Single Acceleration, 
                        System.Single AccelSideMultiplier, 
                        System.Single AccelBackMultiplier, 
                        short BaseSignature, 
                        System.Single EnergyMax, 
                        System.Single RateRechargeEnergy, 
                        string TechBitsRequired, 
                        string TechBitsEffect, 
                        short Capabilities, 
                        short MaxAmmo, 
                        short MaxFuel, 
                        string PRIcon, 
                        short ShieldPartMask, 
                        short AfterburnerPartMask, 
                        short CloakPartMask, 
                        short MagazinePartMask, 
                        short DispenserPartMask, 
                        short ChaffPartMask, 
                        short MagazineCapacity, 
                        short DispenserCapacity, 
                        short ChaffCapacity, 
                        short SuccessorHullID, 
                        string PilotHUD, 
                        string ObserverHUD, 
                        short InteriorSound, 
                        short ExteriorSound, 
                        short ThrustInteriorSound, 
                        short ThrustExteriorSound, 
                        short TurnInteriorSound, 
                        short TurnExteriorSound, 
                        int SortOrder, 
                        short PreferredPartID14, 
                        short PreferredPartID13, 
                        short PreferredPartID12, 
                        short PreferredPartID11, 
                        short PreferredPartID10, 
                        short PreferredPartID9, 
                        short PreferredPartID8, 
                        short PreferredPartID7, 
                        short PreferredPartID6, 
                        short PreferredPartID5, 
                        short PreferredPartID4, 
                        short PreferredPartID3, 
                        short PreferredPartID2, 
                        short PreferredPartID1, 
                        System.Byte DefenseType, 
                        short SecondsToBuild, 
                        System.Byte GroupID, 
                        System.Single RipcordSpeed, 
                        System.Single ECM, 
                        System.Single RipcordCost) {
                ShipTypesRow rowShipTypesRow = ((ShipTypesRow)(this.NewRow()));
                rowShipTypesRow.ItemArray = new object[] {
                        Name,
                        ShipTypeID,
                        Model,
                        Length,
                        Weight,
                        Price,
                        BaseMaxSpeed,
                        BaseHitPoints,
                        BaseScannerRange,
                        Description,
                        MaxRollRate,
                        MaxPitchRate,
                        MaxYawRate,
                        DriftRoll,
                        DriftPitch,
                        DriftYaw,
                        Acceleration,
                        AccelSideMultiplier,
                        AccelBackMultiplier,
                        BaseSignature,
                        EnergyMax,
                        RateRechargeEnergy,
                        TechBitsRequired,
                        TechBitsEffect,
                        Capabilities,
                        MaxAmmo,
                        MaxFuel,
                        PRIcon,
                        ShieldPartMask,
                        AfterburnerPartMask,
                        CloakPartMask,
                        MagazinePartMask,
                        DispenserPartMask,
                        ChaffPartMask,
                        MagazineCapacity,
                        DispenserCapacity,
                        ChaffCapacity,
                        SuccessorHullID,
                        PilotHUD,
                        ObserverHUD,
                        InteriorSound,
                        ExteriorSound,
                        ThrustInteriorSound,
                        ThrustExteriorSound,
                        TurnInteriorSound,
                        TurnExteriorSound,
                        SortOrder,
                        PreferredPartID14,
                        PreferredPartID13,
                        PreferredPartID12,
                        PreferredPartID11,
                        PreferredPartID10,
                        PreferredPartID9,
                        PreferredPartID8,
                        PreferredPartID7,
                        PreferredPartID6,
                        PreferredPartID5,
                        PreferredPartID4,
                        PreferredPartID3,
                        PreferredPartID2,
                        PreferredPartID1,
                        DefenseType,
                        SecondsToBuild,
                        GroupID,
                        RipcordSpeed,
                        ECM,
                        RipcordCost};
                this.Rows.Add(rowShipTypesRow);
                return rowShipTypesRow;
            }
            
            public ShipTypesRow FindByShipTypeID(short ShipTypeID) {
                return ((ShipTypesRow)(this.Rows.Find(new object[] {
                            ShipTypeID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ShipTypesDataTable cln = ((ShipTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ShipTypesDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnShipTypeID = this.Columns["ShipTypeID"];
                this.columnModel = this.Columns["Model"];
                this.columnLength = this.Columns["Length"];
                this.columnWeight = this.Columns["Weight"];
                this.columnPrice = this.Columns["Price"];
                this.columnBaseMaxSpeed = this.Columns["BaseMaxSpeed"];
                this.columnBaseHitPoints = this.Columns["BaseHitPoints"];
                this.columnBaseScannerRange = this.Columns["BaseScannerRange"];
                this.columnDescription = this.Columns["Description"];
                this.columnMaxRollRate = this.Columns["MaxRollRate"];
                this.columnMaxPitchRate = this.Columns["MaxPitchRate"];
                this.columnMaxYawRate = this.Columns["MaxYawRate"];
                this.columnDriftRoll = this.Columns["DriftRoll"];
                this.columnDriftPitch = this.Columns["DriftPitch"];
                this.columnDriftYaw = this.Columns["DriftYaw"];
                this.columnAcceleration = this.Columns["Acceleration"];
                this.columnAccelSideMultiplier = this.Columns["AccelSideMultiplier"];
                this.columnAccelBackMultiplier = this.Columns["AccelBackMultiplier"];
                this.columnBaseSignature = this.Columns["BaseSignature"];
                this.columnEnergyMax = this.Columns["EnergyMax"];
                this.columnRateRechargeEnergy = this.Columns["RateRechargeEnergy"];
                this.columnTechBitsRequired = this.Columns["TechBitsRequired"];
                this.columnTechBitsEffect = this.Columns["TechBitsEffect"];
                this.columnCapabilities = this.Columns["Capabilities"];
                this.columnMaxAmmo = this.Columns["MaxAmmo"];
                this.columnMaxFuel = this.Columns["MaxFuel"];
                this.columnPRIcon = this.Columns["PRIcon"];
                this.columnShieldPartMask = this.Columns["ShieldPartMask"];
                this.columnAfterburnerPartMask = this.Columns["AfterburnerPartMask"];
                this.columnCloakPartMask = this.Columns["CloakPartMask"];
                this.columnMagazinePartMask = this.Columns["MagazinePartMask"];
                this.columnDispenserPartMask = this.Columns["DispenserPartMask"];
                this.columnChaffPartMask = this.Columns["ChaffPartMask"];
                this.columnMagazineCapacity = this.Columns["MagazineCapacity"];
                this.columnDispenserCapacity = this.Columns["DispenserCapacity"];
                this.columnChaffCapacity = this.Columns["ChaffCapacity"];
                this.columnSuccessorHullID = this.Columns["SuccessorHullID"];
                this.columnPilotHUD = this.Columns["PilotHUD"];
                this.columnObserverHUD = this.Columns["ObserverHUD"];
                this.columnInteriorSound = this.Columns["InteriorSound"];
                this.columnExteriorSound = this.Columns["ExteriorSound"];
                this.columnThrustInteriorSound = this.Columns["ThrustInteriorSound"];
                this.columnThrustExteriorSound = this.Columns["ThrustExteriorSound"];
                this.columnTurnInteriorSound = this.Columns["TurnInteriorSound"];
                this.columnTurnExteriorSound = this.Columns["TurnExteriorSound"];
                this.columnSortOrder = this.Columns["SortOrder"];
                this.columnPreferredPartID14 = this.Columns["PreferredPartID14"];
                this.columnPreferredPartID13 = this.Columns["PreferredPartID13"];
                this.columnPreferredPartID12 = this.Columns["PreferredPartID12"];
                this.columnPreferredPartID11 = this.Columns["PreferredPartID11"];
                this.columnPreferredPartID10 = this.Columns["PreferredPartID10"];
                this.columnPreferredPartID9 = this.Columns["PreferredPartID9"];
                this.columnPreferredPartID8 = this.Columns["PreferredPartID8"];
                this.columnPreferredPartID7 = this.Columns["PreferredPartID7"];
                this.columnPreferredPartID6 = this.Columns["PreferredPartID6"];
                this.columnPreferredPartID5 = this.Columns["PreferredPartID5"];
                this.columnPreferredPartID4 = this.Columns["PreferredPartID4"];
                this.columnPreferredPartID3 = this.Columns["PreferredPartID3"];
                this.columnPreferredPartID2 = this.Columns["PreferredPartID2"];
                this.columnPreferredPartID1 = this.Columns["PreferredPartID1"];
                this.columnDefenseType = this.Columns["DefenseType"];
                this.columnSecondsToBuild = this.Columns["SecondsToBuild"];
                this.columnGroupID = this.Columns["GroupID"];
                this.columnRipcordSpeed = this.Columns["RipcordSpeed"];
                this.columnECM = this.Columns["ECM"];
                this.columnRipcordCost = this.Columns["RipcordCost"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnShipTypeID = new DataColumn("ShipTypeID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipTypeID);
                this.columnModel = new DataColumn("Model", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModel);
                this.columnLength = new DataColumn("Length", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLength);
                this.columnWeight = new DataColumn("Weight", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeight);
                this.columnPrice = new DataColumn("Price", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice);
                this.columnBaseMaxSpeed = new DataColumn("BaseMaxSpeed", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBaseMaxSpeed);
                this.columnBaseHitPoints = new DataColumn("BaseHitPoints", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBaseHitPoints);
                this.columnBaseScannerRange = new DataColumn("BaseScannerRange", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBaseScannerRange);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnMaxRollRate = new DataColumn("MaxRollRate", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxRollRate);
                this.columnMaxPitchRate = new DataColumn("MaxPitchRate", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxPitchRate);
                this.columnMaxYawRate = new DataColumn("MaxYawRate", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxYawRate);
                this.columnDriftRoll = new DataColumn("DriftRoll", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDriftRoll);
                this.columnDriftPitch = new DataColumn("DriftPitch", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDriftPitch);
                this.columnDriftYaw = new DataColumn("DriftYaw", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDriftYaw);
                this.columnAcceleration = new DataColumn("Acceleration", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAcceleration);
                this.columnAccelSideMultiplier = new DataColumn("AccelSideMultiplier", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccelSideMultiplier);
                this.columnAccelBackMultiplier = new DataColumn("AccelBackMultiplier", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccelBackMultiplier);
                this.columnBaseSignature = new DataColumn("BaseSignature", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBaseSignature);
                this.columnEnergyMax = new DataColumn("EnergyMax", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEnergyMax);
                this.columnRateRechargeEnergy = new DataColumn("RateRechargeEnergy", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRateRechargeEnergy);
                this.columnTechBitsRequired = new DataColumn("TechBitsRequired", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechBitsRequired);
                this.columnTechBitsEffect = new DataColumn("TechBitsEffect", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechBitsEffect);
                this.columnCapabilities = new DataColumn("Capabilities", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCapabilities);
                this.columnMaxAmmo = new DataColumn("MaxAmmo", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxAmmo);
                this.columnMaxFuel = new DataColumn("MaxFuel", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxFuel);
                this.columnPRIcon = new DataColumn("PRIcon", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPRIcon);
                this.columnShieldPartMask = new DataColumn("ShieldPartMask", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShieldPartMask);
                this.columnAfterburnerPartMask = new DataColumn("AfterburnerPartMask", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAfterburnerPartMask);
                this.columnCloakPartMask = new DataColumn("CloakPartMask", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCloakPartMask);
                this.columnMagazinePartMask = new DataColumn("MagazinePartMask", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMagazinePartMask);
                this.columnDispenserPartMask = new DataColumn("DispenserPartMask", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDispenserPartMask);
                this.columnChaffPartMask = new DataColumn("ChaffPartMask", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChaffPartMask);
                this.columnMagazineCapacity = new DataColumn("MagazineCapacity", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMagazineCapacity);
                this.columnDispenserCapacity = new DataColumn("DispenserCapacity", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDispenserCapacity);
                this.columnChaffCapacity = new DataColumn("ChaffCapacity", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChaffCapacity);
                this.columnSuccessorHullID = new DataColumn("SuccessorHullID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSuccessorHullID);
                this.columnPilotHUD = new DataColumn("PilotHUD", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPilotHUD);
                this.columnObserverHUD = new DataColumn("ObserverHUD", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObserverHUD);
                this.columnInteriorSound = new DataColumn("InteriorSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInteriorSound);
                this.columnExteriorSound = new DataColumn("ExteriorSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExteriorSound);
                this.columnThrustInteriorSound = new DataColumn("ThrustInteriorSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnThrustInteriorSound);
                this.columnThrustExteriorSound = new DataColumn("ThrustExteriorSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnThrustExteriorSound);
                this.columnTurnInteriorSound = new DataColumn("TurnInteriorSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTurnInteriorSound);
                this.columnTurnExteriorSound = new DataColumn("TurnExteriorSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTurnExteriorSound);
                this.columnSortOrder = new DataColumn("SortOrder", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortOrder);
                this.columnPreferredPartID14 = new DataColumn("PreferredPartID14", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID14);
                this.columnPreferredPartID13 = new DataColumn("PreferredPartID13", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID13);
                this.columnPreferredPartID12 = new DataColumn("PreferredPartID12", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID12);
                this.columnPreferredPartID11 = new DataColumn("PreferredPartID11", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID11);
                this.columnPreferredPartID10 = new DataColumn("PreferredPartID10", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID10);
                this.columnPreferredPartID9 = new DataColumn("PreferredPartID9", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID9);
                this.columnPreferredPartID8 = new DataColumn("PreferredPartID8", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID8);
                this.columnPreferredPartID7 = new DataColumn("PreferredPartID7", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID7);
                this.columnPreferredPartID6 = new DataColumn("PreferredPartID6", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID6);
                this.columnPreferredPartID5 = new DataColumn("PreferredPartID5", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID5);
                this.columnPreferredPartID4 = new DataColumn("PreferredPartID4", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID4);
                this.columnPreferredPartID3 = new DataColumn("PreferredPartID3", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID3);
                this.columnPreferredPartID2 = new DataColumn("PreferredPartID2", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID2);
                this.columnPreferredPartID1 = new DataColumn("PreferredPartID1", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferredPartID1);
                this.columnDefenseType = new DataColumn("DefenseType", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDefenseType);
                this.columnSecondsToBuild = new DataColumn("SecondsToBuild", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecondsToBuild);
                this.columnGroupID = new DataColumn("GroupID", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroupID);
                this.columnRipcordSpeed = new DataColumn("RipcordSpeed", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRipcordSpeed);
                this.columnECM = new DataColumn("ECM", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnECM);
                this.columnRipcordCost = new DataColumn("RipcordCost", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRipcordCost);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnShipTypeID}, true));
                this.columnName.AllowDBNull = false;
                this.columnShipTypeID.AllowDBNull = false;
                this.columnShipTypeID.Unique = true;
                this.columnModel.AllowDBNull = false;
                this.columnLength.AllowDBNull = false;
                this.columnWeight.AllowDBNull = false;
                this.columnPrice.AllowDBNull = false;
                this.columnBaseMaxSpeed.AllowDBNull = false;
                this.columnBaseHitPoints.AllowDBNull = false;
                this.columnBaseScannerRange.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnMaxRollRate.AllowDBNull = false;
                this.columnMaxPitchRate.AllowDBNull = false;
                this.columnMaxYawRate.AllowDBNull = false;
                this.columnDriftRoll.AllowDBNull = false;
                this.columnDriftPitch.AllowDBNull = false;
                this.columnDriftYaw.AllowDBNull = false;
                this.columnAcceleration.AllowDBNull = false;
                this.columnAccelSideMultiplier.AllowDBNull = false;
                this.columnAccelBackMultiplier.AllowDBNull = false;
                this.columnBaseSignature.AllowDBNull = false;
                this.columnEnergyMax.AllowDBNull = false;
                this.columnRateRechargeEnergy.AllowDBNull = false;
                this.columnTechBitsRequired.AllowDBNull = false;
                this.columnTechBitsEffect.AllowDBNull = false;
                this.columnCapabilities.AllowDBNull = false;
                this.columnMaxAmmo.AllowDBNull = false;
                this.columnMaxFuel.AllowDBNull = false;
                this.columnPRIcon.AllowDBNull = false;
                this.columnShieldPartMask.AllowDBNull = false;
                this.columnAfterburnerPartMask.AllowDBNull = false;
                this.columnCloakPartMask.AllowDBNull = false;
                this.columnMagazinePartMask.AllowDBNull = false;
                this.columnDispenserPartMask.AllowDBNull = false;
                this.columnChaffPartMask.AllowDBNull = false;
                this.columnMagazineCapacity.AllowDBNull = false;
                this.columnDispenserCapacity.AllowDBNull = false;
                this.columnChaffCapacity.AllowDBNull = false;
                this.columnPilotHUD.AllowDBNull = false;
                this.columnObserverHUD.AllowDBNull = false;
                this.columnInteriorSound.AllowDBNull = false;
                this.columnExteriorSound.AllowDBNull = false;
                this.columnThrustInteriorSound.AllowDBNull = false;
                this.columnThrustExteriorSound.AllowDBNull = false;
                this.columnTurnInteriorSound.AllowDBNull = false;
                this.columnTurnExteriorSound.AllowDBNull = false;
                this.columnDefenseType.AllowDBNull = false;
                this.columnSecondsToBuild.AllowDBNull = false;
                this.columnRipcordSpeed.AllowDBNull = false;
                this.columnECM.AllowDBNull = false;
                this.columnRipcordCost.AllowDBNull = false;
            }
            
            public ShipTypesRow NewShipTypesRow() {
                return ((ShipTypesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ShipTypesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ShipTypesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ShipTypesRowChanged != null)) {
                    this.ShipTypesRowChanged(this, new ShipTypesRowChangeEvent(((ShipTypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ShipTypesRowChanging != null)) {
                    this.ShipTypesRowChanging(this, new ShipTypesRowChangeEvent(((ShipTypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ShipTypesRowDeleted != null)) {
                    this.ShipTypesRowDeleted(this, new ShipTypesRowChangeEvent(((ShipTypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ShipTypesRowDeleting != null)) {
                    this.ShipTypesRowDeleting(this, new ShipTypesRowChangeEvent(((ShipTypesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveShipTypesRow(ShipTypesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ShipTypesRow : DataRow {
            
            private ShipTypesDataTable tableShipTypes;
            
            internal ShipTypesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableShipTypes = ((ShipTypesDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableShipTypes.NameColumn]));
                }
                set {
                    this[this.tableShipTypes.NameColumn] = value;
                }
            }
            
            public short ShipTypeID {
                get {
                    return ((short)(this[this.tableShipTypes.ShipTypeIDColumn]));
                }
                set {
                    this[this.tableShipTypes.ShipTypeIDColumn] = value;
                }
            }
            
            public string Model {
                get {
                    return ((string)(this[this.tableShipTypes.ModelColumn]));
                }
                set {
                    this[this.tableShipTypes.ModelColumn] = value;
                }
            }
            
            public System.Single Length {
                get {
                    return ((System.Single)(this[this.tableShipTypes.LengthColumn]));
                }
                set {
                    this[this.tableShipTypes.LengthColumn] = value;
                }
            }
            
            public System.Single Weight {
                get {
                    return ((System.Single)(this[this.tableShipTypes.WeightColumn]));
                }
                set {
                    this[this.tableShipTypes.WeightColumn] = value;
                }
            }
            
            public int Price {
                get {
                    return ((int)(this[this.tableShipTypes.PriceColumn]));
                }
                set {
                    this[this.tableShipTypes.PriceColumn] = value;
                }
            }
            
            public int BaseMaxSpeed {
                get {
                    return ((int)(this[this.tableShipTypes.BaseMaxSpeedColumn]));
                }
                set {
                    this[this.tableShipTypes.BaseMaxSpeedColumn] = value;
                }
            }
            
            public short BaseHitPoints {
                get {
                    return ((short)(this[this.tableShipTypes.BaseHitPointsColumn]));
                }
                set {
                    this[this.tableShipTypes.BaseHitPointsColumn] = value;
                }
            }
            
            public int BaseScannerRange {
                get {
                    return ((int)(this[this.tableShipTypes.BaseScannerRangeColumn]));
                }
                set {
                    this[this.tableShipTypes.BaseScannerRangeColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableShipTypes.DescriptionColumn]));
                }
                set {
                    this[this.tableShipTypes.DescriptionColumn] = value;
                }
            }
            
            public System.Single MaxRollRate {
                get {
                    return ((System.Single)(this[this.tableShipTypes.MaxRollRateColumn]));
                }
                set {
                    this[this.tableShipTypes.MaxRollRateColumn] = value;
                }
            }
            
            public System.Single MaxPitchRate {
                get {
                    return ((System.Single)(this[this.tableShipTypes.MaxPitchRateColumn]));
                }
                set {
                    this[this.tableShipTypes.MaxPitchRateColumn] = value;
                }
            }
            
            public System.Single MaxYawRate {
                get {
                    return ((System.Single)(this[this.tableShipTypes.MaxYawRateColumn]));
                }
                set {
                    this[this.tableShipTypes.MaxYawRateColumn] = value;
                }
            }
            
            public System.Single DriftRoll {
                get {
                    return ((System.Single)(this[this.tableShipTypes.DriftRollColumn]));
                }
                set {
                    this[this.tableShipTypes.DriftRollColumn] = value;
                }
            }
            
            public System.Single DriftPitch {
                get {
                    return ((System.Single)(this[this.tableShipTypes.DriftPitchColumn]));
                }
                set {
                    this[this.tableShipTypes.DriftPitchColumn] = value;
                }
            }
            
            public System.Single DriftYaw {
                get {
                    return ((System.Single)(this[this.tableShipTypes.DriftYawColumn]));
                }
                set {
                    this[this.tableShipTypes.DriftYawColumn] = value;
                }
            }
            
            public System.Single Acceleration {
                get {
                    return ((System.Single)(this[this.tableShipTypes.AccelerationColumn]));
                }
                set {
                    this[this.tableShipTypes.AccelerationColumn] = value;
                }
            }
            
            public System.Single AccelSideMultiplier {
                get {
                    return ((System.Single)(this[this.tableShipTypes.AccelSideMultiplierColumn]));
                }
                set {
                    this[this.tableShipTypes.AccelSideMultiplierColumn] = value;
                }
            }
            
            public System.Single AccelBackMultiplier {
                get {
                    return ((System.Single)(this[this.tableShipTypes.AccelBackMultiplierColumn]));
                }
                set {
                    this[this.tableShipTypes.AccelBackMultiplierColumn] = value;
                }
            }
            
            public short BaseSignature {
                get {
                    return ((short)(this[this.tableShipTypes.BaseSignatureColumn]));
                }
                set {
                    this[this.tableShipTypes.BaseSignatureColumn] = value;
                }
            }
            
            public System.Single EnergyMax {
                get {
                    return ((System.Single)(this[this.tableShipTypes.EnergyMaxColumn]));
                }
                set {
                    this[this.tableShipTypes.EnergyMaxColumn] = value;
                }
            }
            
            public System.Single RateRechargeEnergy {
                get {
                    return ((System.Single)(this[this.tableShipTypes.RateRechargeEnergyColumn]));
                }
                set {
                    this[this.tableShipTypes.RateRechargeEnergyColumn] = value;
                }
            }
            
            public string TechBitsRequired {
                get {
                    return ((string)(this[this.tableShipTypes.TechBitsRequiredColumn]));
                }
                set {
                    this[this.tableShipTypes.TechBitsRequiredColumn] = value;
                }
            }
            
            public string TechBitsEffect {
                get {
                    return ((string)(this[this.tableShipTypes.TechBitsEffectColumn]));
                }
                set {
                    this[this.tableShipTypes.TechBitsEffectColumn] = value;
                }
            }
            
            public short Capabilities {
                get {
                    return ((short)(this[this.tableShipTypes.CapabilitiesColumn]));
                }
                set {
                    this[this.tableShipTypes.CapabilitiesColumn] = value;
                }
            }
            
            public short MaxAmmo {
                get {
                    return ((short)(this[this.tableShipTypes.MaxAmmoColumn]));
                }
                set {
                    this[this.tableShipTypes.MaxAmmoColumn] = value;
                }
            }
            
            public short MaxFuel {
                get {
                    return ((short)(this[this.tableShipTypes.MaxFuelColumn]));
                }
                set {
                    this[this.tableShipTypes.MaxFuelColumn] = value;
                }
            }
            
            public string PRIcon {
                get {
                    return ((string)(this[this.tableShipTypes.PRIconColumn]));
                }
                set {
                    this[this.tableShipTypes.PRIconColumn] = value;
                }
            }
            
            public short ShieldPartMask {
                get {
                    return ((short)(this[this.tableShipTypes.ShieldPartMaskColumn]));
                }
                set {
                    this[this.tableShipTypes.ShieldPartMaskColumn] = value;
                }
            }
            
            public short AfterburnerPartMask {
                get {
                    return ((short)(this[this.tableShipTypes.AfterburnerPartMaskColumn]));
                }
                set {
                    this[this.tableShipTypes.AfterburnerPartMaskColumn] = value;
                }
            }
            
            public short CloakPartMask {
                get {
                    return ((short)(this[this.tableShipTypes.CloakPartMaskColumn]));
                }
                set {
                    this[this.tableShipTypes.CloakPartMaskColumn] = value;
                }
            }
            
            public short MagazinePartMask {
                get {
                    return ((short)(this[this.tableShipTypes.MagazinePartMaskColumn]));
                }
                set {
                    this[this.tableShipTypes.MagazinePartMaskColumn] = value;
                }
            }
            
            public short DispenserPartMask {
                get {
                    return ((short)(this[this.tableShipTypes.DispenserPartMaskColumn]));
                }
                set {
                    this[this.tableShipTypes.DispenserPartMaskColumn] = value;
                }
            }
            
            public short ChaffPartMask {
                get {
                    return ((short)(this[this.tableShipTypes.ChaffPartMaskColumn]));
                }
                set {
                    this[this.tableShipTypes.ChaffPartMaskColumn] = value;
                }
            }
            
            public short MagazineCapacity {
                get {
                    return ((short)(this[this.tableShipTypes.MagazineCapacityColumn]));
                }
                set {
                    this[this.tableShipTypes.MagazineCapacityColumn] = value;
                }
            }
            
            public short DispenserCapacity {
                get {
                    return ((short)(this[this.tableShipTypes.DispenserCapacityColumn]));
                }
                set {
                    this[this.tableShipTypes.DispenserCapacityColumn] = value;
                }
            }
            
            public short ChaffCapacity {
                get {
                    return ((short)(this[this.tableShipTypes.ChaffCapacityColumn]));
                }
                set {
                    this[this.tableShipTypes.ChaffCapacityColumn] = value;
                }
            }
            
            public short SuccessorHullID {
                get {
                    try {
                        return ((short)(this[this.tableShipTypes.SuccessorHullIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.SuccessorHullIDColumn] = value;
                }
            }
            
            public string PilotHUD {
                get {
                    return ((string)(this[this.tableShipTypes.PilotHUDColumn]));
                }
                set {
                    this[this.tableShipTypes.PilotHUDColumn] = value;
                }
            }
            
            public string ObserverHUD {
                get {
                    return ((string)(this[this.tableShipTypes.ObserverHUDColumn]));
                }
                set {
                    this[this.tableShipTypes.ObserverHUDColumn] = value;
                }
            }
            
            public short InteriorSound {
                get {
                    return ((short)(this[this.tableShipTypes.InteriorSoundColumn]));
                }
                set {
                    this[this.tableShipTypes.InteriorSoundColumn] = value;
                }
            }
            
            public short ExteriorSound {
                get {
                    return ((short)(this[this.tableShipTypes.ExteriorSoundColumn]));
                }
                set {
                    this[this.tableShipTypes.ExteriorSoundColumn] = value;
                }
            }
            
            public short ThrustInteriorSound {
                get {
                    return ((short)(this[this.tableShipTypes.ThrustInteriorSoundColumn]));
                }
                set {
                    this[this.tableShipTypes.ThrustInteriorSoundColumn] = value;
                }
            }
            
            public short ThrustExteriorSound {
                get {
                    return ((short)(this[this.tableShipTypes.ThrustExteriorSoundColumn]));
                }
                set {
                    this[this.tableShipTypes.ThrustExteriorSoundColumn] = value;
                }
            }
            
            public short TurnInteriorSound {
                get {
                    return ((short)(this[this.tableShipTypes.TurnInteriorSoundColumn]));
                }
                set {
                    this[this.tableShipTypes.TurnInteriorSoundColumn] = value;
                }
            }
            
            public short TurnExteriorSound {
                get {
                    return ((short)(this[this.tableShipTypes.TurnExteriorSoundColumn]));
                }
                set {
                    this[this.tableShipTypes.TurnExteriorSoundColumn] = value;
                }
            }
            
            public int SortOrder {
                get {
                    try {
                        return ((int)(this[this.tableShipTypes.SortOrderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.SortOrderColumn] = value;
                }
            }
            
            public short PreferredPartID14 {
                get {
                    try {
                        return ((short)(this[this.tableShipTypes.PreferredPartID14Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.PreferredPartID14Column] = value;
                }
            }
            
            public short PreferredPartID13 {
                get {
                    try {
                        return ((short)(this[this.tableShipTypes.PreferredPartID13Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.PreferredPartID13Column] = value;
                }
            }
            
            public short PreferredPartID12 {
                get {
                    try {
                        return ((short)(this[this.tableShipTypes.PreferredPartID12Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.PreferredPartID12Column] = value;
                }
            }
            
            public short PreferredPartID11 {
                get {
                    try {
                        return ((short)(this[this.tableShipTypes.PreferredPartID11Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.PreferredPartID11Column] = value;
                }
            }
            
            public short PreferredPartID10 {
                get {
                    try {
                        return ((short)(this[this.tableShipTypes.PreferredPartID10Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.PreferredPartID10Column] = value;
                }
            }
            
            public short PreferredPartID9 {
                get {
                    try {
                        return ((short)(this[this.tableShipTypes.PreferredPartID9Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.PreferredPartID9Column] = value;
                }
            }
            
            public short PreferredPartID8 {
                get {
                    try {
                        return ((short)(this[this.tableShipTypes.PreferredPartID8Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.PreferredPartID8Column] = value;
                }
            }
            
            public short PreferredPartID7 {
                get {
                    try {
                        return ((short)(this[this.tableShipTypes.PreferredPartID7Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.PreferredPartID7Column] = value;
                }
            }
            
            public short PreferredPartID6 {
                get {
                    try {
                        return ((short)(this[this.tableShipTypes.PreferredPartID6Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.PreferredPartID6Column] = value;
                }
            }
            
            public short PreferredPartID5 {
                get {
                    try {
                        return ((short)(this[this.tableShipTypes.PreferredPartID5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.PreferredPartID5Column] = value;
                }
            }
            
            public short PreferredPartID4 {
                get {
                    try {
                        return ((short)(this[this.tableShipTypes.PreferredPartID4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.PreferredPartID4Column] = value;
                }
            }
            
            public short PreferredPartID3 {
                get {
                    try {
                        return ((short)(this[this.tableShipTypes.PreferredPartID3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.PreferredPartID3Column] = value;
                }
            }
            
            public short PreferredPartID2 {
                get {
                    try {
                        return ((short)(this[this.tableShipTypes.PreferredPartID2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.PreferredPartID2Column] = value;
                }
            }
            
            public short PreferredPartID1 {
                get {
                    try {
                        return ((short)(this[this.tableShipTypes.PreferredPartID1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.PreferredPartID1Column] = value;
                }
            }
            
            public System.Byte DefenseType {
                get {
                    return ((System.Byte)(this[this.tableShipTypes.DefenseTypeColumn]));
                }
                set {
                    this[this.tableShipTypes.DefenseTypeColumn] = value;
                }
            }
            
            public short SecondsToBuild {
                get {
                    return ((short)(this[this.tableShipTypes.SecondsToBuildColumn]));
                }
                set {
                    this[this.tableShipTypes.SecondsToBuildColumn] = value;
                }
            }
            
            public System.Byte GroupID {
                get {
                    try {
                        return ((System.Byte)(this[this.tableShipTypes.GroupIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipTypes.GroupIDColumn] = value;
                }
            }
            
            public System.Single RipcordSpeed {
                get {
                    return ((System.Single)(this[this.tableShipTypes.RipcordSpeedColumn]));
                }
                set {
                    this[this.tableShipTypes.RipcordSpeedColumn] = value;
                }
            }
            
            public System.Single ECM {
                get {
                    return ((System.Single)(this[this.tableShipTypes.ECMColumn]));
                }
                set {
                    this[this.tableShipTypes.ECMColumn] = value;
                }
            }
            
            public System.Single RipcordCost {
                get {
                    return ((System.Single)(this[this.tableShipTypes.RipcordCostColumn]));
                }
                set {
                    this[this.tableShipTypes.RipcordCostColumn] = value;
                }
            }
            
            public bool IsSuccessorHullIDNull() {
                return this.IsNull(this.tableShipTypes.SuccessorHullIDColumn);
            }
            
            public void SetSuccessorHullIDNull() {
                this[this.tableShipTypes.SuccessorHullIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsSortOrderNull() {
                return this.IsNull(this.tableShipTypes.SortOrderColumn);
            }
            
            public void SetSortOrderNull() {
                this[this.tableShipTypes.SortOrderColumn] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID14Null() {
                return this.IsNull(this.tableShipTypes.PreferredPartID14Column);
            }
            
            public void SetPreferredPartID14Null() {
                this[this.tableShipTypes.PreferredPartID14Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID13Null() {
                return this.IsNull(this.tableShipTypes.PreferredPartID13Column);
            }
            
            public void SetPreferredPartID13Null() {
                this[this.tableShipTypes.PreferredPartID13Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID12Null() {
                return this.IsNull(this.tableShipTypes.PreferredPartID12Column);
            }
            
            public void SetPreferredPartID12Null() {
                this[this.tableShipTypes.PreferredPartID12Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID11Null() {
                return this.IsNull(this.tableShipTypes.PreferredPartID11Column);
            }
            
            public void SetPreferredPartID11Null() {
                this[this.tableShipTypes.PreferredPartID11Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID10Null() {
                return this.IsNull(this.tableShipTypes.PreferredPartID10Column);
            }
            
            public void SetPreferredPartID10Null() {
                this[this.tableShipTypes.PreferredPartID10Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID9Null() {
                return this.IsNull(this.tableShipTypes.PreferredPartID9Column);
            }
            
            public void SetPreferredPartID9Null() {
                this[this.tableShipTypes.PreferredPartID9Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID8Null() {
                return this.IsNull(this.tableShipTypes.PreferredPartID8Column);
            }
            
            public void SetPreferredPartID8Null() {
                this[this.tableShipTypes.PreferredPartID8Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID7Null() {
                return this.IsNull(this.tableShipTypes.PreferredPartID7Column);
            }
            
            public void SetPreferredPartID7Null() {
                this[this.tableShipTypes.PreferredPartID7Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID6Null() {
                return this.IsNull(this.tableShipTypes.PreferredPartID6Column);
            }
            
            public void SetPreferredPartID6Null() {
                this[this.tableShipTypes.PreferredPartID6Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID5Null() {
                return this.IsNull(this.tableShipTypes.PreferredPartID5Column);
            }
            
            public void SetPreferredPartID5Null() {
                this[this.tableShipTypes.PreferredPartID5Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID4Null() {
                return this.IsNull(this.tableShipTypes.PreferredPartID4Column);
            }
            
            public void SetPreferredPartID4Null() {
                this[this.tableShipTypes.PreferredPartID4Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID3Null() {
                return this.IsNull(this.tableShipTypes.PreferredPartID3Column);
            }
            
            public void SetPreferredPartID3Null() {
                this[this.tableShipTypes.PreferredPartID3Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID2Null() {
                return this.IsNull(this.tableShipTypes.PreferredPartID2Column);
            }
            
            public void SetPreferredPartID2Null() {
                this[this.tableShipTypes.PreferredPartID2Column] = System.Convert.DBNull;
            }
            
            public bool IsPreferredPartID1Null() {
                return this.IsNull(this.tableShipTypes.PreferredPartID1Column);
            }
            
            public void SetPreferredPartID1Null() {
                this[this.tableShipTypes.PreferredPartID1Column] = System.Convert.DBNull;
            }
            
            public bool IsGroupIDNull() {
                return this.IsNull(this.tableShipTypes.GroupIDColumn);
            }
            
            public void SetGroupIDNull() {
                this[this.tableShipTypes.GroupIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ShipTypesRowChangeEvent : EventArgs {
            
            private ShipTypesRow eventRow;
            
            private DataRowAction eventAction;
            
            public ShipTypesRowChangeEvent(ShipTypesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ShipTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StationClassesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnStationClassID;
            
            private DataColumn columnStationClassName;
            
            private DataColumn columnStationClassDescription;
            
            internal StationClassesDataTable() : 
                    base("StationClasses") {
                this.InitClass();
            }
            
            internal StationClassesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn StationClassIDColumn {
                get {
                    return this.columnStationClassID;
                }
            }
            
            internal DataColumn StationClassNameColumn {
                get {
                    return this.columnStationClassName;
                }
            }
            
            internal DataColumn StationClassDescriptionColumn {
                get {
                    return this.columnStationClassDescription;
                }
            }
            
            public StationClassesRow this[int index] {
                get {
                    return ((StationClassesRow)(this.Rows[index]));
                }
            }
            
            public event StationClassesRowChangeEventHandler StationClassesRowChanged;
            
            public event StationClassesRowChangeEventHandler StationClassesRowChanging;
            
            public event StationClassesRowChangeEventHandler StationClassesRowDeleted;
            
            public event StationClassesRowChangeEventHandler StationClassesRowDeleting;
            
            public void AddStationClassesRow(StationClassesRow row) {
                this.Rows.Add(row);
            }
            
            public StationClassesRow AddStationClassesRow(short StationClassID, string StationClassName, string StationClassDescription) {
                StationClassesRow rowStationClassesRow = ((StationClassesRow)(this.NewRow()));
                rowStationClassesRow.ItemArray = new object[] {
                        StationClassID,
                        StationClassName,
                        StationClassDescription};
                this.Rows.Add(rowStationClassesRow);
                return rowStationClassesRow;
            }
            
            public StationClassesRow FindByStationClassID(short StationClassID) {
                return ((StationClassesRow)(this.Rows.Find(new object[] {
                            StationClassID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                StationClassesDataTable cln = ((StationClassesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new StationClassesDataTable();
            }
            
            internal void InitVars() {
                this.columnStationClassID = this.Columns["StationClassID"];
                this.columnStationClassName = this.Columns["StationClassName"];
                this.columnStationClassDescription = this.Columns["StationClassDescription"];
            }
            
            private void InitClass() {
                this.columnStationClassID = new DataColumn("StationClassID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStationClassID);
                this.columnStationClassName = new DataColumn("StationClassName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStationClassName);
                this.columnStationClassDescription = new DataColumn("StationClassDescription", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStationClassDescription);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnStationClassID}, true));
                this.columnStationClassID.AllowDBNull = false;
                this.columnStationClassID.Unique = true;
                this.columnStationClassName.AllowDBNull = false;
            }
            
            public StationClassesRow NewStationClassesRow() {
                return ((StationClassesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new StationClassesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(StationClassesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StationClassesRowChanged != null)) {
                    this.StationClassesRowChanged(this, new StationClassesRowChangeEvent(((StationClassesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StationClassesRowChanging != null)) {
                    this.StationClassesRowChanging(this, new StationClassesRowChangeEvent(((StationClassesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StationClassesRowDeleted != null)) {
                    this.StationClassesRowDeleted(this, new StationClassesRowChangeEvent(((StationClassesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StationClassesRowDeleting != null)) {
                    this.StationClassesRowDeleting(this, new StationClassesRowChangeEvent(((StationClassesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStationClassesRow(StationClassesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StationClassesRow : DataRow {
            
            private StationClassesDataTable tableStationClasses;
            
            internal StationClassesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableStationClasses = ((StationClassesDataTable)(this.Table));
            }
            
            public short StationClassID {
                get {
                    return ((short)(this[this.tableStationClasses.StationClassIDColumn]));
                }
                set {
                    this[this.tableStationClasses.StationClassIDColumn] = value;
                }
            }
            
            public string StationClassName {
                get {
                    return ((string)(this[this.tableStationClasses.StationClassNameColumn]));
                }
                set {
                    this[this.tableStationClasses.StationClassNameColumn] = value;
                }
            }
            
            public string StationClassDescription {
                get {
                    try {
                        return ((string)(this[this.tableStationClasses.StationClassDescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStationClasses.StationClassDescriptionColumn] = value;
                }
            }
            
            public bool IsStationClassDescriptionNull() {
                return this.IsNull(this.tableStationClasses.StationClassDescriptionColumn);
            }
            
            public void SetStationClassDescriptionNull() {
                this[this.tableStationClasses.StationClassDescriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StationClassesRowChangeEvent : EventArgs {
            
            private StationClassesRow eventRow;
            
            private DataRowAction eventAction;
            
            public StationClassesRowChangeEvent(StationClassesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StationClassesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StationTypesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnStationTypeID;
            
            private DataColumn columnName;
            
            private DataColumn columnModel;
            
            private DataColumn columnDescription;
            
            private DataColumn columnRadius;
            
            private DataColumn columnHitPointsArmor;
            
            private DataColumn columnHitPointsShield;
            
            private DataColumn columnRateRegenShield;
            
            private DataColumn columnRateRegenArmor;
            
            private DataColumn columnPrice;
            
            private DataColumn columnSignature;
            
            private DataColumn columnSecondsToBuild;
            
            private DataColumn columnTechBitsLocal;
            
            private DataColumn columnTechBitsRequired;
            
            private DataColumn columnTechBitsEffect;
            
            private DataColumn columnUpgradeStationTypeID;
            
            private DataColumn columnCapabilities;
            
            private DataColumn columnScanRange;
            
            private DataColumn columnAsteroidDiscountMask;
            
            private DataColumn columnIncome;
            
            private DataColumn columnPRIcon;
            
            private DataColumn columnBuildLocationSound;
            
            private DataColumn columnConstructorAttackedSound;
            
            private DataColumn columnConstructorDestroyedSound;
            
            private DataColumn columnCompletedSound;
            
            private DataColumn columnExteriorSound;
            
            private DataColumn columnInteriorSound;
            
            private DataColumn columnInteriorAlertSound;
            
            private DataColumn columnUnderAttackSound;
            
            private DataColumn columnCriticalSound;
            
            private DataColumn columnDestroyedSound;
            
            private DataColumn columnCapturedSound;
            
            private DataColumn columnEnemyDestroyedSound;
            
            private DataColumn columnEnemyCapturedSound;
            
            private DataColumn columnGroupID;
            
            private DataColumn columnClassID;
            
            private DataColumn columnSecondsToBuy;
            
            private DataColumn columnDefenseTypeArmor;
            
            private DataColumn columnDefenseTypeShield;
            
            private DataColumn columnBuilderName;
            
            private DataColumn columnConstructionDroneTypeID;
            
            internal StationTypesDataTable() : 
                    base("StationTypes") {
                this.InitClass();
            }
            
            internal StationTypesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn StationTypeIDColumn {
                get {
                    return this.columnStationTypeID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ModelColumn {
                get {
                    return this.columnModel;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn RadiusColumn {
                get {
                    return this.columnRadius;
                }
            }
            
            internal DataColumn HitPointsArmorColumn {
                get {
                    return this.columnHitPointsArmor;
                }
            }
            
            internal DataColumn HitPointsShieldColumn {
                get {
                    return this.columnHitPointsShield;
                }
            }
            
            internal DataColumn RateRegenShieldColumn {
                get {
                    return this.columnRateRegenShield;
                }
            }
            
            internal DataColumn RateRegenArmorColumn {
                get {
                    return this.columnRateRegenArmor;
                }
            }
            
            internal DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            internal DataColumn SignatureColumn {
                get {
                    return this.columnSignature;
                }
            }
            
            internal DataColumn SecondsToBuildColumn {
                get {
                    return this.columnSecondsToBuild;
                }
            }
            
            internal DataColumn TechBitsLocalColumn {
                get {
                    return this.columnTechBitsLocal;
                }
            }
            
            internal DataColumn TechBitsRequiredColumn {
                get {
                    return this.columnTechBitsRequired;
                }
            }
            
            internal DataColumn TechBitsEffectColumn {
                get {
                    return this.columnTechBitsEffect;
                }
            }
            
            internal DataColumn UpgradeStationTypeIDColumn {
                get {
                    return this.columnUpgradeStationTypeID;
                }
            }
            
            internal DataColumn CapabilitiesColumn {
                get {
                    return this.columnCapabilities;
                }
            }
            
            internal DataColumn ScanRangeColumn {
                get {
                    return this.columnScanRange;
                }
            }
            
            internal DataColumn AsteroidDiscountMaskColumn {
                get {
                    return this.columnAsteroidDiscountMask;
                }
            }
            
            internal DataColumn IncomeColumn {
                get {
                    return this.columnIncome;
                }
            }
            
            internal DataColumn PRIconColumn {
                get {
                    return this.columnPRIcon;
                }
            }
            
            internal DataColumn BuildLocationSoundColumn {
                get {
                    return this.columnBuildLocationSound;
                }
            }
            
            internal DataColumn ConstructorAttackedSoundColumn {
                get {
                    return this.columnConstructorAttackedSound;
                }
            }
            
            internal DataColumn ConstructorDestroyedSoundColumn {
                get {
                    return this.columnConstructorDestroyedSound;
                }
            }
            
            internal DataColumn CompletedSoundColumn {
                get {
                    return this.columnCompletedSound;
                }
            }
            
            internal DataColumn ExteriorSoundColumn {
                get {
                    return this.columnExteriorSound;
                }
            }
            
            internal DataColumn InteriorSoundColumn {
                get {
                    return this.columnInteriorSound;
                }
            }
            
            internal DataColumn InteriorAlertSoundColumn {
                get {
                    return this.columnInteriorAlertSound;
                }
            }
            
            internal DataColumn UnderAttackSoundColumn {
                get {
                    return this.columnUnderAttackSound;
                }
            }
            
            internal DataColumn CriticalSoundColumn {
                get {
                    return this.columnCriticalSound;
                }
            }
            
            internal DataColumn DestroyedSoundColumn {
                get {
                    return this.columnDestroyedSound;
                }
            }
            
            internal DataColumn CapturedSoundColumn {
                get {
                    return this.columnCapturedSound;
                }
            }
            
            internal DataColumn EnemyDestroyedSoundColumn {
                get {
                    return this.columnEnemyDestroyedSound;
                }
            }
            
            internal DataColumn EnemyCapturedSoundColumn {
                get {
                    return this.columnEnemyCapturedSound;
                }
            }
            
            internal DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            internal DataColumn ClassIDColumn {
                get {
                    return this.columnClassID;
                }
            }
            
            internal DataColumn SecondsToBuyColumn {
                get {
                    return this.columnSecondsToBuy;
                }
            }
            
            internal DataColumn DefenseTypeArmorColumn {
                get {
                    return this.columnDefenseTypeArmor;
                }
            }
            
            internal DataColumn DefenseTypeShieldColumn {
                get {
                    return this.columnDefenseTypeShield;
                }
            }
            
            internal DataColumn BuilderNameColumn {
                get {
                    return this.columnBuilderName;
                }
            }
            
            internal DataColumn ConstructionDroneTypeIDColumn {
                get {
                    return this.columnConstructionDroneTypeID;
                }
            }
            
            public StationTypesRow this[int index] {
                get {
                    return ((StationTypesRow)(this.Rows[index]));
                }
            }
            
            public event StationTypesRowChangeEventHandler StationTypesRowChanged;
            
            public event StationTypesRowChangeEventHandler StationTypesRowChanging;
            
            public event StationTypesRowChangeEventHandler StationTypesRowDeleted;
            
            public event StationTypesRowChangeEventHandler StationTypesRowDeleting;
            
            public void AddStationTypesRow(StationTypesRow row) {
                this.Rows.Add(row);
            }
            
            public StationTypesRow AddStationTypesRow(
                        short StationTypeID, 
                        string Name, 
                        string Model, 
                        string Description, 
                        System.Single Radius, 
                        short HitPointsArmor, 
                        short HitPointsShield, 
                        System.Single RateRegenShield, 
                        System.Single RateRegenArmor, 
                        int Price, 
                        short Signature, 
                        short SecondsToBuild, 
                        string TechBitsLocal, 
                        string TechBitsRequired, 
                        string TechBitsEffect, 
                        short UpgradeStationTypeID, 
                        short Capabilities, 
                        System.Single ScanRange, 
                        short AsteroidDiscountMask, 
                        int Income, 
                        string PRIcon, 
                        short BuildLocationSound, 
                        short ConstructorAttackedSound, 
                        short ConstructorDestroyedSound, 
                        short CompletedSound, 
                        short ExteriorSound, 
                        short InteriorSound, 
                        short InteriorAlertSound, 
                        short UnderAttackSound, 
                        short CriticalSound, 
                        short DestroyedSound, 
                        short CapturedSound, 
                        short EnemyDestroyedSound, 
                        short EnemyCapturedSound, 
                        System.Byte GroupID, 
                        System.Byte ClassID, 
                        short SecondsToBuy, 
                        System.Byte DefenseTypeArmor, 
                        System.Byte DefenseTypeShield, 
                        string BuilderName, 
                        short ConstructionDroneTypeID) {
                StationTypesRow rowStationTypesRow = ((StationTypesRow)(this.NewRow()));
                rowStationTypesRow.ItemArray = new object[] {
                        StationTypeID,
                        Name,
                        Model,
                        Description,
                        Radius,
                        HitPointsArmor,
                        HitPointsShield,
                        RateRegenShield,
                        RateRegenArmor,
                        Price,
                        Signature,
                        SecondsToBuild,
                        TechBitsLocal,
                        TechBitsRequired,
                        TechBitsEffect,
                        UpgradeStationTypeID,
                        Capabilities,
                        ScanRange,
                        AsteroidDiscountMask,
                        Income,
                        PRIcon,
                        BuildLocationSound,
                        ConstructorAttackedSound,
                        ConstructorDestroyedSound,
                        CompletedSound,
                        ExteriorSound,
                        InteriorSound,
                        InteriorAlertSound,
                        UnderAttackSound,
                        CriticalSound,
                        DestroyedSound,
                        CapturedSound,
                        EnemyDestroyedSound,
                        EnemyCapturedSound,
                        GroupID,
                        ClassID,
                        SecondsToBuy,
                        DefenseTypeArmor,
                        DefenseTypeShield,
                        BuilderName,
                        ConstructionDroneTypeID};
                this.Rows.Add(rowStationTypesRow);
                return rowStationTypesRow;
            }
            
            public StationTypesRow FindByStationTypeID(short StationTypeID) {
                return ((StationTypesRow)(this.Rows.Find(new object[] {
                            StationTypeID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                StationTypesDataTable cln = ((StationTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new StationTypesDataTable();
            }
            
            internal void InitVars() {
                this.columnStationTypeID = this.Columns["StationTypeID"];
                this.columnName = this.Columns["Name"];
                this.columnModel = this.Columns["Model"];
                this.columnDescription = this.Columns["Description"];
                this.columnRadius = this.Columns["Radius"];
                this.columnHitPointsArmor = this.Columns["HitPointsArmor"];
                this.columnHitPointsShield = this.Columns["HitPointsShield"];
                this.columnRateRegenShield = this.Columns["RateRegenShield"];
                this.columnRateRegenArmor = this.Columns["RateRegenArmor"];
                this.columnPrice = this.Columns["Price"];
                this.columnSignature = this.Columns["Signature"];
                this.columnSecondsToBuild = this.Columns["SecondsToBuild"];
                this.columnTechBitsLocal = this.Columns["TechBitsLocal"];
                this.columnTechBitsRequired = this.Columns["TechBitsRequired"];
                this.columnTechBitsEffect = this.Columns["TechBitsEffect"];
                this.columnUpgradeStationTypeID = this.Columns["UpgradeStationTypeID"];
                this.columnCapabilities = this.Columns["Capabilities"];
                this.columnScanRange = this.Columns["ScanRange"];
                this.columnAsteroidDiscountMask = this.Columns["AsteroidDiscountMask"];
                this.columnIncome = this.Columns["Income"];
                this.columnPRIcon = this.Columns["PRIcon"];
                this.columnBuildLocationSound = this.Columns["BuildLocationSound"];
                this.columnConstructorAttackedSound = this.Columns["ConstructorAttackedSound"];
                this.columnConstructorDestroyedSound = this.Columns["ConstructorDestroyedSound"];
                this.columnCompletedSound = this.Columns["CompletedSound"];
                this.columnExteriorSound = this.Columns["ExteriorSound"];
                this.columnInteriorSound = this.Columns["InteriorSound"];
                this.columnInteriorAlertSound = this.Columns["InteriorAlertSound"];
                this.columnUnderAttackSound = this.Columns["UnderAttackSound"];
                this.columnCriticalSound = this.Columns["CriticalSound"];
                this.columnDestroyedSound = this.Columns["DestroyedSound"];
                this.columnCapturedSound = this.Columns["CapturedSound"];
                this.columnEnemyDestroyedSound = this.Columns["EnemyDestroyedSound"];
                this.columnEnemyCapturedSound = this.Columns["EnemyCapturedSound"];
                this.columnGroupID = this.Columns["GroupID"];
                this.columnClassID = this.Columns["ClassID"];
                this.columnSecondsToBuy = this.Columns["SecondsToBuy"];
                this.columnDefenseTypeArmor = this.Columns["DefenseTypeArmor"];
                this.columnDefenseTypeShield = this.Columns["DefenseTypeShield"];
                this.columnBuilderName = this.Columns["BuilderName"];
                this.columnConstructionDroneTypeID = this.Columns["ConstructionDroneTypeID"];
            }
            
            private void InitClass() {
                this.columnStationTypeID = new DataColumn("StationTypeID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStationTypeID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnModel = new DataColumn("Model", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModel);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnRadius = new DataColumn("Radius", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRadius);
                this.columnHitPointsArmor = new DataColumn("HitPointsArmor", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHitPointsArmor);
                this.columnHitPointsShield = new DataColumn("HitPointsShield", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHitPointsShield);
                this.columnRateRegenShield = new DataColumn("RateRegenShield", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRateRegenShield);
                this.columnRateRegenArmor = new DataColumn("RateRegenArmor", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRateRegenArmor);
                this.columnPrice = new DataColumn("Price", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice);
                this.columnSignature = new DataColumn("Signature", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSignature);
                this.columnSecondsToBuild = new DataColumn("SecondsToBuild", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecondsToBuild);
                this.columnTechBitsLocal = new DataColumn("TechBitsLocal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechBitsLocal);
                this.columnTechBitsRequired = new DataColumn("TechBitsRequired", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechBitsRequired);
                this.columnTechBitsEffect = new DataColumn("TechBitsEffect", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTechBitsEffect);
                this.columnUpgradeStationTypeID = new DataColumn("UpgradeStationTypeID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUpgradeStationTypeID);
                this.columnCapabilities = new DataColumn("Capabilities", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCapabilities);
                this.columnScanRange = new DataColumn("ScanRange", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnScanRange);
                this.columnAsteroidDiscountMask = new DataColumn("AsteroidDiscountMask", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAsteroidDiscountMask);
                this.columnIncome = new DataColumn("Income", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIncome);
                this.columnPRIcon = new DataColumn("PRIcon", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPRIcon);
                this.columnBuildLocationSound = new DataColumn("BuildLocationSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBuildLocationSound);
                this.columnConstructorAttackedSound = new DataColumn("ConstructorAttackedSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConstructorAttackedSound);
                this.columnConstructorDestroyedSound = new DataColumn("ConstructorDestroyedSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConstructorDestroyedSound);
                this.columnCompletedSound = new DataColumn("CompletedSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompletedSound);
                this.columnExteriorSound = new DataColumn("ExteriorSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExteriorSound);
                this.columnInteriorSound = new DataColumn("InteriorSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInteriorSound);
                this.columnInteriorAlertSound = new DataColumn("InteriorAlertSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInteriorAlertSound);
                this.columnUnderAttackSound = new DataColumn("UnderAttackSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUnderAttackSound);
                this.columnCriticalSound = new DataColumn("CriticalSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCriticalSound);
                this.columnDestroyedSound = new DataColumn("DestroyedSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDestroyedSound);
                this.columnCapturedSound = new DataColumn("CapturedSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCapturedSound);
                this.columnEnemyDestroyedSound = new DataColumn("EnemyDestroyedSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEnemyDestroyedSound);
                this.columnEnemyCapturedSound = new DataColumn("EnemyCapturedSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEnemyCapturedSound);
                this.columnGroupID = new DataColumn("GroupID", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroupID);
                this.columnClassID = new DataColumn("ClassID", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClassID);
                this.columnSecondsToBuy = new DataColumn("SecondsToBuy", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecondsToBuy);
                this.columnDefenseTypeArmor = new DataColumn("DefenseTypeArmor", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDefenseTypeArmor);
                this.columnDefenseTypeShield = new DataColumn("DefenseTypeShield", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDefenseTypeShield);
                this.columnBuilderName = new DataColumn("BuilderName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBuilderName);
                this.columnConstructionDroneTypeID = new DataColumn("ConstructionDroneTypeID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConstructionDroneTypeID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnStationTypeID}, true));
                this.columnStationTypeID.AllowDBNull = false;
                this.columnStationTypeID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnModel.AllowDBNull = false;
                this.columnRadius.AllowDBNull = false;
                this.columnHitPointsArmor.AllowDBNull = false;
                this.columnHitPointsShield.AllowDBNull = false;
                this.columnRateRegenShield.AllowDBNull = false;
                this.columnRateRegenArmor.AllowDBNull = false;
                this.columnPrice.AllowDBNull = false;
                this.columnSignature.AllowDBNull = false;
                this.columnSecondsToBuild.AllowDBNull = false;
                this.columnTechBitsLocal.AllowDBNull = false;
                this.columnTechBitsRequired.AllowDBNull = false;
                this.columnTechBitsEffect.AllowDBNull = false;
                this.columnCapabilities.AllowDBNull = false;
                this.columnScanRange.AllowDBNull = false;
                this.columnAsteroidDiscountMask.AllowDBNull = false;
                this.columnIncome.AllowDBNull = false;
                this.columnBuildLocationSound.AllowDBNull = false;
                this.columnConstructorAttackedSound.AllowDBNull = false;
                this.columnConstructorDestroyedSound.AllowDBNull = false;
                this.columnCompletedSound.AllowDBNull = false;
                this.columnExteriorSound.AllowDBNull = false;
                this.columnInteriorSound.AllowDBNull = false;
                this.columnInteriorAlertSound.AllowDBNull = false;
                this.columnUnderAttackSound.AllowDBNull = false;
                this.columnCriticalSound.AllowDBNull = false;
                this.columnDestroyedSound.AllowDBNull = false;
                this.columnCapturedSound.AllowDBNull = false;
                this.columnEnemyDestroyedSound.AllowDBNull = false;
                this.columnEnemyCapturedSound.AllowDBNull = false;
                this.columnGroupID.AllowDBNull = false;
                this.columnClassID.AllowDBNull = false;
                this.columnSecondsToBuy.AllowDBNull = false;
                this.columnDefenseTypeArmor.AllowDBNull = false;
                this.columnDefenseTypeShield.AllowDBNull = false;
                this.columnConstructionDroneTypeID.AllowDBNull = false;
            }
            
            public StationTypesRow NewStationTypesRow() {
                return ((StationTypesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new StationTypesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(StationTypesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StationTypesRowChanged != null)) {
                    this.StationTypesRowChanged(this, new StationTypesRowChangeEvent(((StationTypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StationTypesRowChanging != null)) {
                    this.StationTypesRowChanging(this, new StationTypesRowChangeEvent(((StationTypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StationTypesRowDeleted != null)) {
                    this.StationTypesRowDeleted(this, new StationTypesRowChangeEvent(((StationTypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StationTypesRowDeleting != null)) {
                    this.StationTypesRowDeleting(this, new StationTypesRowChangeEvent(((StationTypesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStationTypesRow(StationTypesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StationTypesRow : DataRow {
            
            private StationTypesDataTable tableStationTypes;
            
            internal StationTypesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableStationTypes = ((StationTypesDataTable)(this.Table));
            }
            
            public short StationTypeID {
                get {
                    return ((short)(this[this.tableStationTypes.StationTypeIDColumn]));
                }
                set {
                    this[this.tableStationTypes.StationTypeIDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableStationTypes.NameColumn]));
                }
                set {
                    this[this.tableStationTypes.NameColumn] = value;
                }
            }
            
            public string Model {
                get {
                    return ((string)(this[this.tableStationTypes.ModelColumn]));
                }
                set {
                    this[this.tableStationTypes.ModelColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableStationTypes.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStationTypes.DescriptionColumn] = value;
                }
            }
            
            public System.Single Radius {
                get {
                    return ((System.Single)(this[this.tableStationTypes.RadiusColumn]));
                }
                set {
                    this[this.tableStationTypes.RadiusColumn] = value;
                }
            }
            
            public short HitPointsArmor {
                get {
                    return ((short)(this[this.tableStationTypes.HitPointsArmorColumn]));
                }
                set {
                    this[this.tableStationTypes.HitPointsArmorColumn] = value;
                }
            }
            
            public short HitPointsShield {
                get {
                    return ((short)(this[this.tableStationTypes.HitPointsShieldColumn]));
                }
                set {
                    this[this.tableStationTypes.HitPointsShieldColumn] = value;
                }
            }
            
            public System.Single RateRegenShield {
                get {
                    return ((System.Single)(this[this.tableStationTypes.RateRegenShieldColumn]));
                }
                set {
                    this[this.tableStationTypes.RateRegenShieldColumn] = value;
                }
            }
            
            public System.Single RateRegenArmor {
                get {
                    return ((System.Single)(this[this.tableStationTypes.RateRegenArmorColumn]));
                }
                set {
                    this[this.tableStationTypes.RateRegenArmorColumn] = value;
                }
            }
            
            public int Price {
                get {
                    return ((int)(this[this.tableStationTypes.PriceColumn]));
                }
                set {
                    this[this.tableStationTypes.PriceColumn] = value;
                }
            }
            
            public short Signature {
                get {
                    return ((short)(this[this.tableStationTypes.SignatureColumn]));
                }
                set {
                    this[this.tableStationTypes.SignatureColumn] = value;
                }
            }
            
            public short SecondsToBuild {
                get {
                    return ((short)(this[this.tableStationTypes.SecondsToBuildColumn]));
                }
                set {
                    this[this.tableStationTypes.SecondsToBuildColumn] = value;
                }
            }
            
            public string TechBitsLocal {
                get {
                    return ((string)(this[this.tableStationTypes.TechBitsLocalColumn]));
                }
                set {
                    this[this.tableStationTypes.TechBitsLocalColumn] = value;
                }
            }
            
            public string TechBitsRequired {
                get {
                    return ((string)(this[this.tableStationTypes.TechBitsRequiredColumn]));
                }
                set {
                    this[this.tableStationTypes.TechBitsRequiredColumn] = value;
                }
            }
            
            public string TechBitsEffect {
                get {
                    return ((string)(this[this.tableStationTypes.TechBitsEffectColumn]));
                }
                set {
                    this[this.tableStationTypes.TechBitsEffectColumn] = value;
                }
            }
            
            public short UpgradeStationTypeID {
                get {
                    try {
                        return ((short)(this[this.tableStationTypes.UpgradeStationTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStationTypes.UpgradeStationTypeIDColumn] = value;
                }
            }
            
            public short Capabilities {
                get {
                    return ((short)(this[this.tableStationTypes.CapabilitiesColumn]));
                }
                set {
                    this[this.tableStationTypes.CapabilitiesColumn] = value;
                }
            }
            
            public System.Single ScanRange {
                get {
                    return ((System.Single)(this[this.tableStationTypes.ScanRangeColumn]));
                }
                set {
                    this[this.tableStationTypes.ScanRangeColumn] = value;
                }
            }
            
            public short AsteroidDiscountMask {
                get {
                    return ((short)(this[this.tableStationTypes.AsteroidDiscountMaskColumn]));
                }
                set {
                    this[this.tableStationTypes.AsteroidDiscountMaskColumn] = value;
                }
            }
            
            public int Income {
                get {
                    return ((int)(this[this.tableStationTypes.IncomeColumn]));
                }
                set {
                    this[this.tableStationTypes.IncomeColumn] = value;
                }
            }
            
            public string PRIcon {
                get {
                    try {
                        return ((string)(this[this.tableStationTypes.PRIconColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStationTypes.PRIconColumn] = value;
                }
            }
            
            public short BuildLocationSound {
                get {
                    return ((short)(this[this.tableStationTypes.BuildLocationSoundColumn]));
                }
                set {
                    this[this.tableStationTypes.BuildLocationSoundColumn] = value;
                }
            }
            
            public short ConstructorAttackedSound {
                get {
                    return ((short)(this[this.tableStationTypes.ConstructorAttackedSoundColumn]));
                }
                set {
                    this[this.tableStationTypes.ConstructorAttackedSoundColumn] = value;
                }
            }
            
            public short ConstructorDestroyedSound {
                get {
                    return ((short)(this[this.tableStationTypes.ConstructorDestroyedSoundColumn]));
                }
                set {
                    this[this.tableStationTypes.ConstructorDestroyedSoundColumn] = value;
                }
            }
            
            public short CompletedSound {
                get {
                    return ((short)(this[this.tableStationTypes.CompletedSoundColumn]));
                }
                set {
                    this[this.tableStationTypes.CompletedSoundColumn] = value;
                }
            }
            
            public short ExteriorSound {
                get {
                    return ((short)(this[this.tableStationTypes.ExteriorSoundColumn]));
                }
                set {
                    this[this.tableStationTypes.ExteriorSoundColumn] = value;
                }
            }
            
            public short InteriorSound {
                get {
                    return ((short)(this[this.tableStationTypes.InteriorSoundColumn]));
                }
                set {
                    this[this.tableStationTypes.InteriorSoundColumn] = value;
                }
            }
            
            public short InteriorAlertSound {
                get {
                    return ((short)(this[this.tableStationTypes.InteriorAlertSoundColumn]));
                }
                set {
                    this[this.tableStationTypes.InteriorAlertSoundColumn] = value;
                }
            }
            
            public short UnderAttackSound {
                get {
                    return ((short)(this[this.tableStationTypes.UnderAttackSoundColumn]));
                }
                set {
                    this[this.tableStationTypes.UnderAttackSoundColumn] = value;
                }
            }
            
            public short CriticalSound {
                get {
                    return ((short)(this[this.tableStationTypes.CriticalSoundColumn]));
                }
                set {
                    this[this.tableStationTypes.CriticalSoundColumn] = value;
                }
            }
            
            public short DestroyedSound {
                get {
                    return ((short)(this[this.tableStationTypes.DestroyedSoundColumn]));
                }
                set {
                    this[this.tableStationTypes.DestroyedSoundColumn] = value;
                }
            }
            
            public short CapturedSound {
                get {
                    return ((short)(this[this.tableStationTypes.CapturedSoundColumn]));
                }
                set {
                    this[this.tableStationTypes.CapturedSoundColumn] = value;
                }
            }
            
            public short EnemyDestroyedSound {
                get {
                    return ((short)(this[this.tableStationTypes.EnemyDestroyedSoundColumn]));
                }
                set {
                    this[this.tableStationTypes.EnemyDestroyedSoundColumn] = value;
                }
            }
            
            public short EnemyCapturedSound {
                get {
                    return ((short)(this[this.tableStationTypes.EnemyCapturedSoundColumn]));
                }
                set {
                    this[this.tableStationTypes.EnemyCapturedSoundColumn] = value;
                }
            }
            
            public System.Byte GroupID {
                get {
                    return ((System.Byte)(this[this.tableStationTypes.GroupIDColumn]));
                }
                set {
                    this[this.tableStationTypes.GroupIDColumn] = value;
                }
            }
            
            public System.Byte ClassID {
                get {
                    return ((System.Byte)(this[this.tableStationTypes.ClassIDColumn]));
                }
                set {
                    this[this.tableStationTypes.ClassIDColumn] = value;
                }
            }
            
            public short SecondsToBuy {
                get {
                    return ((short)(this[this.tableStationTypes.SecondsToBuyColumn]));
                }
                set {
                    this[this.tableStationTypes.SecondsToBuyColumn] = value;
                }
            }
            
            public System.Byte DefenseTypeArmor {
                get {
                    return ((System.Byte)(this[this.tableStationTypes.DefenseTypeArmorColumn]));
                }
                set {
                    this[this.tableStationTypes.DefenseTypeArmorColumn] = value;
                }
            }
            
            public System.Byte DefenseTypeShield {
                get {
                    return ((System.Byte)(this[this.tableStationTypes.DefenseTypeShieldColumn]));
                }
                set {
                    this[this.tableStationTypes.DefenseTypeShieldColumn] = value;
                }
            }
            
            public string BuilderName {
                get {
                    try {
                        return ((string)(this[this.tableStationTypes.BuilderNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStationTypes.BuilderNameColumn] = value;
                }
            }
            
            public short ConstructionDroneTypeID {
                get {
                    return ((short)(this[this.tableStationTypes.ConstructionDroneTypeIDColumn]));
                }
                set {
                    this[this.tableStationTypes.ConstructionDroneTypeIDColumn] = value;
                }
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableStationTypes.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableStationTypes.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsUpgradeStationTypeIDNull() {
                return this.IsNull(this.tableStationTypes.UpgradeStationTypeIDColumn);
            }
            
            public void SetUpgradeStationTypeIDNull() {
                this[this.tableStationTypes.UpgradeStationTypeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPRIconNull() {
                return this.IsNull(this.tableStationTypes.PRIconColumn);
            }
            
            public void SetPRIconNull() {
                this[this.tableStationTypes.PRIconColumn] = System.Convert.DBNull;
            }
            
            public bool IsBuilderNameNull() {
                return this.IsNull(this.tableStationTypes.BuilderNameColumn);
            }
            
            public void SetBuilderNameNull() {
                this[this.tableStationTypes.BuilderNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StationTypesRowChangeEvent : EventArgs {
            
            private StationTypesRow eventRow;
            
            private DataRowAction eventAction;
            
            public StationTypesRowChangeEvent(StationTypesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StationTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TechBitsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBitID;
            
            private DataColumn columnBitShortName;
            
            private DataColumn columnBitLongName;
            
            internal TechBitsDataTable() : 
                    base("TechBits") {
                this.InitClass();
            }
            
            internal TechBitsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn BitIDColumn {
                get {
                    return this.columnBitID;
                }
            }
            
            internal DataColumn BitShortNameColumn {
                get {
                    return this.columnBitShortName;
                }
            }
            
            internal DataColumn BitLongNameColumn {
                get {
                    return this.columnBitLongName;
                }
            }
            
            public TechBitsRow this[int index] {
                get {
                    return ((TechBitsRow)(this.Rows[index]));
                }
            }
            
            public event TechBitsRowChangeEventHandler TechBitsRowChanged;
            
            public event TechBitsRowChangeEventHandler TechBitsRowChanging;
            
            public event TechBitsRowChangeEventHandler TechBitsRowDeleted;
            
            public event TechBitsRowChangeEventHandler TechBitsRowDeleting;
            
            public void AddTechBitsRow(TechBitsRow row) {
                this.Rows.Add(row);
            }
            
            public TechBitsRow AddTechBitsRow(int BitID, string BitShortName, string BitLongName) {
                TechBitsRow rowTechBitsRow = ((TechBitsRow)(this.NewRow()));
                rowTechBitsRow.ItemArray = new object[] {
                        BitID,
                        BitShortName,
                        BitLongName};
                this.Rows.Add(rowTechBitsRow);
                return rowTechBitsRow;
            }
            
            public TechBitsRow FindByBitShortName(string BitShortName) {
                return ((TechBitsRow)(this.Rows.Find(new object[] {
                            BitShortName})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TechBitsDataTable cln = ((TechBitsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TechBitsDataTable();
            }
            
            internal void InitVars() {
                this.columnBitID = this.Columns["BitID"];
                this.columnBitShortName = this.Columns["BitShortName"];
                this.columnBitLongName = this.Columns["BitLongName"];
            }
            
            private void InitClass() {
                this.columnBitID = new DataColumn("BitID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBitID);
                this.columnBitShortName = new DataColumn("BitShortName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBitShortName);
                this.columnBitLongName = new DataColumn("BitLongName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBitLongName);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnBitShortName}, true));
                this.columnBitID.AllowDBNull = false;
                this.columnBitShortName.AllowDBNull = false;
                this.columnBitShortName.Unique = true;
            }
            
            public TechBitsRow NewTechBitsRow() {
                return ((TechBitsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TechBitsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TechBitsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TechBitsRowChanged != null)) {
                    this.TechBitsRowChanged(this, new TechBitsRowChangeEvent(((TechBitsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TechBitsRowChanging != null)) {
                    this.TechBitsRowChanging(this, new TechBitsRowChangeEvent(((TechBitsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TechBitsRowDeleted != null)) {
                    this.TechBitsRowDeleted(this, new TechBitsRowChangeEvent(((TechBitsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TechBitsRowDeleting != null)) {
                    this.TechBitsRowDeleting(this, new TechBitsRowChangeEvent(((TechBitsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTechBitsRow(TechBitsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TechBitsRow : DataRow {
            
            private TechBitsDataTable tableTechBits;
            
            internal TechBitsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTechBits = ((TechBitsDataTable)(this.Table));
            }
            
            public int BitID {
                get {
                    return ((int)(this[this.tableTechBits.BitIDColumn]));
                }
                set {
                    this[this.tableTechBits.BitIDColumn] = value;
                }
            }
            
            public string BitShortName {
                get {
                    return ((string)(this[this.tableTechBits.BitShortNameColumn]));
                }
                set {
                    this[this.tableTechBits.BitShortNameColumn] = value;
                }
            }
            
            public string BitLongName {
                get {
                    try {
                        return ((string)(this[this.tableTechBits.BitLongNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTechBits.BitLongNameColumn] = value;
                }
            }
            
            public bool IsBitLongNameNull() {
                return this.IsNull(this.tableTechBits.BitLongNameColumn);
            }
            
            public void SetBitLongNameNull() {
                this[this.tableTechBits.BitLongNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TechBitsRowChangeEvent : EventArgs {
            
            private TechBitsRow eventRow;
            
            private DataRowAction eventAction;
            
            public TechBitsRowChangeEvent(TechBitsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TechBitsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TreasureChancesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnObjectID;
            
            private DataColumn columnChance;
            
            private DataColumn columnTreasureSetID;
            
            private DataColumn columnTreasureCode;
            
            internal TreasureChancesDataTable() : 
                    base("TreasureChances") {
                this.InitClass();
            }
            
            internal TreasureChancesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            internal DataColumn ChanceColumn {
                get {
                    return this.columnChance;
                }
            }
            
            internal DataColumn TreasureSetIDColumn {
                get {
                    return this.columnTreasureSetID;
                }
            }
            
            internal DataColumn TreasureCodeColumn {
                get {
                    return this.columnTreasureCode;
                }
            }
            
            public TreasureChancesRow this[int index] {
                get {
                    return ((TreasureChancesRow)(this.Rows[index]));
                }
            }
            
            public event TreasureChancesRowChangeEventHandler TreasureChancesRowChanged;
            
            public event TreasureChancesRowChangeEventHandler TreasureChancesRowChanging;
            
            public event TreasureChancesRowChangeEventHandler TreasureChancesRowDeleted;
            
            public event TreasureChancesRowChangeEventHandler TreasureChancesRowDeleting;
            
            public void AddTreasureChancesRow(TreasureChancesRow row) {
                this.Rows.Add(row);
            }
            
            public TreasureChancesRow AddTreasureChancesRow(short ObjectID, System.Byte Chance, short TreasureSetID, System.Byte TreasureCode) {
                TreasureChancesRow rowTreasureChancesRow = ((TreasureChancesRow)(this.NewRow()));
                rowTreasureChancesRow.ItemArray = new object[] {
                        ObjectID,
                        Chance,
                        TreasureSetID,
                        TreasureCode};
                this.Rows.Add(rowTreasureChancesRow);
                return rowTreasureChancesRow;
            }
            
            public TreasureChancesRow FindByObjectIDTreasureSetID(short ObjectID, short TreasureSetID) {
                return ((TreasureChancesRow)(this.Rows.Find(new object[] {
                            ObjectID,
                            TreasureSetID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TreasureChancesDataTable cln = ((TreasureChancesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TreasureChancesDataTable();
            }
            
            internal void InitVars() {
                this.columnObjectID = this.Columns["ObjectID"];
                this.columnChance = this.Columns["Chance"];
                this.columnTreasureSetID = this.Columns["TreasureSetID"];
                this.columnTreasureCode = this.Columns["TreasureCode"];
            }
            
            private void InitClass() {
                this.columnObjectID = new DataColumn("ObjectID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectID);
                this.columnChance = new DataColumn("Chance", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChance);
                this.columnTreasureSetID = new DataColumn("TreasureSetID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTreasureSetID);
                this.columnTreasureCode = new DataColumn("TreasureCode", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTreasureCode);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnObjectID,
                                this.columnTreasureSetID}, true));
                this.columnObjectID.AllowDBNull = false;
                this.columnChance.AllowDBNull = false;
                this.columnTreasureSetID.AllowDBNull = false;
                this.columnTreasureCode.AllowDBNull = false;
            }
            
            public TreasureChancesRow NewTreasureChancesRow() {
                return ((TreasureChancesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TreasureChancesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TreasureChancesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TreasureChancesRowChanged != null)) {
                    this.TreasureChancesRowChanged(this, new TreasureChancesRowChangeEvent(((TreasureChancesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TreasureChancesRowChanging != null)) {
                    this.TreasureChancesRowChanging(this, new TreasureChancesRowChangeEvent(((TreasureChancesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TreasureChancesRowDeleted != null)) {
                    this.TreasureChancesRowDeleted(this, new TreasureChancesRowChangeEvent(((TreasureChancesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TreasureChancesRowDeleting != null)) {
                    this.TreasureChancesRowDeleting(this, new TreasureChancesRowChangeEvent(((TreasureChancesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTreasureChancesRow(TreasureChancesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TreasureChancesRow : DataRow {
            
            private TreasureChancesDataTable tableTreasureChances;
            
            internal TreasureChancesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTreasureChances = ((TreasureChancesDataTable)(this.Table));
            }
            
            public short ObjectID {
                get {
                    return ((short)(this[this.tableTreasureChances.ObjectIDColumn]));
                }
                set {
                    this[this.tableTreasureChances.ObjectIDColumn] = value;
                }
            }
            
            public System.Byte Chance {
                get {
                    return ((System.Byte)(this[this.tableTreasureChances.ChanceColumn]));
                }
                set {
                    this[this.tableTreasureChances.ChanceColumn] = value;
                }
            }
            
            public short TreasureSetID {
                get {
                    return ((short)(this[this.tableTreasureChances.TreasureSetIDColumn]));
                }
                set {
                    this[this.tableTreasureChances.TreasureSetIDColumn] = value;
                }
            }
            
            public System.Byte TreasureCode {
                get {
                    return ((System.Byte)(this[this.tableTreasureChances.TreasureCodeColumn]));
                }
                set {
                    this[this.tableTreasureChances.TreasureCodeColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TreasureChancesRowChangeEvent : EventArgs {
            
            private TreasureChancesRow eventRow;
            
            private DataRowAction eventAction;
            
            public TreasureChancesRowChangeEvent(TreasureChancesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TreasureChancesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TreasureSetsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTreasureSetName;
            
            private DataColumn columnTreasureSetID;
            
            private DataColumn columnIsZoneOnly;
            
            internal TreasureSetsDataTable() : 
                    base("TreasureSets") {
                this.InitClass();
            }
            
            internal TreasureSetsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TreasureSetNameColumn {
                get {
                    return this.columnTreasureSetName;
                }
            }
            
            internal DataColumn TreasureSetIDColumn {
                get {
                    return this.columnTreasureSetID;
                }
            }
            
            internal DataColumn IsZoneOnlyColumn {
                get {
                    return this.columnIsZoneOnly;
                }
            }
            
            public TreasureSetsRow this[int index] {
                get {
                    return ((TreasureSetsRow)(this.Rows[index]));
                }
            }
            
            public event TreasureSetsRowChangeEventHandler TreasureSetsRowChanged;
            
            public event TreasureSetsRowChangeEventHandler TreasureSetsRowChanging;
            
            public event TreasureSetsRowChangeEventHandler TreasureSetsRowDeleted;
            
            public event TreasureSetsRowChangeEventHandler TreasureSetsRowDeleting;
            
            public void AddTreasureSetsRow(TreasureSetsRow row) {
                this.Rows.Add(row);
            }
            
            public TreasureSetsRow AddTreasureSetsRow(string TreasureSetName, short TreasureSetID, bool IsZoneOnly) {
                TreasureSetsRow rowTreasureSetsRow = ((TreasureSetsRow)(this.NewRow()));
                rowTreasureSetsRow.ItemArray = new object[] {
                        TreasureSetName,
                        TreasureSetID,
                        IsZoneOnly};
                this.Rows.Add(rowTreasureSetsRow);
                return rowTreasureSetsRow;
            }
            
            public TreasureSetsRow FindByTreasureSetID(short TreasureSetID) {
                return ((TreasureSetsRow)(this.Rows.Find(new object[] {
                            TreasureSetID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TreasureSetsDataTable cln = ((TreasureSetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TreasureSetsDataTable();
            }
            
            internal void InitVars() {
                this.columnTreasureSetName = this.Columns["TreasureSetName"];
                this.columnTreasureSetID = this.Columns["TreasureSetID"];
                this.columnIsZoneOnly = this.Columns["IsZoneOnly"];
            }
            
            private void InitClass() {
                this.columnTreasureSetName = new DataColumn("TreasureSetName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTreasureSetName);
                this.columnTreasureSetID = new DataColumn("TreasureSetID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTreasureSetID);
                this.columnIsZoneOnly = new DataColumn("IsZoneOnly", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsZoneOnly);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTreasureSetID}, true));
                this.columnTreasureSetName.AllowDBNull = false;
                this.columnTreasureSetID.AllowDBNull = false;
                this.columnTreasureSetID.Unique = true;
                this.columnIsZoneOnly.AllowDBNull = false;
            }
            
            public TreasureSetsRow NewTreasureSetsRow() {
                return ((TreasureSetsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TreasureSetsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TreasureSetsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TreasureSetsRowChanged != null)) {
                    this.TreasureSetsRowChanged(this, new TreasureSetsRowChangeEvent(((TreasureSetsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TreasureSetsRowChanging != null)) {
                    this.TreasureSetsRowChanging(this, new TreasureSetsRowChangeEvent(((TreasureSetsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TreasureSetsRowDeleted != null)) {
                    this.TreasureSetsRowDeleted(this, new TreasureSetsRowChangeEvent(((TreasureSetsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TreasureSetsRowDeleting != null)) {
                    this.TreasureSetsRowDeleting(this, new TreasureSetsRowChangeEvent(((TreasureSetsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTreasureSetsRow(TreasureSetsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TreasureSetsRow : DataRow {
            
            private TreasureSetsDataTable tableTreasureSets;
            
            internal TreasureSetsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTreasureSets = ((TreasureSetsDataTable)(this.Table));
            }
            
            public string TreasureSetName {
                get {
                    return ((string)(this[this.tableTreasureSets.TreasureSetNameColumn]));
                }
                set {
                    this[this.tableTreasureSets.TreasureSetNameColumn] = value;
                }
            }
            
            public short TreasureSetID {
                get {
                    return ((short)(this[this.tableTreasureSets.TreasureSetIDColumn]));
                }
                set {
                    this[this.tableTreasureSets.TreasureSetIDColumn] = value;
                }
            }
            
            public bool IsZoneOnly {
                get {
                    return ((bool)(this[this.tableTreasureSets.IsZoneOnlyColumn]));
                }
                set {
                    this[this.tableTreasureSets.IsZoneOnlyColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TreasureSetsRowChangeEvent : EventArgs {
            
            private TreasureSetsRow eventRow;
            
            private DataRowAction eventAction;
            
            public TreasureSetsRowChangeEvent(TreasureSetsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TreasureSetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WeaponsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPartID;
            
            private DataColumn columndTimeBurstShots;
            
            private DataColumn columndTimeReady;
            
            private DataColumn columnEnergyPerShot;
            
            private DataColumn columnProjectileID1;
            
            private DataColumn columncBulletsPerShot;
            
            private DataColumn columnActivateSound;
            
            private DataColumn columnSingleShotSound;
            
            private DataColumn columnBurstShotSound;
            
            private DataColumn columnDispersion;
            
            internal WeaponsDataTable() : 
                    base("Weapons") {
                this.InitClass();
            }
            
            internal WeaponsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PartIDColumn {
                get {
                    return this.columnPartID;
                }
            }
            
            internal DataColumn dTimeBurstShotsColumn {
                get {
                    return this.columndTimeBurstShots;
                }
            }
            
            internal DataColumn dTimeReadyColumn {
                get {
                    return this.columndTimeReady;
                }
            }
            
            internal DataColumn EnergyPerShotColumn {
                get {
                    return this.columnEnergyPerShot;
                }
            }
            
            internal DataColumn ProjectileID1Column {
                get {
                    return this.columnProjectileID1;
                }
            }
            
            internal DataColumn cBulletsPerShotColumn {
                get {
                    return this.columncBulletsPerShot;
                }
            }
            
            internal DataColumn ActivateSoundColumn {
                get {
                    return this.columnActivateSound;
                }
            }
            
            internal DataColumn SingleShotSoundColumn {
                get {
                    return this.columnSingleShotSound;
                }
            }
            
            internal DataColumn BurstShotSoundColumn {
                get {
                    return this.columnBurstShotSound;
                }
            }
            
            internal DataColumn DispersionColumn {
                get {
                    return this.columnDispersion;
                }
            }
            
            public WeaponsRow this[int index] {
                get {
                    return ((WeaponsRow)(this.Rows[index]));
                }
            }
            
            public event WeaponsRowChangeEventHandler WeaponsRowChanged;
            
            public event WeaponsRowChangeEventHandler WeaponsRowChanging;
            
            public event WeaponsRowChangeEventHandler WeaponsRowDeleted;
            
            public event WeaponsRowChangeEventHandler WeaponsRowDeleting;
            
            public void AddWeaponsRow(WeaponsRow row) {
                this.Rows.Add(row);
            }
            
            public WeaponsRow AddWeaponsRow(short PartID, short dTimeBurstShots, short dTimeReady, System.Single EnergyPerShot, short ProjectileID1, short cBulletsPerShot, short ActivateSound, short SingleShotSound, short BurstShotSound, System.Single Dispersion) {
                WeaponsRow rowWeaponsRow = ((WeaponsRow)(this.NewRow()));
                rowWeaponsRow.ItemArray = new object[] {
                        PartID,
                        dTimeBurstShots,
                        dTimeReady,
                        EnergyPerShot,
                        ProjectileID1,
                        cBulletsPerShot,
                        ActivateSound,
                        SingleShotSound,
                        BurstShotSound,
                        Dispersion};
                this.Rows.Add(rowWeaponsRow);
                return rowWeaponsRow;
            }
            
            public WeaponsRow FindByPartID(short PartID) {
                return ((WeaponsRow)(this.Rows.Find(new object[] {
                            PartID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                WeaponsDataTable cln = ((WeaponsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new WeaponsDataTable();
            }
            
            internal void InitVars() {
                this.columnPartID = this.Columns["PartID"];
                this.columndTimeBurstShots = this.Columns["dTimeBurstShots"];
                this.columndTimeReady = this.Columns["dTimeReady"];
                this.columnEnergyPerShot = this.Columns["EnergyPerShot"];
                this.columnProjectileID1 = this.Columns["ProjectileID1"];
                this.columncBulletsPerShot = this.Columns["cBulletsPerShot"];
                this.columnActivateSound = this.Columns["ActivateSound"];
                this.columnSingleShotSound = this.Columns["SingleShotSound"];
                this.columnBurstShotSound = this.Columns["BurstShotSound"];
                this.columnDispersion = this.Columns["Dispersion"];
            }
            
            private void InitClass() {
                this.columnPartID = new DataColumn("PartID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartID);
                this.columndTimeBurstShots = new DataColumn("dTimeBurstShots", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndTimeBurstShots);
                this.columndTimeReady = new DataColumn("dTimeReady", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndTimeReady);
                this.columnEnergyPerShot = new DataColumn("EnergyPerShot", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEnergyPerShot);
                this.columnProjectileID1 = new DataColumn("ProjectileID1", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectileID1);
                this.columncBulletsPerShot = new DataColumn("cBulletsPerShot", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncBulletsPerShot);
                this.columnActivateSound = new DataColumn("ActivateSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActivateSound);
                this.columnSingleShotSound = new DataColumn("SingleShotSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSingleShotSound);
                this.columnBurstShotSound = new DataColumn("BurstShotSound", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBurstShotSound);
                this.columnDispersion = new DataColumn("Dispersion", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDispersion);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPartID}, true));
                this.columnPartID.AllowDBNull = false;
                this.columnPartID.Unique = true;
                this.columndTimeBurstShots.AllowDBNull = false;
                this.columndTimeReady.AllowDBNull = false;
                this.columnEnergyPerShot.AllowDBNull = false;
                this.columnProjectileID1.AllowDBNull = false;
                this.columncBulletsPerShot.AllowDBNull = false;
                this.columnActivateSound.AllowDBNull = false;
                this.columnSingleShotSound.AllowDBNull = false;
                this.columnBurstShotSound.AllowDBNull = false;
                this.columnDispersion.AllowDBNull = false;
            }
            
            public WeaponsRow NewWeaponsRow() {
                return ((WeaponsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new WeaponsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(WeaponsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WeaponsRowChanged != null)) {
                    this.WeaponsRowChanged(this, new WeaponsRowChangeEvent(((WeaponsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WeaponsRowChanging != null)) {
                    this.WeaponsRowChanging(this, new WeaponsRowChangeEvent(((WeaponsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WeaponsRowDeleted != null)) {
                    this.WeaponsRowDeleted(this, new WeaponsRowChangeEvent(((WeaponsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WeaponsRowDeleting != null)) {
                    this.WeaponsRowDeleting(this, new WeaponsRowChangeEvent(((WeaponsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveWeaponsRow(WeaponsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WeaponsRow : DataRow {
            
            private WeaponsDataTable tableWeapons;
            
            internal WeaponsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableWeapons = ((WeaponsDataTable)(this.Table));
            }
            
            public short PartID {
                get {
                    return ((short)(this[this.tableWeapons.PartIDColumn]));
                }
                set {
                    this[this.tableWeapons.PartIDColumn] = value;
                }
            }
            
            public short dTimeBurstShots {
                get {
                    return ((short)(this[this.tableWeapons.dTimeBurstShotsColumn]));
                }
                set {
                    this[this.tableWeapons.dTimeBurstShotsColumn] = value;
                }
            }
            
            public short dTimeReady {
                get {
                    return ((short)(this[this.tableWeapons.dTimeReadyColumn]));
                }
                set {
                    this[this.tableWeapons.dTimeReadyColumn] = value;
                }
            }
            
            public System.Single EnergyPerShot {
                get {
                    return ((System.Single)(this[this.tableWeapons.EnergyPerShotColumn]));
                }
                set {
                    this[this.tableWeapons.EnergyPerShotColumn] = value;
                }
            }
            
            public short ProjectileID1 {
                get {
                    return ((short)(this[this.tableWeapons.ProjectileID1Column]));
                }
                set {
                    this[this.tableWeapons.ProjectileID1Column] = value;
                }
            }
            
            public short cBulletsPerShot {
                get {
                    return ((short)(this[this.tableWeapons.cBulletsPerShotColumn]));
                }
                set {
                    this[this.tableWeapons.cBulletsPerShotColumn] = value;
                }
            }
            
            public short ActivateSound {
                get {
                    return ((short)(this[this.tableWeapons.ActivateSoundColumn]));
                }
                set {
                    this[this.tableWeapons.ActivateSoundColumn] = value;
                }
            }
            
            public short SingleShotSound {
                get {
                    return ((short)(this[this.tableWeapons.SingleShotSoundColumn]));
                }
                set {
                    this[this.tableWeapons.SingleShotSoundColumn] = value;
                }
            }
            
            public short BurstShotSound {
                get {
                    return ((short)(this[this.tableWeapons.BurstShotSoundColumn]));
                }
                set {
                    this[this.tableWeapons.BurstShotSoundColumn] = value;
                }
            }
            
            public System.Single Dispersion {
                get {
                    return ((System.Single)(this[this.tableWeapons.DispersionColumn]));
                }
                set {
                    this[this.tableWeapons.DispersionColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WeaponsRowChangeEvent : EventArgs {
            
            private WeaponsRow eventRow;
            
            private DataRowAction eventAction;
            
            public WeaponsRowChangeEvent(WeaponsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public WeaponsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
